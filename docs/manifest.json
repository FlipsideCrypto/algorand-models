{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-11-04T14:11:27.746536Z", "invocation_id": "b5d4c602-3381-4465-af45-3703fced557e", "env": {}, "project_id": "00f368a3d4db2b05f7857d030d87e00e", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.algorand_models.core__ez_price_pool_balances": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_hour,\n    asset_id,\n    asset_name,\n    price_usd,\n    algo_balance,\n    non_algo_balance,\n    pool_name,\n    pool_address,\n    _algo_price\nFROM\n    {{ ref('silver__price_pool_balances') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_price_pool_balances"], "unique_id": "model.algorand_models.core__ez_price_pool_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_price_pool_balances.sql", "original_file_path": "models/core/core__ez_price_pool_balances.sql", "name": "core__ez_price_pool_balances", "alias": "ez_price_pool_balances", "checksum": {"name": "sha256", "checksum": "4b39d31d8bdb2411c27b6f71c1bdf6d39cc1af8ec29326345675da2a0305db2b"}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "The other asset in the pool that is paired with ALGO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "The other asset in the pool that is paired with ALGO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The price of the asset in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALGO_BALANCE": {"name": "ALGO_BALANCE", "description": "The amount of ALGOs in the pool at the end of the block_hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ALGO_BALANCE": {"name": "NON_ALGO_BALANCE", "description": "The amount of other asset in the pool at the end of the block_hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ALGO_PRICE": {"name": "_ALGO_PRICE", "description": "The address of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_price_pool_balances.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.119432, "compiled_sql": "\n\nSELECT\n    block_hour,\n    asset_id,\n    asset_name,\n    price_usd,\n    algo_balance,\n    non_algo_balance,\n    pool_name,\n    pool_address,\n    _algo_price\nFROM\n    ALGORAND_DEV.silver.price_pool_balances", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_price_pool_balances"}, "model.algorand_models.core__ez_transaction_asset_freeze": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    ast.decimals,\n    asset_address,\n    asset_freeze,\n    'afrz' AS tx_type,\n    'asset freeze' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    b\n    JOIN {{ ref('core__dim_asset') }}\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'aa0032cc4b4b90b32d2ecc1fa0e2ce80'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_asset_freeze"], "unique_id": "model.algorand_models.core__ez_transaction_asset_freeze", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_asset_freeze.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.sql", "name": "core__ez_transaction_asset_freeze", "alias": "ez_transaction_asset_freeze", "checksum": {"name": "sha256", "checksum": "0ca205fab4bda6898b82791b401f1dc5d3a280c499a265eae19da3c139a14e16"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_FREEZE": {"name": "ASSET_FREEZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_asset_freeze.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.378017, "compiled_sql": "\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    ast.decimals,\n    asset_address,\n    asset_freeze,\n    'afrz' AS tx_type,\n    'asset freeze' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    b\n    JOIN ALGORAND_DEV.core.dim_asset\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'aa0032cc4b4b90b32d2ecc1fa0e2ce80'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_asset_freeze"}, "model.algorand_models.core__ez_transaction_application_call": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    fee,\n    COALESCE(\n        app_id,\n        asset_id\n    ) AS app_id,\n    'appl' AS tx_type,\n    'application call' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }} A\n    LEFT JOIN {{ ref('core__dim_asset') }}\n    das\n    ON A.dim_asset_id = das.dim_asset_id\nWHERE\n    dim_transaction_type_id = '63469c3c4f19f07c737127a117296de4'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_application_call"], "unique_id": "model.algorand_models.core__ez_transaction_application_call", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_application_call.sql", "original_file_path": "models/core/core__ez_transaction_application_call.sql", "name": "core__ez_transaction_application_call", "alias": "ez_transaction_application_call", "checksum": {"name": "sha256", "checksum": "330696952b3134525afaabe91a9f7d575ecbf99cb98ea4886e01ebf3c25ce117"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_ID": {"name": "APP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_application_call.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.415272, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    fee,\n    COALESCE(\n        app_id,\n        asset_id\n    ) AS app_id,\n    'appl' AS tx_type,\n    'application call' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction A\n    LEFT JOIN ALGORAND_DEV.core.dim_asset\n    das\n    ON A.dim_asset_id = das.dim_asset_id\nWHERE\n    dim_transaction_type_id = '63469c3c4f19f07c737127a117296de4'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_application_call"}, "model.algorand_models.core__fact_daily_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"fact_daily_balance_id\",\n    incremental_strategy = 'merge',\n    cluster_by = ['date'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.address','date']\n    ) }} AS fact_daily_balance_id,\n    b.dim_account_id,\n    A.address,\n    DATE,\n    balance\nFROM\n    {{ ref('silver__daily_balances') }} A\n    JOIN {{ ref('core__dim_account') }}\n    b\n    ON A.address = b.address\nWHERE\n    balance > 0\n\n{% if is_incremental() %}\nAND DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__daily_balances", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_balance_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["date"], "incremental_strategy": "merge", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_daily_balances"], "unique_id": "model.algorand_models.core__fact_daily_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_daily_balances.sql", "original_file_path": "models/core/core__fact_daily_balances.sql", "name": "core__fact_daily_balances", "alias": "fact_daily_balances", "checksum": {"name": "sha256", "checksum": "eb1eacd9b14ad549c3bde5a2a645ae7d016902f0d13f29bd23a102b6c53b783b"}, "tags": [], "refs": [["silver__daily_balances"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "Current ALGO amounts tied to the account", "columns": {"FACT_DAILY_BALANCE_ID": {"name": "FACT_DAILY_BALANCE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to the DIM_ACCOUNT table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE": {"name": "DATE", "description": "The date where the end of day balance is valid for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BALANCE": {"name": "BALANCE", "description": "The total amount of ALGOs held by this address at the end of the day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_daily_balances.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_daily_balance_id", "incremental_strategy": "merge", "cluster_by": ["date"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1667512711.578922, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(date as \n    varchar\n), '') as \n    varchar\n)) AS fact_daily_balance_id,\n    b.dim_account_id,\n    A.address,\n    DATE,\n    balance\nFROM\n    ALGORAND_DEV.silver.daily_balances A\n    JOIN ALGORAND_DEV.core.dim_account\n    b\n    ON A.address = b.address\nWHERE\n    balance > 0\n\n\nAND DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.core.fact_daily_balances)\n    ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_daily_balances"}, "model.algorand_models.core__ez_transfer": {"raw_sql": "{{ config(\n    materialized = 'view',\n) }}\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    tx_sender AS asset_sender,\n    receiver,\n    0 AS asset_id,\n    IFNULL(\n        amount,\n        0\n    ) AS amount,\n    asset_name,\n    decimals,\n    IFNULL(\n        fee,\n        0\n    ) AS fee,\n    'pay' AS tx_type,\n    'payment' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }} A\n    JOIN {{ ref('core__dim_asset') }}\n    asset\n    ON A.dim_asset_id = asset.dim_asset_id\nWHERE\n    dim_transaction_type_id = 'b02a45a596bfb86fe2578bde75ff5444'\nUNION ALL\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    COALESCE(\n        asset_sender,\n        tx_sender\n    ) AS asset_sender,\n    COALESCE(\n        asset_receiver,\n        receiver\n    ) AS receiver,\n    asset.asset_id AS asset_id,\n    IFNULL(\n        CASE\n            WHEN asset.decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                asset.decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END,\n        0\n    ) AS amount,\n    asset_name,\n    decimals,\n    IFNULL(\n        fee,\n        0\n    ) AS fee,\n    'axfer' AS tx_type,\n    'asset transfer' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    assetTransfer\n    JOIN {{ ref('core__dim_asset') }}\n    asset\n    ON assetTransfer.dim_asset_id = asset.dim_asset_id\nWHERE\n    dim_transaction_type_id = 'c495d86d106bb9c67e5925d952e553f2'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transfer"], "unique_id": "model.algorand_models.core__ez_transfer", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transfer.sql", "original_file_path": "models/core/core__ez_transfer.sql", "name": "core__ez_transfer", "alias": "ez_transfer", "checksum": {"name": "sha256", "checksum": "5a78fe20fa66363bb44c646cdf754f886f1acc181acdd9da7da02fdc9eec6750"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"], ["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_SENDER": {"name": "ASSET_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transfer.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.6391912, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    tx_sender AS asset_sender,\n    receiver,\n    0 AS asset_id,\n    IFNULL(\n        amount,\n        0\n    ) AS amount,\n    asset_name,\n    decimals,\n    IFNULL(\n        fee,\n        0\n    ) AS fee,\n    'pay' AS tx_type,\n    'payment' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction A\n    JOIN ALGORAND_DEV.core.dim_asset\n    asset\n    ON A.dim_asset_id = asset.dim_asset_id\nWHERE\n    dim_transaction_type_id = 'b02a45a596bfb86fe2578bde75ff5444'\nUNION ALL\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    tx_sender,\n    COALESCE(\n        asset_sender,\n        tx_sender\n    ) AS asset_sender,\n    COALESCE(\n        asset_receiver,\n        receiver\n    ) AS receiver,\n    asset.asset_id AS asset_id,\n    IFNULL(\n        CASE\n            WHEN asset.decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                asset.decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END,\n        0\n    ) AS amount,\n    asset_name,\n    decimals,\n    IFNULL(\n        fee,\n        0\n    ) AS fee,\n    'axfer' AS tx_type,\n    'asset transfer' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    assetTransfer\n    JOIN ALGORAND_DEV.core.dim_asset\n    asset\n    ON assetTransfer.dim_asset_id = asset.dim_asset_id\nWHERE\n    dim_transaction_type_id = 'c495d86d106bb9c67e5925d952e553f2'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transfer"}, "model.algorand_models.core__ez_transaction_key_registration": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    participation_key,\n    vrf_public_key,\n    vote_first,\n    vote_last,\n    vote_keydilution,\n    'keyreg' AS tx_type,\n    'key registration' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    b\n    JOIN {{ ref('core__dim_asset') }}\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'c82245dfb0636319da14354856856006'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_key_registration"], "unique_id": "model.algorand_models.core__ez_transaction_key_registration", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_key_registration.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.sql", "name": "core__ez_transaction_key_registration", "alias": "ez_transaction_key_registration", "checksum": {"name": "sha256", "checksum": "012f395ddd844f90a48e188f8b5827e5d33c9618e68b04a6d6f91a68845c74a4"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTICIPATION_KEY": {"name": "PARTICIPATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VRF_PUBLIC_KEY": {"name": "VRF_PUBLIC_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_FIRST": {"name": "VOTE_FIRST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_LAST": {"name": "VOTE_LAST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_KEYDILUTION": {"name": "VOTE_KEYDILUTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_key_registration.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.6243598, "compiled_sql": "\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    participation_key,\n    vrf_public_key,\n    vote_first,\n    vote_last,\n    vote_keydilution,\n    'keyreg' AS tx_type,\n    'key registration' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    b\n    JOIN ALGORAND_DEV.core.dim_asset\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'c82245dfb0636319da14354856856006'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_key_registration"}, "model.algorand_models.core__ez_transaction_asset_configuration": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    asset_supply,\n    asset_parameters,\n    'acfg' AS tx_type,\n    'asset configuration' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    b\n    JOIN {{ ref('core__dim_asset') }}\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = '09b31a7810640ff01202b26dd70a7aa3'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_asset_configuration"], "unique_id": "model.algorand_models.core__ez_transaction_asset_configuration", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_asset_configuration.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.sql", "name": "core__ez_transaction_asset_configuration", "alias": "ez_transaction_asset_configuration", "checksum": {"name": "sha256", "checksum": "f71671aa7cd4db52ba0be26d9c336973cac82bb12c3129e7d1aaf0eeafd27e6e"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_SUPPLY": {"name": "ASSET_SUPPLY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PARAMETERS": {"name": "ASSET_PARAMETERS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_asset_configuration.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.6619709, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    asset_supply,\n    asset_parameters,\n    'acfg' AS tx_type,\n    'asset configuration' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    b\n    JOIN ALGORAND_DEV.core.dim_asset\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = '09b31a7810640ff01202b26dd70a7aa3'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_asset_configuration"}, "model.algorand_models.core__ez_price_swap": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_hour,\n    A.asset_id,\n    asset_name,\n    price_usd,\n    min_price_usd_hour,\n    max_price_usd_hour,\n    volatility_measure,\n    swaps_in_hour,\n    volume_usd_in_hour\nFROM\n    {{ ref('silver__price_swap') }} A\n    JOIN {{ ref('core__dim_asset') }}\n    b\n    ON A.asset_id = b.asset_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.silver__price_swap", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_price_swap"], "unique_id": "model.algorand_models.core__ez_price_swap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_price_swap.sql", "original_file_path": "models/core/core__ez_price_swap.sql", "name": "core__ez_price_swap", "alias": "ez_price_swap", "checksum": {"name": "sha256", "checksum": "d8304d23f8daba60e30cde4cc7c74242a7a0679ba12cc8123b73ccdb2d8f66b8"}, "tags": [], "refs": [["silver__price_swap"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The price of the asset in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_price_usd_hour": {"name": "min_price_usd_hour", "description": "The lowest price found in the hour in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_price_usd_hour": {"name": "max_price_usd_hour", "description": "The highest price found in the hour in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volatility_measure": {"name": "volatility_measure", "description": "The difference between the min and max price for the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swaps_in_hour": {"name": "swaps_in_hour", "description": "The number of swap transactions in the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd_in_hour": {"name": "volume_usd_in_hour", "description": "The volumne of swap transactions (in USD) in the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_price_swap.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.675426, "compiled_sql": "\n\nSELECT\n    block_hour,\n    A.asset_id,\n    asset_name,\n    price_usd,\n    min_price_usd_hour,\n    max_price_usd_hour,\n    volatility_measure,\n    swaps_in_hour,\n    volume_usd_in_hour\nFROM\n    ALGORAND_DEV.silver.price_swap A\n    JOIN ALGORAND_DEV.core.dim_asset\n    b\n    ON A.asset_id = b.asset_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_price_swap"}, "model.algorand_models.core__ez_transaction_payment": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    receiver,\n    amount / pow(\n        10,\n        6\n    ) AS amount,\n    'pay' AS tx_type,\n    'payment' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    b\n    JOIN {{ ref('core__dim_asset') }}\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'b02a45a596bfb86fe2578bde75ff5444'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_payment"], "unique_id": "model.algorand_models.core__ez_transaction_payment", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_payment.sql", "original_file_path": "models/core/core__ez_transaction_payment.sql", "name": "core__ez_transaction_payment", "alias": "ez_transaction_payment", "checksum": {"name": "sha256", "checksum": "09524c3eca70a74bd8b15b10bf0c6009eadba674c284c2fe20602f6e80be8941"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_payment.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.435421, "compiled_sql": "\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    receiver,\n    amount / pow(\n        10,\n        6\n    ) AS amount,\n    'pay' AS tx_type,\n    'payment' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    b\n    JOIN ALGORAND_DEV.core.dim_asset\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'b02a45a596bfb86fe2578bde75ff5444'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_payment"}, "model.algorand_models.core__dim_label": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  blockchain,\n  creator,\n  address,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  project_name AS label,\n  address_name AS address_name\nFROM\n  {{ source(\n    'crosschain',\n    'address_labels'\n  ) }}\nWHERE\n  blockchain = 'algorand'\nUNION\nSELECT\n  blockchain,\n  creator,\n  address,\n  label_type,\n  label_subtype,\n  label,\n  address_name\nFROM\n  {{ ref('silver__pool_addresses') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.crosschain.address_labels", "model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_label"], "unique_id": "model.algorand_models.core__dim_label", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_label.sql", "original_file_path": "models/core/core__dim_label.sql", "name": "core__dim_label", "alias": "dim_label", "checksum": {"name": "sha256", "checksum": "5a0ae1e4238e2054ffd800b218043fdded3fe7c464747ffed9113f2629639a00"}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_label.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.4497359, "compiled_sql": "\n\nSELECT\n  blockchain,\n  creator,\n  address,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  project_name AS label,\n  address_name AS address_name\nFROM\n  flipside_prod_db.silver_crosschain.address_labels\nWHERE\n  blockchain = 'algorand'\nUNION\nSELECT\n  blockchain,\n  creator,\n  address,\n  label_type,\n  label_subtype,\n  label,\n  address_name\nFROM\n  ALGORAND_DEV.silver.pool_addresses", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_label"}, "model.algorand_models.core__ez_transaction_asset_transfer": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    ast.decimals,\n    asset_sender,\n    asset_receiver,\n    asset_amount,\n    'axfer' AS tx_type,\n    'asset transfer' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    {{ ref('core__fact_transaction') }}\n    b\n    JOIN {{ ref('core__dim_asset') }}\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'c495d86d106bb9c67e5925d952e553f2'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__ez_transaction_asset_transfer"], "unique_id": "model.algorand_models.core__ez_transaction_asset_transfer", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__ez_transaction_asset_transfer.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.sql", "name": "core__ez_transaction_asset_transfer", "alias": "ez_transaction_asset_transfer", "checksum": {"name": "sha256", "checksum": "b1204582970bd446dd37c0bbe760a193fe23e374c4d43470c427330801422536"}, "tags": [], "refs": [["core__fact_transaction"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_SENDER": {"name": "ASSET_SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_RECEIVER": {"name": "ASSET_RECEIVER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA": {"name": "EXTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__ez_transaction_asset_transfer.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.5163388, "compiled_sql": "\n\nSELECT\n    b.block_timestamp,\n    block_timestamp :: DATE block_date,\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    b.tx_sender,\n    fee,\n    ast.asset_id,\n    ast.asset_name,\n    ast.decimals,\n    asset_sender,\n    asset_receiver,\n    asset_amount,\n    'axfer' AS tx_type,\n    'asset transfer' AS tx_type_name,\n    tx_message,\n    extra\nFROM\n    ALGORAND_DEV.core.fact_transaction\n    b\n    JOIN ALGORAND_DEV.core.dim_asset\n    ast\n    ON b.dim_asset_id = ast.dim_asset_id\nWHERE\n    b.dim_transaction_type_id = 'c495d86d106bb9c67e5925d952e553f2'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.ez_transaction_asset_transfer"}, "model.algorand_models.nft__ez_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    nft_marketplace,\n    block_timestamp,\n    tx_group_id,\n    purchaser,\n    C.created_at AS purchaser_account_created_at,\n    A.nft_asset_id,\n    nft_asset_name,\n    nft_total_supply,\n    nft_url,\n    collection_name,\n    number_of_nfts,\n    total_sales_amount\nFROM\n    {{ ref('nft__fact_nft_sales') }} A\n    JOIN {{ ref('nft__ez_nft_asset') }}\n    b\n    ON A.nft_asset_id = b.nft_asset_id\n    JOIN {{ ref('core__dim_account') }} C\n    ON A.dim_account_id__purchaser = C.dim_account_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.nft__fact_nft_sales", "model.algorand_models.nft__ez_nft_asset", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "nft", "fqn": ["algorand_models", "core", "NFT", "nft__ez_nft_sales"], "unique_id": "model.algorand_models.nft__ez_nft_sales", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/NFT/nft__ez_nft_sales.sql", "original_file_path": "models/core/NFT/nft__ez_nft_sales.sql", "name": "nft__ez_nft_sales", "alias": "ez_nft_sales", "checksum": {"name": "sha256", "checksum": "5bea9801ed3d24cc83f4a6f93ff6bfef9f928b5636ea32df90755be957c1dd05"}, "tags": [], "refs": [["nft__fact_nft_sales"], ["nft__ez_nft_asset"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {"NFT_MARKETPLACE": {"name": "NFT_MARKETPLACE", "description": "The marketplace or process used to make exchange the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "Address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER_ACCOUNT_CREATED_AT": {"name": "PURCHASER_ACCOUNT_CREATED_AT", "description": "Block timestamp for when the address that purchased the NFT was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_NAME": {"name": "NFT_ASSET_NAME", "description": "Name associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TOTAL_SUPPLY": {"name": "NFT_TOTAL_SUPPLY", "description": "Total supply of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NAME": {"name": "COLLECTION_NAME", "description": "Name of the NFT collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_URL": {"name": "NFT_URL", "description": "The url to the asset website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "The amount on the NFT sold. In most cases this will be 1 but some NFTs have a token supply higher than 1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "Total amount of paid in ALGOs for the NFT purchase", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/NFT/nft__ez_nft_sales.yml", "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512711.685834, "compiled_sql": "\n\nSELECT\n    nft_marketplace,\n    block_timestamp,\n    tx_group_id,\n    purchaser,\n    C.created_at AS purchaser_account_created_at,\n    A.nft_asset_id,\n    nft_asset_name,\n    nft_total_supply,\n    nft_url,\n    collection_name,\n    number_of_nfts,\n    total_sales_amount\nFROM\n    ALGORAND_DEV.nft.fact_nft_sales A\n    JOIN ALGORAND_DEV.nft.ez_nft_asset\n    b\n    ON A.nft_asset_id = b.nft_asset_id\n    JOIN ALGORAND_DEV.core.dim_account C\n    ON A.dim_account_id__purchaser = C.dim_account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.nft.ez_nft_sales"}, "model.algorand_models.bronze__transaction": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    ROUND,\n    intra,\n    typeenum,\n    asset,\n    txid,\n    txnbytes,\n    txn,\n    extra,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    {{ source(\n        'algorand',\n        'TXN'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.TXN"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__transaction"], "unique_id": "model.algorand_models.bronze__transaction", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__transaction.sql", "original_file_path": "models/bronze/bronze__transaction.sql", "name": "bronze__transaction", "alias": "transaction", "checksum": {"name": "sha256", "checksum": "41fadf89ab5c3f6c0fc4ab9d166349140ee11bee90df1633be29346251cf4aa0"}, "tags": [], "refs": [], "sources": [["algorand", "TXN"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.811691, "compiled_sql": "\n\nSELECT\n    ROUND,\n    intra,\n    typeenum,\n    asset,\n    txid,\n    txnbytes,\n    txn,\n    extra,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.TXN", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.transaction"}, "model.algorand_models.bronze__application": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    INDEX,\n    creator,\n    deleted,\n    created_at,\n    closed_at,\n    params,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    {{ source(\n        'algorand',\n        'APP'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.APP"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__application"], "unique_id": "model.algorand_models.bronze__application", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__application.sql", "original_file_path": "models/bronze/bronze__application.sql", "name": "bronze__application", "alias": "application", "checksum": {"name": "sha256", "checksum": "5abc36d038af3eeae9a401955095efcb69f9cd814245b1a4c3ba54f91ba9a64d"}, "tags": [], "refs": [], "sources": [["algorand", "APP"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__application.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.814371, "compiled_sql": "\n\nSELECT\n    INDEX,\n    creator,\n    deleted,\n    created_at,\n    closed_at,\n    params,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.APP", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.application"}, "model.algorand_models.bronze__account": {"raw_sql": "{{ config (\n  materialized = 'view'\n) }}\n\nSELECT\n  addr,\n  deleted,\n  rewardsbase,\n  rewards_total,\n  microalgos,\n  closed_at,\n  created_at,\n  keytype,\n  account_data,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'algorand',\n    'ACCOUNT'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.ACCOUNT"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__account"], "unique_id": "model.algorand_models.bronze__account", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__account.sql", "original_file_path": "models/bronze/bronze__account.sql", "name": "bronze__account", "alias": "account", "checksum": {"name": "sha256", "checksum": "9420239578438dc3f481bf1b63a32bc7f15aab1fdf69f7cb10a49a78b5997183"}, "tags": [], "refs": [], "sources": [["algorand", "ACCOUNT"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__account.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.815713, "compiled_sql": "\n\nSELECT\n  addr,\n  deleted,\n  rewardsbase,\n  rewards_total,\n  microalgos,\n  closed_at,\n  created_at,\n  keytype,\n  account_data,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.account"}, "model.algorand_models.bronze__block": {"raw_sql": "{{ config (\n  materialized = 'view'\n) }}\n\nSELECT\n  ROUND,\n  realtime,\n  rewardslevel,\n  header,\n  __HEVO__LOADED_AT,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _inserted_timestamp\nFROM\n  {{ source(\n    'algorand',\n    'BLOCK_HEADER'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.BLOCK_HEADER"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__block"], "unique_id": "model.algorand_models.bronze__block", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__block.sql", "original_file_path": "models/bronze/bronze__block.sql", "name": "bronze__block", "alias": "block", "checksum": {"name": "sha256", "checksum": "65b6e3f220638b4c7b2f6d06add66b2aab0ec1bc7446ba0c5f81b49490375271"}, "tags": [], "refs": [], "sources": [["algorand", "BLOCK_HEADER"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.8180249, "compiled_sql": "\n\nSELECT\n  ROUND,\n  realtime,\n  rewardslevel,\n  header,\n  __HEVO__LOADED_AT,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _inserted_timestamp\nFROM\n  hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.BLOCK_HEADER", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.block"}, "model.algorand_models.bronze__account_asset": {"raw_sql": "{{ config (\n  materialized = 'view'\n) }}\n\nSELECT\n  addr,\n  assetid,\n  amount,\n  deleted,\n  closed_at,\n  created_at,\n  frozen,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'algorand',\n    'ACCOUNT_ASSET'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.ACCOUNT_ASSET"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__account_asset"], "unique_id": "model.algorand_models.bronze__account_asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__account_asset.sql", "original_file_path": "models/bronze/bronze__account_asset.sql", "name": "bronze__account_asset", "alias": "account_asset", "checksum": {"name": "sha256", "checksum": "fe5e1b22dfd0f402d191e252ef4ca229a122b9920625f1fac01f5aacded5d9ad"}, "tags": [], "refs": [], "sources": [["algorand", "ACCOUNT_ASSET"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__account_asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.8190389, "compiled_sql": "\n\nSELECT\n  addr,\n  assetid,\n  amount,\n  deleted,\n  closed_at,\n  created_at,\n  frozen,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT_ASSET", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.account_asset"}, "model.algorand_models.bronze__account_application": {"raw_sql": "{{ config (\n  materialized = 'view'\n) }}\n\nSELECT\n  addr,\n  app,\n  deleted,\n  closed_at,\n  created_at,\n  localstate,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'algorand',\n    'ACCOUNT_APP'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.ACCOUNT_APP"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__account_application"], "unique_id": "model.algorand_models.bronze__account_application", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__account_application.sql", "original_file_path": "models/bronze/bronze__account_application.sql", "name": "bronze__account_application", "alias": "account_application", "checksum": {"name": "sha256", "checksum": "d230acabb2713609847b4d9509a734726193cd48da3af209bb84c130649e9526"}, "tags": [], "refs": [], "sources": [["algorand", "ACCOUNT_APP"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__account_application.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.819992, "compiled_sql": "\n\nSELECT\n  addr,\n  app,\n  deleted,\n  closed_at,\n  created_at,\n  localstate,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP,\n  __HEVO__LOADED_AT\nFROM\n  hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT_APP", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.account_application"}, "model.algorand_models.bronze__asset": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    INDEX,\n    creator_addr,\n    params,\n    deleted,\n    created_at,\n    closed_at,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    {{ source(\n        'algorand',\n        'ASSET'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.algorand.ASSET"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "bronze", "fqn": ["algorand_models", "bronze", "bronze__asset"], "unique_id": "model.algorand_models.bronze__asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "bronze/bronze__asset.sql", "original_file_path": "models/bronze/bronze__asset.sql", "name": "bronze__asset", "alias": "asset", "checksum": {"name": "sha256", "checksum": "d6b0afc7abf7b49bea192ffb54820c50407b4c804ca5b5d3fb5f1fa4b9c331f4"}, "tags": [], "refs": [], "sources": [["algorand", "ASSET"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/bronze/bronze__asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667512710.8210702, "compiled_sql": "\n\nSELECT\n    INDEX,\n    creator_addr,\n    params,\n    deleted,\n    created_at,\n    closed_at,\n    __HEVO__LOADED_AT,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _inserted_timestamp\nFROM\n    hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ASSET", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.bronze.asset"}, "model.algorand_models.silver__transaction_reward": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['_INSERTED_TIMESTAMP::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        tx_ID,\n        DATA,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__indexer_tx') }}\n    WHERE\n        block_id < 21046789\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= CURRENT_DATE -2\n{% endif %}\n\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\nORDER BY\n    _INSERTED_TIMESTAMP DESC)) = 1\n),\ninner_outer AS (\n    SELECT\n        A.tx_ID,\n        A.data :\"confirmed-round\" :: INT AS block_id,\n        A.data :\"intra-round-offset\" :: INT AS intra,\n        C.value :sender :: STRING AS sender,\n        C.value :\"sender-rewards\" AS sender_rewards,\n        C.value :\"payment-transaction\" :\"receiver\" :: STRING AS reciever,\n        C.value :\"receiver-rewards\" AS reciever_rewards,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A,\n        LATERAL FLATTEN(\n            input => A.data :\"inner-txns\"\n        ) C\n    UNION ALL\n    SELECT\n        A.tx_id,\n        A.data :\"confirmed-round\" :: INT AS block_id,\n        A.data :\"intra-round-offset\" :: INT AS intra,\n        A.data :sender :: STRING AS sender,\n        A.data :\"sender-rewards\" AS sender_rewards,\n        A.data :\"payment-transaction\" :\"receiver\" :: STRING AS reciever,\n        A.data :\"receiver-rewards\" AS reciever_rewards,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A\n)\nSELECT\n    A.intra,\n    A.block_id,\n    A.tx_id,\n    A.account,\n    SUM(amount) amount,\n    concat_ws(\n        '-',\n        A.block_id,\n        A.intra,\n        A.account\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    (\n        SELECT\n            tx_id,\n            block_id,\n            intra,\n            sender AS account,\n            sender_rewards AS amount,\n            _INSERTED_TIMESTAMP\n        FROM\n            inner_outer\n        WHERE\n            sender_rewards > 0\n        UNION ALL\n        SELECT\n            tx_id,\n            block_id,\n            intra,\n            reciever AS account,\n            reciever_rewards AS amount,\n            _INSERTED_TIMESTAMP\n        FROM\n            inner_outer\n        WHERE\n            reciever_rewards > 0\n    ) A\nGROUP BY\n    A.intra,\n    A.block_id,\n    A.tx_id,\n    A.account,\n    _unique_key,\n    _INSERTED_TIMESTAMP", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_INSERTED_TIMESTAMP::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__transaction_reward"], "unique_id": "model.algorand_models.silver__transaction_reward", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__transaction_reward.sql", "original_file_path": "models/silver/silver__transaction_reward.sql", "name": "silver__transaction_reward", "alias": "transaction_reward", "checksum": {"name": "sha256", "checksum": "d6efa2706f371e44a537848c93448d3fb0bcb51a498e8f2b81f961ba879df619"}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT": {"name": "ACCOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__transaction_reward.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_INSERTED_TIMESTAMP::DATE"]}, "created_at": 1667512711.8551219, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        tx_ID,\n        DATA,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.indexer_tx\n    WHERE\n        block_id < 21046789\n\n\nAND _INSERTED_TIMESTAMP >= CURRENT_DATE -2\n\n\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\nORDER BY\n    _INSERTED_TIMESTAMP DESC)) = 1\n),\ninner_outer AS (\n    SELECT\n        A.tx_ID,\n        A.data :\"confirmed-round\" :: INT AS block_id,\n        A.data :\"intra-round-offset\" :: INT AS intra,\n        C.value :sender :: STRING AS sender,\n        C.value :\"sender-rewards\" AS sender_rewards,\n        C.value :\"payment-transaction\" :\"receiver\" :: STRING AS reciever,\n        C.value :\"receiver-rewards\" AS reciever_rewards,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A,\n        LATERAL FLATTEN(\n            input => A.data :\"inner-txns\"\n        ) C\n    UNION ALL\n    SELECT\n        A.tx_id,\n        A.data :\"confirmed-round\" :: INT AS block_id,\n        A.data :\"intra-round-offset\" :: INT AS intra,\n        A.data :sender :: STRING AS sender,\n        A.data :\"sender-rewards\" AS sender_rewards,\n        A.data :\"payment-transaction\" :\"receiver\" :: STRING AS reciever,\n        A.data :\"receiver-rewards\" AS reciever_rewards,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A\n)\nSELECT\n    A.intra,\n    A.block_id,\n    A.tx_id,\n    A.account,\n    SUM(amount) amount,\n    concat_ws(\n        '-',\n        A.block_id,\n        A.intra,\n        A.account\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    (\n        SELECT\n            tx_id,\n            block_id,\n            intra,\n            sender AS account,\n            sender_rewards AS amount,\n            _INSERTED_TIMESTAMP\n        FROM\n            inner_outer\n        WHERE\n            sender_rewards > 0\n        UNION ALL\n        SELECT\n            tx_id,\n            block_id,\n            intra,\n            reciever AS account,\n            reciever_rewards AS amount,\n            _INSERTED_TIMESTAMP\n        FROM\n            inner_outer\n        WHERE\n            reciever_rewards > 0\n    ) A\nGROUP BY\n    A.intra,\n    A.block_id,\n    A.tx_id,\n    A.account,\n    _unique_key,\n    _INSERTED_TIMESTAMP", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.transaction_reward"}, "model.algorand_models.silver__swaps_wagmiswap_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH wagmi_app_ids AS (\n\n    SELECT\n        DISTINCT app_id\n    FROM\n        {{ ref('silver__application') }}\n    WHERE\n        creator_address = 'DKUK6HUCW4USCSMWJQN5JL2GII52QPRGGNJZG6F2TLLWKWJ4XDV2YYOBKA'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'appl'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        {{ ref('silver__transaction') }}\n        pt\n        JOIN {{ ref('silver__asset') }} A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nwagmi_app AS(\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        sender AS swapper,\n        app_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS to_asset_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        LEFT JOIN {{ ref('silver__asset') }}\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                wagmi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) ILIKE 'swap'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swaps AS(\n    SELECT\n        wa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        wagmi_app wa\n        JOIN tx_pay pt\n        ON wa.tx_group_id = pt.tx_group_id\n        AND wa.swapper = pt.sender\n        AND wa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swaps AS(\n    SELECT\n        wa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        CASE\n            WHEN decimals > 0 THEN asset_amount / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount\n        END AS from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        wagmi_app wa\n        JOIN tx_a_tfer pt\n        ON wa.tx_group_id = pt.tx_group_id\n        AND wa.intra -1 = pt.intra\n        AND wa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swaps AS(\n    SELECT\n        *\n    FROM\n        from_pay_swaps\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swaps\n)\nSELECT\n    wa.block_id AS block_id,\n    wa.intra AS intra,\n    wa.tx_group_id AS tx_group_id,\n    wa.app_id,\n    fs.swapper,\n    fs.from_asset_id AS swap_from_asset_id,\n    fs.swap_from_amount :: FLOAT AS swap_from_amount,\n    wa.pool_address AS pool_address,\n    wa.to_asset_id AS swap_to_asset_id,\n    wa.swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        wa.block_id :: STRING,\n        wa.intra :: STRING\n    ) AS _unique_key,\n    wa._INSERTED_TIMESTAMP\nFROM\n    wagmi_app wa\n    LEFT JOIN from_swaps fs\n    ON wa.tx_group_id = fs.tx_group_id\n    AND wa.intra -1 = fs.intra", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__application", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_wagmiswap_dex"], "unique_id": "model.algorand_models.silver__swaps_wagmiswap_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_wagmiswap_dex.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.sql", "name": "silver__swaps_wagmiswap_dex", "alias": "swaps_wagmiswap_dex", "checksum": {"name": "sha256", "checksum": "a5317c44eb27b62e73ae759b2d6af314292dd677b12b7742b218d42fd91cb5fa"}, "tags": [], "refs": [["silver__application"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_wagmiswap_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.840512, "compiled_sql": "\n\nWITH wagmi_app_ids AS (\n\n    SELECT\n        DISTINCT app_id\n    FROM\n        ALGORAND_DEV.silver.application\n    WHERE\n        creator_address = 'DKUK6HUCW4USCSMWJQN5JL2GII52QPRGGNJZG6F2TLLWKWJ4XDV2YYOBKA'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_wagmiswap_dex\n) - INTERVAL '4 HOURS'\n\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'appl'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_wagmiswap_dex\n) - INTERVAL '4 HOURS'\n\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_wagmiswap_dex\n) - INTERVAL '4 HOURS'\n\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        ALGORAND_DEV.silver.transaction\n        pt\n        JOIN ALGORAND_DEV.silver.asset A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_wagmiswap_dex\n) - INTERVAL '4 HOURS'\n\n),\nwagmi_app AS(\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        sender AS swapper,\n        app_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS to_asset_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        LEFT JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                wagmi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) ILIKE 'swap'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swaps AS(\n    SELECT\n        wa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        wagmi_app wa\n        JOIN tx_pay pt\n        ON wa.tx_group_id = pt.tx_group_id\n        AND wa.swapper = pt.sender\n        AND wa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swaps AS(\n    SELECT\n        wa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        CASE\n            WHEN decimals > 0 THEN asset_amount / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount\n        END AS from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        wagmi_app wa\n        JOIN tx_a_tfer pt\n        ON wa.tx_group_id = pt.tx_group_id\n        AND wa.intra -1 = pt.intra\n        AND wa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swaps AS(\n    SELECT\n        *\n    FROM\n        from_pay_swaps\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swaps\n)\nSELECT\n    wa.block_id AS block_id,\n    wa.intra AS intra,\n    wa.tx_group_id AS tx_group_id,\n    wa.app_id,\n    fs.swapper,\n    fs.from_asset_id AS swap_from_asset_id,\n    fs.swap_from_amount :: FLOAT AS swap_from_amount,\n    wa.pool_address AS pool_address,\n    wa.to_asset_id AS swap_to_asset_id,\n    wa.swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        wa.block_id :: STRING,\n        wa.intra :: STRING\n    ) AS _unique_key,\n    wa._INSERTED_TIMESTAMP\nFROM\n    wagmi_app wa\n    LEFT JOIN from_swaps fs\n    ON wa.tx_group_id = fs.tx_group_id\n    AND wa.intra -1 = fs.intra", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_wagmiswap_dex"}, "model.algorand_models.silver__asset": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'asset_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH prebase AS (\n\n    SELECT\n        A.index AS asset_id,\n        algorand_decode_hex_addr(\n            creator_addr :: text\n        ) AS creator_address,\n        A.params :au :: STRING AS asset_url,\n        A.params,\n        A.deleted,\n        closed_at,\n        created_at,\n        A._inserted_timestamp\n    FROM\n        {{ ref('bronze__asset') }} A\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '96 HOURS'\n{% endif %}\n),\nasset_config AS(\n    SELECT\n        asset_id,\n        asset_name,\n        asset_amount,\n        decimals\n    FROM\n        {{ ref('silver__asset_config') }}\n    WHERE\n        asset_name IS NOT NULL\n        AND asset_amount IS NOT NULL\n        AND decimals IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY asset_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase AS (\n    SELECT\n        A.asset_id,\n        creator_address,\n        asset_url,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.asset_name\n            ELSE A.params :an :: STRING\n        END asset_name,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.asset_amount\n            ELSE A.params :t :: NUMBER\n        END AS total_supply,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.decimals\n            WHEN A.params :dc IS NULL THEN 0\n            WHEN A.params :dc IS NOT NULL THEN params :dc :: NUMBER\n        END AS decimals,\n        A.deleted,\n        closed_at,\n        created_at,\n        A._inserted_timestamp\n    FROM\n        prebase A\n        LEFT JOIN asset_config ac\n        ON A.asset_id = ac.asset_id\n),\ncollect_NFTs AS(\n    SELECT\n        *\n    FROM\n        {{ source(\n            'bronze',\n            'prod_nft_metadata_uploads_1828572827'\n        ) }}\n    WHERE\n        record_metadata :key LIKE '%algo-nft-meta%'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '96 HOURS'\n{% endif %}\n),\ncollection_NFTs AS (\n    SELECT\n        VALUE :asset :: NUMBER AS nft,\n        VALUE :collection :: STRING AS collection,\n        VALUE :manager :: STRING AS manager,\n        VALUE :name :: STRING AS NAME,\n        VALUE :url :: STRING AS url,\n        _inserted_timestamp\n    FROM\n        collect_NFTs,\n        LATERAL FLATTEN(\n            input => record_content\n        ) f\n    WHERE\n        VALUE :asset :: STRING <> '' qualify(ROW_NUMBER() over(PARTITION BY nft\n    ORDER BY\n        INDEX)) = 1\n),\narc69_NFTs AS(\n    SELECT\n        asset_id AS nft,\n        MAX(\n            A._inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        {{ ref('silver__transaction') }} A\n    WHERE\n        tx_type = 'acfg'\n        AND TRY_PARSE_JSON(\n            TRY_BASE64_DECODE_STRING(\n                tx_message :txn :note :: STRING\n            )\n        ) :standard :: STRING = 'arc69'\n\n{% if is_incremental() %}\nAND A._inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '96 HOURS'\n{% endif %}\nGROUP BY\n    asset_id\n)\nSELECT\n    A.asset_id,\n    COALESCE(\n        A.asset_name,\n        coll.name,\n        fifa.name\n    ) AS asset_name,\n    A.total_supply,\n    COALESCE(\n        asset_url,\n        coll.url,\n        fifa.animation_url\n    ) AS asset_url,\n    A.decimals,\n    deleted AS asset_deleted,\n    creator_address,\n    created_at,\n    closed_at,\n    COALESCE(\n        coll.collection,\n        'FIFA' || ' - ' || fifa.drop_name\n    ) AS collection_name,\n    CASE\n        WHEN coll.nft IS NOT NULL THEN TRUE\n        WHEN fifa.asset_id IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS collection_nft,\n    CASE\n        WHEN arc69.nft IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS arc69_nft,\n    CASE\n        WHEN COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%#arc3%' THEN TRUE\n        ELSE FALSE\n    END AS ar3_nft,\n    CASE\n        WHEN COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%reserve%' THEN TRUE\n        ELSE FALSE\n    END AS ar19_nft,\n    CASE\n        WHEN A.decimals = 0\n        AND A.total_supply = 1 THEN TRUE\n        ELSE FALSE\n    END AS traditional_nft,\n    CASE\n        WHEN coll.nft IS NOT NULL\n        OR arc69.nft IS NOT NULL\n        OR COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%#arc3%'\n        OR COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%reserve%'\n        OR (\n            A.decimals = 0\n            AND A.total_supply = 1\n        ) THEN TRUE\n        ELSE FALSE\n    END AS is_nft,\n    A._inserted_timestamp\nFROM\n    base A\n    LEFT JOIN collection_NFTs coll\n    ON A.asset_id = coll.nft\n    LEFT JOIN arc69_NFTs arc69\n    ON A.asset_id = arc69.nft\n    LEFT JOIN {{ ref('silver__nft_metadata_fifa') }} A fifa\n    ON A.asset_id = fifa.asset_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827", "model.algorand_models.bronze__asset", "model.algorand_models.silver__asset_config", "model.algorand_models.silver__transaction", "model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "asset_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__asset"], "unique_id": "model.algorand_models.silver__asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__asset.sql", "original_file_path": "models/silver/silver__asset.sql", "name": "silver__asset", "alias": "asset", "checksum": {"name": "sha256", "checksum": "1991bb0e973fc7927e48049b97f1ee39bb0327f308660dd45f2badafbd653bd4"}, "tags": [], "refs": [["bronze__asset"], ["silver__asset_config"], ["silver__transaction"], ["silver__nft_metadata_fifa"]], "sources": [["bronze", "prod_nft_metadata_uploads_1828572827"]], "metrics": [], "description": "", "columns": {"ASSET_ID": {"name": "ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "Name associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "Total supply of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_URL": {"name": "ASSET_URL", "description": "The url to the asset website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DELETED": {"name": "ASSET_DELETED", "description": "whether or not the asset is currently deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "Address of the asset creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which asset was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Whether or not the asset is currently deleted from the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NAME": {"name": "COLLECTION_NAME", "description": "Name of the NFT collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NFT": {"name": "COLLECTION_NFT", "description": "TRUE/FALSE indicating if the NFT is part of a collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARC69_NFT": {"name": "ARC69_NFT", "description": "TRUE/FALSE indicating if the NFT follows the ARC69 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AR3_NFT": {"name": "AR3_NFT", "description": "TRUE/FALSE indicating if the NFT follows the AR3 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AR19_NFT": {"name": "AR19_NFT", "description": "TRUE/FALSE indicating if the NFT follows the AR19 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRADITIONAL_NFT": {"name": "TRADITIONAL_NFT", "description": "TRUE/FALSE indicating if the asset total supply is 1 and the number of decimals is 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IS_NFT": {"name": "IS_NFT", "description": "TRUE/FALSE indicating if this asset is an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__asset.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "asset_id", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.894998, "compiled_sql": "\n\nWITH prebase AS (\n\n    SELECT\n        A.index AS asset_id,\n        algorand_decode_hex_addr(\n            creator_addr :: text\n        ) AS creator_address,\n        A.params :au :: STRING AS asset_url,\n        A.params,\n        A.deleted,\n        closed_at,\n        created_at,\n        A._inserted_timestamp\n    FROM\n        ALGORAND_DEV.bronze.asset A\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.asset\n    ) - INTERVAL '96 HOURS'\n\n),\nasset_config AS(\n    SELECT\n        asset_id,\n        asset_name,\n        asset_amount,\n        decimals\n    FROM\n        ALGORAND_DEV.silver.asset_config\n    WHERE\n        asset_name IS NOT NULL\n        AND asset_amount IS NOT NULL\n        AND decimals IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY asset_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase AS (\n    SELECT\n        A.asset_id,\n        creator_address,\n        asset_url,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.asset_name\n            ELSE A.params :an :: STRING\n        END asset_name,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.asset_amount\n            ELSE A.params :t :: NUMBER\n        END AS total_supply,\n        CASE\n            WHEN A.deleted = 'TRUE'\n            AND ac.asset_id IS NOT NULL THEN ac.decimals\n            WHEN A.params :dc IS NULL THEN 0\n            WHEN A.params :dc IS NOT NULL THEN params :dc :: NUMBER\n        END AS decimals,\n        A.deleted,\n        closed_at,\n        created_at,\n        A._inserted_timestamp\n    FROM\n        prebase A\n        LEFT JOIN asset_config ac\n        ON A.asset_id = ac.asset_id\n),\ncollect_NFTs AS(\n    SELECT\n        *\n    FROM\n        flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827\n    WHERE\n        record_metadata :key LIKE '%algo-nft-meta%'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        ALGORAND_DEV.silver.asset\n) - INTERVAL '96 HOURS'\n\n),\ncollection_NFTs AS (\n    SELECT\n        VALUE :asset :: NUMBER AS nft,\n        VALUE :collection :: STRING AS collection,\n        VALUE :manager :: STRING AS manager,\n        VALUE :name :: STRING AS NAME,\n        VALUE :url :: STRING AS url,\n        _inserted_timestamp\n    FROM\n        collect_NFTs,\n        LATERAL FLATTEN(\n            input => record_content\n        ) f\n    WHERE\n        VALUE :asset :: STRING <> '' qualify(ROW_NUMBER() over(PARTITION BY nft\n    ORDER BY\n        INDEX)) = 1\n),\narc69_NFTs AS(\n    SELECT\n        asset_id AS nft,\n        MAX(\n            A._inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction A\n    WHERE\n        tx_type = 'acfg'\n        AND TRY_PARSE_JSON(\n            TRY_BASE64_DECODE_STRING(\n                tx_message :txn :note :: STRING\n            )\n        ) :standard :: STRING = 'arc69'\n\n\nAND A._inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        ALGORAND_DEV.silver.asset\n) - INTERVAL '96 HOURS'\n\nGROUP BY\n    asset_id\n)\nSELECT\n    A.asset_id,\n    COALESCE(\n        A.asset_name,\n        coll.name,\n        fifa.name\n    ) AS asset_name,\n    A.total_supply,\n    COALESCE(\n        asset_url,\n        coll.url,\n        fifa.animation_url\n    ) AS asset_url,\n    A.decimals,\n    deleted AS asset_deleted,\n    creator_address,\n    created_at,\n    closed_at,\n    COALESCE(\n        coll.collection,\n        'FIFA' || ' - ' || fifa.drop_name\n    ) AS collection_name,\n    CASE\n        WHEN coll.nft IS NOT NULL THEN TRUE\n        WHEN fifa.asset_id IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS collection_nft,\n    CASE\n        WHEN arc69.nft IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS arc69_nft,\n    CASE\n        WHEN COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%#arc3%' THEN TRUE\n        ELSE FALSE\n    END AS ar3_nft,\n    CASE\n        WHEN COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%reserve%' THEN TRUE\n        ELSE FALSE\n    END AS ar19_nft,\n    CASE\n        WHEN A.decimals = 0\n        AND A.total_supply = 1 THEN TRUE\n        ELSE FALSE\n    END AS traditional_nft,\n    CASE\n        WHEN coll.nft IS NOT NULL\n        OR arc69.nft IS NOT NULL\n        OR COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%#arc3%'\n        OR COALESCE(\n            asset_url,\n            coll.url\n        ) LIKE '%reserve%'\n        OR (\n            A.decimals = 0\n            AND A.total_supply = 1\n        ) THEN TRUE\n        ELSE FALSE\n    END AS is_nft,\n    A._inserted_timestamp\nFROM\n    base A\n    LEFT JOIN collection_NFTs coll\n    ON A.asset_id = coll.nft\n    LEFT JOIN arc69_NFTs arc69\n    ON A.asset_id = arc69.nft\n    LEFT JOIN ALGORAND_DEV.silver.nft_metadata_fifa A fifa\n    ON A.asset_id = fifa.asset_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.asset"}, "model.algorand_models.silver__pool_addresses": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'address',\n    incremental_strategy = 'merge'\n) }}\n\nWITH swaps AS(\n\n    SELECT\n        swap_program,\n        swap_from_asset_id,\n        pool_address,\n        swap_to_asset_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__swap') }}\n\n{% if is_incremental() %}\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '4 HOURS'\n{% endif %}\n),\npool_names AS(\n    SELECT\n        swap_program,\n        pool_address,\n        CASE\n            WHEN A.asset_id = 0 THEN 'ALGO'\n            ELSE A.asset_name\n        END AS swap_from_asset_name,\n        s.swap_from_asset_id,\n        CASE\n            WHEN b.asset_id = 0 THEN 'ALGO'\n            ELSE b.asset_name\n        END AS swap_to_asset_name,\n        s.swap_to_asset_id,\n        s._INSERTED_TIMESTAMP\n    FROM\n        swaps s\n        JOIN {{ ref('silver__asset') }} A\n        ON s.swap_from_asset_id = A.asset_id\n        JOIN {{ ref('silver__asset') }}\n        b\n        ON s.swap_to_asset_id = b.asset_id qualify ROW_NUMBER() over (\n            PARTITION BY pool_address\n            ORDER BY\n                A.created_at DESC,\n                b.created_at DESC\n        ) = 1\n)\nSELECT\n    'algorand' AS blockchain,\n    'flipside' AS creator,\n    pool_address AS address,\n    'dex' AS label_type,\n    'pool' AS label_subtype,\n    swap_program AS label,\n    swap_program || ': ' || COALESCE(\n        swap_from_asset_name,\n        swap_from_asset_id :: STRING\n    ) || '-' || COALESCE(\n        swap_to_asset_name,\n        swap_to_asset_id :: STRING\n    ) || ' pool' AS address_name,\n    _INSERTED_TIMESTAMP\nFROM\n    pool_names", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__swap", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__pool_addresses"], "unique_id": "model.algorand_models.silver__pool_addresses", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__pool_addresses.sql", "original_file_path": "models/silver/silver__pool_addresses.sql", "name": "silver__pool_addresses", "alias": "pool_addresses", "checksum": {"name": "sha256", "checksum": "f3bdf342d728c33b183e9e030ab7ec3bc93f067c7e1812adb700e644d0bd91b7"}, "tags": [], "refs": [["silver__swap"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__pool_addresses.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge"}, "created_at": 1667512711.8780851, "compiled_sql": "\n\nWITH swaps AS(\n\n    SELECT\n        swap_program,\n        swap_from_asset_id,\n        pool_address,\n        swap_to_asset_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.swap\n\n\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            ALGORAND_DEV.silver.pool_addresses\n    ) - INTERVAL '4 HOURS'\n\n),\npool_names AS(\n    SELECT\n        swap_program,\n        pool_address,\n        CASE\n            WHEN A.asset_id = 0 THEN 'ALGO'\n            ELSE A.asset_name\n        END AS swap_from_asset_name,\n        s.swap_from_asset_id,\n        CASE\n            WHEN b.asset_id = 0 THEN 'ALGO'\n            ELSE b.asset_name\n        END AS swap_to_asset_name,\n        s.swap_to_asset_id,\n        s._INSERTED_TIMESTAMP\n    FROM\n        swaps s\n        JOIN ALGORAND_DEV.silver.asset A\n        ON s.swap_from_asset_id = A.asset_id\n        JOIN ALGORAND_DEV.silver.asset\n        b\n        ON s.swap_to_asset_id = b.asset_id qualify ROW_NUMBER() over (\n            PARTITION BY pool_address\n            ORDER BY\n                A.created_at DESC,\n                b.created_at DESC\n        ) = 1\n)\nSELECT\n    'algorand' AS blockchain,\n    'flipside' AS creator,\n    pool_address AS address,\n    'dex' AS label_type,\n    'pool' AS label_subtype,\n    swap_program AS label,\n    swap_program || ': ' || COALESCE(\n        swap_from_asset_name,\n        swap_from_asset_id :: STRING\n    ) || '-' || COALESCE(\n        swap_to_asset_name,\n        swap_to_asset_id :: STRING\n    ) || ' pool' AS address_name,\n    _INSERTED_TIMESTAMP\nFROM\n    pool_names", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.pool_addresses"}, "model.algorand_models.silver__swaps_algofi_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH algofi_app_ids AS (\n\n    SELECT\n        DISTINCT tx_message :txn :apid :: NUMBER AS app_id\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        (\n            inner_tx = 'FALSE'\n            AND tx_message :dt :itx [2] :txn :type :: STRING = 'acfg'\n            AND tx_message :dt :itx [2] :txn :apar :an :: STRING LIKE 'AF-POOL-%'\n            AND tx_message :dt :itx [2] :txn :apar :au :: STRING = 'https://algofi.org'\n        )\n        OR (\n            inner_tx = 'FALSE'\n            AND tx_message :dt :itx [1] :txn :type :: STRING = 'acfg'\n            AND tx_message :dt :itx [1] :txn :apar :an :: STRING LIKE 'AF-POOL-%'\n            AND tx_message :dt :itx [1] :txn :apar :au :: STRING = 'https://algofi.org'\n        )\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'appl'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        {{ ref('silver__transaction') }}\n        pt\n        JOIN {{ ref('silver__asset') }} A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\nalgofi_app AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        act.sender AS sender,\n        act.sender AS swapper,\n        act.app_id,\n        act.fee,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN act.tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS swap_to_asset_id,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN act.tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN {{ ref('silver__asset') }}\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                algofi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            act.tx_message :txn :apaa [0] :: STRING\n        ) = 'sfe'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swapssfe AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        pt.amount / pow(\n            10,\n            6\n        ) - ZEROIFNULL(\n            ref.tx_message :dt :itx [0] :txn :amt / pow(\n                10,\n                6\n            ) :: FLOAT\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        algofi_app pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n        JOIN tx_app_call ref\n        ON pa.tx_group_id = ref.tx_group_id\n        AND pa.intra + 2 = ref.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n        AND ref.inner_tx = 'FALSE'\n        AND TRY_BASE64_DECODE_STRING(\n            ref.tx_message :txn :apaa [0] :: STRING\n        ) <> 'sfe'\n),\nfrom_axfer_swapssfe AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        pt.asset_name AS from_asset_name,\n        CASE\n            WHEN pt.decimals > 0 THEN pt.asset_amount / pow(\n                10,\n                pt.decimals\n            ) - ZEROIFNULL(\n                ref.tx_message :dt :itx [0] :txn :aamt / pow(\n                    10,\n                    pt.decimals\n                )\n            )\n            WHEN pt.decimals = 0 THEN pt.asset_amount - ZEROIFNULL(\n                ref.tx_message :dt :itx [0] :txn :aamt\n            )\n        END :: FLOAT AS swap_from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        algofi_app pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.sender = pt.sender\n        LEFT JOIN tx_app_call ref\n        ON pa.tx_group_id = ref.tx_group_id\n        AND pa.intra + 2 = ref.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n        AND ref.inner_tx = 'FALSE'\n        AND TRY_BASE64_DECODE_STRING(\n            ref.tx_message :txn :apaa [0] :: STRING\n        ) <> 'sfe'\n),\nfrom_swapssfe AS(\n    SELECT\n        *\n    FROM\n        from_pay_swapssfe\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swapssfe\n),\nallsfe AS(\n    SELECT\n        'sfe' AS TYPE,\n        pa.block_id,\n        pa.intra,\n        pa.tx_group_id,\n        pa._INSERTED_TIMESTAMP,\n        pa.swapper,\n        app_id,\n        fee,\n        to_asset_name,\n        swap_to_asset_id,\n        pool_address,\n        swap_to_amount,\n        from_asset_name,\n        from_asset_id,\n        swap_from_amount\n    FROM\n        algofi_app pa\n        LEFT JOIN from_swapssfe fs\n        ON pa.tx_group_id = fs.tx_group_id\n        AND pa.intra -1 = fs.intra\n),\nalgofi_appsef AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        act.sender AS swapper,\n        act.app_id,\n        act.fee,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN act.tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS swap_to_asset_id,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN act.tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN {{ ref('silver__asset') }}\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                algofi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            act.tx_message :txn :apaa [0] :: STRING\n        ) = 'sef'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swapssef AS(\n    SELECT\n        pt.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        algofi_appsef pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swapssef AS(\n    SELECT\n        pt.tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        pt.asset_name AS from_asset_name,\n        CASE\n            WHEN pt.decimals > 0 THEN pt.asset_amount / pow(\n                10,\n                pt.decimals\n            )\n            ELSE pt.asset_amount\n        END :: FLOAT AS swap_from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        algofi_appsef pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swapssef AS(\n    SELECT\n        tx_group_id,\n        intra,\n        swapper,\n        from_asset_name,\n        swap_from_amount,\n        from_asset_id\n    FROM\n        from_pay_swapssef\n    UNION\n    SELECT\n        tx_group_id,\n        intra,\n        swapper,\n        from_asset_name,\n        swap_from_amount,\n        from_asset_id\n    FROM\n        from_axfer_swapssef\n),\nallsef AS(\n    SELECT\n        'sef' AS TYPE,\n        pa.block_id,\n        pa.intra,\n        pa.tx_group_id,\n        pa._INSERTED_TIMESTAMP,\n        pa.swapper,\n        app_id,\n        fee,\n        pool_address,\n        to_asset_name,\n        swap_to_asset_id,\n        swap_to_amount,\n        from_asset_name,\n        from_asset_id,\n        swap_from_amount\n    FROM\n        algofi_appsef pa\n        JOIN from_swapssef fs\n        ON pa.tx_group_id = fs.tx_group_id\n        AND pa.intra -1 = fs.intra\n)\nSELECT\n    DISTINCT block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    from_asset_id AS swap_from_asset_id,\n    swap_from_amount :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        intra :: STRING\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    allsef\nUNION\nSELECT\n    DISTINCT block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    from_asset_id AS swap_from_asset_id,\n    swap_from_amount :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        intra :: STRING\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    allsfe", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_algofi_dex"], "unique_id": "model.algorand_models.silver__swaps_algofi_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_algofi_dex.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.sql", "name": "silver__swaps_algofi_dex", "alias": "swaps_algofi_dex", "checksum": {"name": "sha256", "checksum": "e61efe51520a524dd0e2f6c648a3e8d253917acecb86db960969e6b96278ac36"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_algofi_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.863251, "compiled_sql": "\n\nWITH algofi_app_ids AS (\n\n    SELECT\n        DISTINCT tx_message :txn :apid :: NUMBER AS app_id\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        (\n            inner_tx = 'FALSE'\n            AND tx_message :dt :itx [2] :txn :type :: STRING = 'acfg'\n            AND tx_message :dt :itx [2] :txn :apar :an :: STRING LIKE 'AF-POOL-%'\n            AND tx_message :dt :itx [2] :txn :apar :au :: STRING = 'https://algofi.org'\n        )\n        OR (\n            inner_tx = 'FALSE'\n            AND tx_message :dt :itx [1] :txn :type :: STRING = 'acfg'\n            AND tx_message :dt :itx [1] :txn :apar :an :: STRING LIKE 'AF-POOL-%'\n            AND tx_message :dt :itx [1] :txn :apar :au :: STRING = 'https://algofi.org'\n        )\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'appl'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_algofi_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_algofi_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        ALGORAND_DEV.silver.transaction\n        pt\n        JOIN ALGORAND_DEV.silver.asset A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_algofi_dex\n) - INTERVAL '48 HOURS'\n\n),\nalgofi_app AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        act.sender AS sender,\n        act.sender AS swapper,\n        act.app_id,\n        act.fee,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN act.tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS swap_to_asset_id,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN act.tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                algofi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            act.tx_message :txn :apaa [0] :: STRING\n        ) = 'sfe'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swapssfe AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        pt.amount / pow(\n            10,\n            6\n        ) - ZEROIFNULL(\n            ref.tx_message :dt :itx [0] :txn :amt / pow(\n                10,\n                6\n            ) :: FLOAT\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        algofi_app pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n        JOIN tx_app_call ref\n        ON pa.tx_group_id = ref.tx_group_id\n        AND pa.intra + 2 = ref.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n        AND ref.inner_tx = 'FALSE'\n        AND TRY_BASE64_DECODE_STRING(\n            ref.tx_message :txn :apaa [0] :: STRING\n        ) <> 'sfe'\n),\nfrom_axfer_swapssfe AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        pt.asset_name AS from_asset_name,\n        CASE\n            WHEN pt.decimals > 0 THEN pt.asset_amount / pow(\n                10,\n                pt.decimals\n            ) - ZEROIFNULL(\n                ref.tx_message :dt :itx [0] :txn :aamt / pow(\n                    10,\n                    pt.decimals\n                )\n            )\n            WHEN pt.decimals = 0 THEN pt.asset_amount - ZEROIFNULL(\n                ref.tx_message :dt :itx [0] :txn :aamt\n            )\n        END :: FLOAT AS swap_from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        algofi_app pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.sender = pt.sender\n        LEFT JOIN tx_app_call ref\n        ON pa.tx_group_id = ref.tx_group_id\n        AND pa.intra + 2 = ref.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n        AND ref.inner_tx = 'FALSE'\n        AND TRY_BASE64_DECODE_STRING(\n            ref.tx_message :txn :apaa [0] :: STRING\n        ) <> 'sfe'\n),\nfrom_swapssfe AS(\n    SELECT\n        *\n    FROM\n        from_pay_swapssfe\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swapssfe\n),\nallsfe AS(\n    SELECT\n        'sfe' AS TYPE,\n        pa.block_id,\n        pa.intra,\n        pa.tx_group_id,\n        pa._INSERTED_TIMESTAMP,\n        pa.swapper,\n        app_id,\n        fee,\n        to_asset_name,\n        swap_to_asset_id,\n        pool_address,\n        swap_to_amount,\n        from_asset_name,\n        from_asset_id,\n        swap_from_amount\n    FROM\n        algofi_app pa\n        LEFT JOIN from_swapssfe fs\n        ON pa.tx_group_id = fs.tx_group_id\n        AND pa.intra -1 = fs.intra\n),\nalgofi_appsef AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        act.sender AS swapper,\n        act.app_id,\n        act.fee,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asset_name\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN act.tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS swap_to_asset_id,\n        CASE\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals > 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                decimals\n            )\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND decimals = 0 THEN act.tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN act.tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN act.tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        app_id IN (\n            SELECT\n                app_id\n            FROM\n                algofi_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            act.tx_message :txn :apaa [0] :: STRING\n        ) = 'sef'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swapssef AS(\n    SELECT\n        pt.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        algofi_appsef pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swapssef AS(\n    SELECT\n        pt.tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        pt.asset_name AS from_asset_name,\n        CASE\n            WHEN pt.decimals > 0 THEN pt.asset_amount / pow(\n                10,\n                pt.decimals\n            )\n            ELSE pt.asset_amount\n        END :: FLOAT AS swap_from_amount,\n        pt.asset_id AS from_asset_id\n    FROM\n        algofi_appsef pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swapssef AS(\n    SELECT\n        tx_group_id,\n        intra,\n        swapper,\n        from_asset_name,\n        swap_from_amount,\n        from_asset_id\n    FROM\n        from_pay_swapssef\n    UNION\n    SELECT\n        tx_group_id,\n        intra,\n        swapper,\n        from_asset_name,\n        swap_from_amount,\n        from_asset_id\n    FROM\n        from_axfer_swapssef\n),\nallsef AS(\n    SELECT\n        'sef' AS TYPE,\n        pa.block_id,\n        pa.intra,\n        pa.tx_group_id,\n        pa._INSERTED_TIMESTAMP,\n        pa.swapper,\n        app_id,\n        fee,\n        pool_address,\n        to_asset_name,\n        swap_to_asset_id,\n        swap_to_amount,\n        from_asset_name,\n        from_asset_id,\n        swap_from_amount\n    FROM\n        algofi_appsef pa\n        JOIN from_swapssef fs\n        ON pa.tx_group_id = fs.tx_group_id\n        AND pa.intra -1 = fs.intra\n)\nSELECT\n    DISTINCT block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    from_asset_id AS swap_from_asset_id,\n    swap_from_amount :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        intra :: STRING\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    allsef\nUNION\nSELECT\n    DISTINCT block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    from_asset_id AS swap_from_asset_id,\n    swap_from_amount :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        intra :: STRING\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    allsfe", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_algofi_dex"}, "model.algorand_models.silver__nft_sales_nftdomains": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH asset_ids AS (\n\n    SELECT\n        asset_id,\n        tx_group_id,\n        sender AS bridge_account\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'acfg'\n        AND asset_parameters :un :: STRING = 'NFD'\n        AND asset_id <> '813293109'\n        AND block_id >= 21344034\n),\nnfdadmin_minted AS (\n    SELECT\n        A.tx_group_id,\n        b.asset_id,\n        block_id,\n        sender AS purchaser,\n        A._inserted_timestamp,\n        COUNT(1) xcount\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN asset_ids b\n        ON A.tx_group_id = b.tx_group_id\n    WHERE\n        A.tx_type = 'pay'\n        AND A.block_id >= 21344034\n        AND A.sender = 'ABHE544MXL2CWMIZONAIUBNVELWYMKYKWBDNRLOEFQJN3LNF2ZWSMDEKBQ'\n    GROUP BY\n        A.tx_group_id,\n        b.asset_id,\n        block_id,\n        A.sender,\n        A._inserted_timestamp\n    HAVING\n        COUNT(1) = 4\n),\nminted_nfts AS (\n    SELECT\n        A.block_id,\n        A.tx_group_id,\n        A.sender AS purchaser,\n        b.asset_id,\n        A._inserted_timestamp,\n        SUM(\n            C.amount\n        ) amount\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN asset_ids b\n        ON A.tx_group_id = b.tx_group_id\n        JOIN {{ ref('silver__transaction') }} C\n        ON A.tx_group_id = C.tx_group_id\n        AND A.sender = C.sender\n    WHERE\n        A.block_id >= 21344034\n        AND A.tx_type = 'pay'\n        AND C.block_id >= 21344034\n        AND C.tx_type = 'pay'\n        AND A.receiver = 'ABHE544MXL2CWMIZONAIUBNVELWYMKYKWBDNRLOEFQJN3LNF2ZWSMDEKBQ'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\nAND C._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    A.block_id,\n    A.tx_group_id,\n    A.sender,\n    b.asset_id,\n    A._inserted_timestamp\n),\nall_mint_claims AS (\n    SELECT\n        A.tx_group_id,\n        A.asset_id,\n        A.block_id,\n        A.asset_receiver AS purchaser,\n        A._inserted_timestamp\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n        AND A.asset_sender = b.bridge_account\n    WHERE\n        A.tx_type = 'axfer'\n        AND A.block_id >= 21344034\n        AND A.asset_amount > 0\n),\nxfers_base AS (\n    SELECT\n        A.tx_group_id,\n        A.block_id,\n        tx_id,\n        asset_sender AS seller,\n        asset_receiver AS purchaser,\n        A.asset_id,\n        A._inserted_timestamp\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n    WHERE\n        A.tx_type = 'axfer'\n        AND A.block_id >= 21344034\n        AND asset_amount > 0\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nxfers AS (\n    SELECT\n        A.tx_group_id,\n        A.block_id,\n        A.tx_id,\n        A.seller,\n        A.purchaser,\n        A.asset_id,\n        A._inserted_timestamp\n    FROM\n        xfers_base A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN all_mint_claims C\n        ON A.tx_group_id = C.tx_group_id\n    WHERE\n        C.tx_group_id IS NULL\n),\nxfers_pay AS (\n    SELECT\n        A.tx_group_id,\n        SUM(amount) amount\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN xfers_base b\n        ON A.tx_group_id = b.tx_group_id\n    WHERE\n        A.tx_type = 'pay'\n        AND A.block_id >= 21344034\n        AND (\n            A.sender = b.purchaser\n            OR A.sender = b.seller\n        )\n        AND NOT (\n            A.sender = b.seller\n            AND A.receiver = b.purchaser\n        )\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    A.tx_group_id\n),\nFINAL AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        purchaser,\n        asset_id AS nft_asset_id,\n        1 AS number_of_nfts,\n        CASE\n            WHEN b.tx_group_id = 'wHGynFHbMjJtK0Pus7V91bSaORPg+ZvGkzSrBqbbA2g=' THEN 1408\n            ELSE amount\n        END AS total_sales_amount,\n        'secondary and transfers' TYPE,\n        A._inserted_timestamp\n    FROM\n        xfers A\n        JOIN xfers_pay b\n        ON A.tx_group_id = b.tx_group_id\n    UNION ALL\n    SELECT\n        block_id,\n        tx_group_id,\n        purchaser,\n        asset_id,\n        1,\n        amount,\n        'primary' TYPE,\n        _inserted_timestamp\n    FROM\n        minted_nfts\n    UNION ALL\n    SELECT\n        b.block_id,\n        b.tx_group_id,\n        b.purchaser,\n        A.asset_id,\n        1,\n        amount,\n        'curated' TYPE,\n        b._inserted_timestamp\n    FROM\n        nfdadmin_minted A\n        JOIN all_mint_claims b\n        ON A.asset_id = b.asset_id\n        JOIN xfers_pay C\n        ON b.tx_group_id = C.tx_group_id\n    WHERE\n        b.tx_group_id <> 'wHGynFHbMjJtK0Pus7V91bSaORPg+ZvGkzSrBqbbA2g='\n)\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    number_of_nfts,\n    total_sales_amount :: DECIMAL / pow(\n        10,\n        6\n    ) total_sales_amount,\n    TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_nftdomains"], "unique_id": "model.algorand_models.silver__nft_sales_nftdomains", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_nftdomains.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.sql", "name": "silver__nft_sales_nftdomains", "alias": "nft_sales_nftdomains", "checksum": {"name": "sha256", "checksum": "fb65a330fe5f941411430205d4a380202073ca267b66816ed451681b43339ddb"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_nftdomains.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.9202619, "compiled_sql": "\n\nWITH asset_ids AS (\n\n    SELECT\n        asset_id,\n        tx_group_id,\n        sender AS bridge_account\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'acfg'\n        AND asset_parameters :un :: STRING = 'NFD'\n        AND asset_id <> '813293109'\n        AND block_id >= 21344034\n),\nnfdadmin_minted AS (\n    SELECT\n        A.tx_group_id,\n        b.asset_id,\n        block_id,\n        sender AS purchaser,\n        A._inserted_timestamp,\n        COUNT(1) xcount\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN asset_ids b\n        ON A.tx_group_id = b.tx_group_id\n    WHERE\n        A.tx_type = 'pay'\n        AND A.block_id >= 21344034\n        AND A.sender = 'ABHE544MXL2CWMIZONAIUBNVELWYMKYKWBDNRLOEFQJN3LNF2ZWSMDEKBQ'\n    GROUP BY\n        A.tx_group_id,\n        b.asset_id,\n        block_id,\n        A.sender,\n        A._inserted_timestamp\n    HAVING\n        COUNT(1) = 4\n),\nminted_nfts AS (\n    SELECT\n        A.block_id,\n        A.tx_group_id,\n        A.sender AS purchaser,\n        b.asset_id,\n        A._inserted_timestamp,\n        SUM(\n            C.amount\n        ) amount\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN asset_ids b\n        ON A.tx_group_id = b.tx_group_id\n        JOIN ALGORAND_DEV.silver.transaction C\n        ON A.tx_group_id = C.tx_group_id\n        AND A.sender = C.sender\n    WHERE\n        A.block_id >= 21344034\n        AND A.tx_type = 'pay'\n        AND C.block_id >= 21344034\n        AND C.tx_type = 'pay'\n        AND A.receiver = 'ABHE544MXL2CWMIZONAIUBNVELWYMKYKWBDNRLOEFQJN3LNF2ZWSMDEKBQ'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_nftdomains\n) - INTERVAL '4 HOURS'\nAND C._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_nftdomains\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    A.block_id,\n    A.tx_group_id,\n    A.sender,\n    b.asset_id,\n    A._inserted_timestamp\n),\nall_mint_claims AS (\n    SELECT\n        A.tx_group_id,\n        A.asset_id,\n        A.block_id,\n        A.asset_receiver AS purchaser,\n        A._inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n        AND A.asset_sender = b.bridge_account\n    WHERE\n        A.tx_type = 'axfer'\n        AND A.block_id >= 21344034\n        AND A.asset_amount > 0\n),\nxfers_base AS (\n    SELECT\n        A.tx_group_id,\n        A.block_id,\n        tx_id,\n        asset_sender AS seller,\n        asset_receiver AS purchaser,\n        A.asset_id,\n        A._inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n    WHERE\n        A.tx_type = 'axfer'\n        AND A.block_id >= 21344034\n        AND asset_amount > 0\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_nftdomains\n) - INTERVAL '4 HOURS'\n\n),\nxfers AS (\n    SELECT\n        A.tx_group_id,\n        A.block_id,\n        A.tx_id,\n        A.seller,\n        A.purchaser,\n        A.asset_id,\n        A._inserted_timestamp\n    FROM\n        xfers_base A\n        JOIN asset_ids b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN all_mint_claims C\n        ON A.tx_group_id = C.tx_group_id\n    WHERE\n        C.tx_group_id IS NULL\n),\nxfers_pay AS (\n    SELECT\n        A.tx_group_id,\n        SUM(amount) amount\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN xfers_base b\n        ON A.tx_group_id = b.tx_group_id\n    WHERE\n        A.tx_type = 'pay'\n        AND A.block_id >= 21344034\n        AND (\n            A.sender = b.purchaser\n            OR A.sender = b.seller\n        )\n        AND NOT (\n            A.sender = b.seller\n            AND A.receiver = b.purchaser\n        )\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_nftdomains\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    A.tx_group_id\n),\nFINAL AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        purchaser,\n        asset_id AS nft_asset_id,\n        1 AS number_of_nfts,\n        CASE\n            WHEN b.tx_group_id = 'wHGynFHbMjJtK0Pus7V91bSaORPg+ZvGkzSrBqbbA2g=' THEN 1408\n            ELSE amount\n        END AS total_sales_amount,\n        'secondary and transfers' TYPE,\n        A._inserted_timestamp\n    FROM\n        xfers A\n        JOIN xfers_pay b\n        ON A.tx_group_id = b.tx_group_id\n    UNION ALL\n    SELECT\n        block_id,\n        tx_group_id,\n        purchaser,\n        asset_id,\n        1,\n        amount,\n        'primary' TYPE,\n        _inserted_timestamp\n    FROM\n        minted_nfts\n    UNION ALL\n    SELECT\n        b.block_id,\n        b.tx_group_id,\n        b.purchaser,\n        A.asset_id,\n        1,\n        amount,\n        'curated' TYPE,\n        b._inserted_timestamp\n    FROM\n        nfdadmin_minted A\n        JOIN all_mint_claims b\n        ON A.asset_id = b.asset_id\n        JOIN xfers_pay C\n        ON b.tx_group_id = C.tx_group_id\n    WHERE\n        b.tx_group_id <> 'wHGynFHbMjJtK0Pus7V91bSaORPg+ZvGkzSrBqbbA2g='\n)\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    number_of_nfts,\n    total_sales_amount :: DECIMAL / pow(\n        10,\n        6\n    ) total_sales_amount,\n    TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_nftdomains"}, "model.algorand_models.silver__transaction_participation": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['_INSERTED_TIMESTAMP::DATE']\n) }}\n\nWITH base AS(\n\n  SELECT\n    ROUND AS block_id,\n    intra,\n    addr :: text AS address_raw,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    {{ source(\n      'algorand',\n      'TXN_PARTICIPATION'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n  _INSERTED_TIMESTAMP >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}\n)\nSELECT\n  A.block_id,\n  A.intra,\n  b.address,\n  A._inserted_timestamp,\n  concat_ws(\n    '-',\n    block_id,\n    intra,\n    address\n  ) AS _unique_key\nFROM\n  base A\n  JOIN {{ ref('silver__account') }}\n  b\n  ON A.address_raw = b.address_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.algorand.TXN_PARTICIPATION", "model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_INSERTED_TIMESTAMP::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__transaction_participation"], "unique_id": "model.algorand_models.silver__transaction_participation", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__transaction_participation.sql", "original_file_path": "models/silver/silver__transaction_participation.sql", "name": "silver__transaction_participation", "alias": "transaction_participation", "checksum": {"name": "sha256", "checksum": "e0eb5c82dda0541ff162db0f811c39804c84e9677455a132b8cc7097f3ebde1c"}, "tags": [], "refs": [["silver__account"]], "sources": [["algorand", "TXN_PARTICIPATION"]], "metrics": [], "description": "", "columns": {"intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__transaction_participation.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_participation.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_INSERTED_TIMESTAMP::DATE"]}, "created_at": 1667512711.914288, "compiled_sql": "\n\nWITH base AS(\n\n  SELECT\n    ROUND AS block_id,\n    intra,\n    addr :: text AS address_raw,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.TXN_PARTICIPATION\n\n\nWHERE\n  _INSERTED_TIMESTAMP >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      ALGORAND_DEV.silver.transaction_participation\n  ) - INTERVAL '4 HOURS'\n\n)\nSELECT\n  A.block_id,\n  A.intra,\n  b.address,\n  A._inserted_timestamp,\n  concat_ws(\n    '-',\n    block_id,\n    intra,\n    address\n  ) AS _unique_key\nFROM\n  base A\n  JOIN ALGORAND_DEV.silver.account\n  b\n  ON A.address_raw = b.address_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.transaction_participation"}, "model.algorand_models.silver__hourly_pool_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['date']\n) }}\n\nWITH address_ranges AS (\n\n    SELECT\n        DISTINCT A.address,\n        b.block_date AS min_block_date,\n        CURRENT_TIMESTAMP :: DATE AS max_block_date\n    FROM\n        {{ ref('silver__account') }} A\n        JOIN {{ ref('silver__block') }}\n        b\n        ON A.created_at = b.block_id\n        JOIN {{ ref('silver__pool_addresses') }} C\n        ON A.address = C.address\n    WHERE\n        b.block_date :: DATE >= '2022-01-15'\n),\ncte_my_date AS (\n    SELECT\n        HOUR DATE\n    FROM\n        {{ source(\n            'shared',\n            'hours'\n        ) }}\n    WHERE\n        HOUR :: DATE <= CURRENT_DATE :: DATE\n        AND HOUR :: DATE >= '2022-01-15'\n\n{% if is_incremental() %}\nAND HOUR >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nall_dates AS (\n    SELECT\n        C.date,\n        A.address\n    FROM\n        cte_my_date C\n        JOIN address_ranges A\n        ON C.date BETWEEN A.min_block_date\n        AND A.max_block_date\n),\ntxns AS (\n    SELECT\n        A.sender,\n        A.receiver,\n        amount,\n        A.block_id,\n        A.intra,\n        b.block_timestamp,\n        tx_type,\n        asset_id\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN {{ ref('silver__block') }}\n        b\n        ON A.block_id = b.block_id\n),\nsenderpay AS(\n    SELECT\n        A.sender AS address,\n        ((A.amount * -1) -.001) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nsendersfee AS(\n    SELECT\n        A.sender AS address,\n        0.001 * -1 AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type <> 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nreceivers AS (\n    SELECT\n        A.receiver AS address,\n        A.amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.receiver = b.address\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nreward AS (\n    SELECT\n        A.account AS address,\n        A.amount / pow(\n            10,\n            6\n        ) amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        0 AS asset_id\n    FROM\n        {{ ref('silver__transaction_reward') }} A\n        JOIN address_ranges b\n        ON A.account = b.address\n        JOIN {{ ref('silver__block') }} C\n        ON A.block_id = C.block_id\n\n{% if is_incremental() %}\nWHERE\n    block_timestamp :: DATE >=(\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            {{ this }})\n        {% endif %}\n    ),\n    closes AS (\n        SELECT\n            A.account AS address,\n            CASE\n                WHEN asa.decimals > 0 THEN A.amount / pow(\n                    10,\n                    asa.decimals\n                )\n                WHEN asa.decimals = 0 THEN A.amount\n                WHEN A.asset_id = 0 THEN A.amount / pow(\n                    10,\n                    6\n                )\n            END amount,\n            A.block_id,\n            A.intra,\n            C.block_timestamp,\n            asa.asset_id\n        FROM\n            {{ ref('silver__transaction_close') }} A\n            JOIN address_ranges b\n            ON A.account = b.address\n            LEFT JOIN {{ ref('silver__asset') }}\n            asa\n            ON A.asset_id = asa.asset_id\n            JOIN {{ ref('silver__block') }} C\n            ON A.block_id = C.block_id\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nsenderasset AS(\n    SELECT\n        COALESCE(\n            A.asset_sender,\n            A.sender\n        ) AS address,\n        CASE\n            WHEN asa.decimals > 0 THEN A.asset_amount / pow(\n                10,\n                asa.decimals\n            )\n            WHEN asa.decimals = 0 THEN A.asset_amount\n            WHEN asa.asset_id = 0 THEN A.asset_amount / pow(\n                10,\n                6\n            )\n        END * -1 AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        A.asset_id\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN address_ranges b\n        ON COALESCE(\n            A.asset_sender,\n            A.sender\n        ) = b.address\n        LEFT JOIN {{ ref('silver__asset') }}\n        asa\n        ON A.asset_id = asa.asset_id\n        JOIN {{ ref('silver__block') }} C\n        ON A.block_id = C.block_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nreceiversasset AS (\n    SELECT\n        A.asset_receiver AS address,\n        CASE\n            WHEN asa.decimals > 0 THEN A.asset_amount / pow(\n                10,\n                asa.decimals\n            )\n            WHEN asa.decimals = 0 THEN A.asset_amount\n            WHEN asa.asset_id = 0 THEN A.asset_amount / pow(\n                10,\n                6\n            )\n        END AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        A.asset_id\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN address_ranges b\n        ON A.asset_receiver = b.address\n        LEFT JOIN {{ ref('silver__asset') }}\n        asa\n        ON A.asset_id = asa.asset_id\n        JOIN {{ ref('silver__block') }} C\n        ON A.block_id = C.block_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nall_actions AS(\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        senderpay\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        sendersfee\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        receivers\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        reward\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        closes\n    UNION ALL\n    SELECT\n        address,\n        0 amount,\n        1 block_id,\n        0 intra,\n        min_block_date AS block_timestamp,\n        0 asset_id\n    FROM\n        address_ranges\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        senderasset\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        receiversasset\n),\ndailysummed_balances AS(\n    SELECT\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ) AS DATE,\n        address,\n        asset_id,\n        SUM(amount) AS amount\n    FROM\n        all_actions\n    GROUP BY\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ),\n        address,\n        asset_id\n),\nasset_hours AS (\n    SELECT\n        DISTINCT A.date,\n        A.address,\n        b.asset_id\n    FROM\n        all_dates A\n        JOIN all_actions b\n        ON A.address = b.address\n),\nrollup_balances AS (\n    SELECT\n        DATE,\n        address,\n        asset_id,\n        SUM(COALESCE(amount, 0)) over (\n            PARTITION BY address,\n            asset_id\n            ORDER BY\n                DATE\n        ) AS balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address,\n                asset_id,\n                SUM(amount) amount\n            FROM\n                (\n                    SELECT\n                        ah.date,\n                        ah.address,\n                        ah.asset_id,\n                        COALESCE(\n                            amount,\n                            0\n                        ) amount\n                    FROM\n                        asset_hours ah\n                        LEFT JOIN dailysummed_balances x\n                        ON ah.date = x.date\n                        AND ah.address = x.address\n                        AND ah.asset_id = x.asset_id\n\n{% if is_incremental() %}\nUNION ALL\nSELECT\n    DATE,\n    address,\n    asset_id,\n    balance AS amount\nFROM\n    {{ this }}\nWHERE\n    DATE :: DATE < (\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            {{ this }}) qualify (ROW_NUMBER() over(PARTITION BY address, asset_id\n        ORDER BY\n            DATE DESC) = 1)\n        {% endif %}\n    ) z\nGROUP BY\n    DATE,\n    address,\n    asset_id\n) x\n),\nbalance_tmp AS (\n    SELECT\n        d.date,\n        d.address AS address,\n        asset_id,\n        b.balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address\n            FROM\n                all_dates\n            UNION\n            SELECT\n                DATE,\n                address\n            FROM\n                rollup_balances\n        ) d\n        LEFT JOIN rollup_balances b\n        ON d.date = b.date\n        AND d.address = b.address\n)\nSELECT\n    DATE,\n    address,\n    asset_id,\n    LAST_VALUE(\n        balance ignore nulls\n    ) over(\n        PARTITION BY address,\n        asset_id\n        ORDER BY\n            DATE ASC rows unbounded preceding\n    ) AS balance,\n    concat_ws(\n        '-',\n        address,\n        asset_id,\n        DATE\n    ) AS _unique_key\nFROM\n    balance_tmp\nORDER BY\n    address,\n    asset_id,\n    DATE DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.shared.hours", "model.algorand_models.silver__account", "model.algorand_models.silver__block", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__transaction", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction_reward", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction_close", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["date"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__hourly_pool_balances"], "unique_id": "model.algorand_models.silver__hourly_pool_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__hourly_pool_balances.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.sql", "name": "silver__hourly_pool_balances", "alias": "hourly_pool_balances", "checksum": {"name": "sha256", "checksum": "4f6ad6d18d9b7270e581a971079d6fbf98639bd1fe3f16fa840b33e35f3bb8d7"}, "tags": [], "refs": [["silver__account"], ["silver__block"], ["silver__pool_addresses"], ["silver__transaction"], ["silver__block"], ["silver__transaction_reward"], ["silver__block"], ["silver__transaction_close"], ["silver__asset"], ["silver__block"], ["silver__transaction"], ["silver__asset"], ["silver__block"], ["silver__transaction"], ["silver__asset"], ["silver__block"]], "sources": [["shared", "hours"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE": {"name": "DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BALANCE": {"name": "BALANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__hourly_pool_balances.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["date"]}, "created_at": 1667512711.904735, "compiled_sql": "\n\nWITH address_ranges AS (\n\n    SELECT\n        DISTINCT A.address,\n        b.block_date AS min_block_date,\n        CURRENT_TIMESTAMP :: DATE AS max_block_date\n    FROM\n        ALGORAND_DEV.silver.account A\n        JOIN ALGORAND_DEV.silver.block\n        b\n        ON A.created_at = b.block_id\n        JOIN ALGORAND_DEV.silver.pool_addresses C\n        ON A.address = C.address\n    WHERE\n        b.block_date :: DATE >= '2022-01-15'\n),\ncte_my_date AS (\n    SELECT\n        HOUR DATE\n    FROM\n        flipside_prod_db.silver.hours\n    WHERE\n        HOUR :: DATE <= CURRENT_DATE :: DATE\n        AND HOUR :: DATE >= '2022-01-15'\n\n\nAND HOUR >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nall_dates AS (\n    SELECT\n        C.date,\n        A.address\n    FROM\n        cte_my_date C\n        JOIN address_ranges A\n        ON C.date BETWEEN A.min_block_date\n        AND A.max_block_date\n),\ntxns AS (\n    SELECT\n        A.sender,\n        A.receiver,\n        amount,\n        A.block_id,\n        A.intra,\n        b.block_timestamp,\n        tx_type,\n        asset_id\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN ALGORAND_DEV.silver.block\n        b\n        ON A.block_id = b.block_id\n),\nsenderpay AS(\n    SELECT\n        A.sender AS address,\n        ((A.amount * -1) -.001) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type = 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nsendersfee AS(\n    SELECT\n        A.sender AS address,\n        0.001 * -1 AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type <> 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nreceivers AS (\n    SELECT\n        A.receiver AS address,\n        A.amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp,\n        0 AS asset_id\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.receiver = b.address\n    WHERE\n        tx_type = 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nreward AS (\n    SELECT\n        A.account AS address,\n        A.amount / pow(\n            10,\n            6\n        ) amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        0 AS asset_id\n    FROM\n        ALGORAND_DEV.silver.transaction_reward A\n        JOIN address_ranges b\n        ON A.account = b.address\n        JOIN ALGORAND_DEV.silver.block C\n        ON A.block_id = C.block_id\n\n\nWHERE\n    block_timestamp :: DATE >=(\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            ALGORAND_DEV.silver.hourly_pool_balances)\n        \n    ),\n    closes AS (\n        SELECT\n            A.account AS address,\n            CASE\n                WHEN asa.decimals > 0 THEN A.amount / pow(\n                    10,\n                    asa.decimals\n                )\n                WHEN asa.decimals = 0 THEN A.amount\n                WHEN A.asset_id = 0 THEN A.amount / pow(\n                    10,\n                    6\n                )\n            END amount,\n            A.block_id,\n            A.intra,\n            C.block_timestamp,\n            asa.asset_id\n        FROM\n            ALGORAND_DEV.silver.transaction_close A\n            JOIN address_ranges b\n            ON A.account = b.address\n            LEFT JOIN ALGORAND_DEV.silver.asset\n            asa\n            ON A.asset_id = asa.asset_id\n            JOIN ALGORAND_DEV.silver.block C\n            ON A.block_id = C.block_id\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nsenderasset AS(\n    SELECT\n        COALESCE(\n            A.asset_sender,\n            A.sender\n        ) AS address,\n        CASE\n            WHEN asa.decimals > 0 THEN A.asset_amount / pow(\n                10,\n                asa.decimals\n            )\n            WHEN asa.decimals = 0 THEN A.asset_amount\n            WHEN asa.asset_id = 0 THEN A.asset_amount / pow(\n                10,\n                6\n            )\n        END * -1 AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        A.asset_id\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN address_ranges b\n        ON COALESCE(\n            A.asset_sender,\n            A.sender\n        ) = b.address\n        LEFT JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON A.asset_id = asa.asset_id\n        JOIN ALGORAND_DEV.silver.block C\n        ON A.block_id = C.block_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nreceiversasset AS (\n    SELECT\n        A.asset_receiver AS address,\n        CASE\n            WHEN asa.decimals > 0 THEN A.asset_amount / pow(\n                10,\n                asa.decimals\n            )\n            WHEN asa.decimals = 0 THEN A.asset_amount\n            WHEN asa.asset_id = 0 THEN A.asset_amount / pow(\n                10,\n                6\n            )\n        END AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp,\n        A.asset_id\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN address_ranges b\n        ON A.asset_receiver = b.address\n        LEFT JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON A.asset_id = asa.asset_id\n        JOIN ALGORAND_DEV.silver.block C\n        ON A.block_id = C.block_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances)\n    \n),\nall_actions AS(\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        senderpay\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        sendersfee\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        receivers\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        reward\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        closes\n    UNION ALL\n    SELECT\n        address,\n        0 amount,\n        1 block_id,\n        0 intra,\n        min_block_date AS block_timestamp,\n        0 asset_id\n    FROM\n        address_ranges\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        senderasset\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp,\n        asset_id\n    FROM\n        receiversasset\n),\ndailysummed_balances AS(\n    SELECT\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ) AS DATE,\n        address,\n        asset_id,\n        SUM(amount) AS amount\n    FROM\n        all_actions\n    GROUP BY\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ),\n        address,\n        asset_id\n),\nasset_hours AS (\n    SELECT\n        DISTINCT A.date,\n        A.address,\n        b.asset_id\n    FROM\n        all_dates A\n        JOIN all_actions b\n        ON A.address = b.address\n),\nrollup_balances AS (\n    SELECT\n        DATE,\n        address,\n        asset_id,\n        SUM(COALESCE(amount, 0)) over (\n            PARTITION BY address,\n            asset_id\n            ORDER BY\n                DATE\n        ) AS balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address,\n                asset_id,\n                SUM(amount) amount\n            FROM\n                (\n                    SELECT\n                        ah.date,\n                        ah.address,\n                        ah.asset_id,\n                        COALESCE(\n                            amount,\n                            0\n                        ) amount\n                    FROM\n                        asset_hours ah\n                        LEFT JOIN dailysummed_balances x\n                        ON ah.date = x.date\n                        AND ah.address = x.address\n                        AND ah.asset_id = x.asset_id\n\n\nUNION ALL\nSELECT\n    DATE,\n    address,\n    asset_id,\n    balance AS amount\nFROM\n    ALGORAND_DEV.silver.hourly_pool_balances\nWHERE\n    DATE :: DATE < (\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            ALGORAND_DEV.silver.hourly_pool_balances) qualify (ROW_NUMBER() over(PARTITION BY address, asset_id\n        ORDER BY\n            DATE DESC) = 1)\n        \n    ) z\nGROUP BY\n    DATE,\n    address,\n    asset_id\n) x\n),\nbalance_tmp AS (\n    SELECT\n        d.date,\n        d.address AS address,\n        asset_id,\n        b.balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address\n            FROM\n                all_dates\n            UNION\n            SELECT\n                DATE,\n                address\n            FROM\n                rollup_balances\n        ) d\n        LEFT JOIN rollup_balances b\n        ON d.date = b.date\n        AND d.address = b.address\n)\nSELECT\n    DATE,\n    address,\n    asset_id,\n    LAST_VALUE(\n        balance ignore nulls\n    ) over(\n        PARTITION BY address,\n        asset_id\n        ORDER BY\n            DATE ASC rows unbounded preceding\n    ) AS balance,\n    concat_ws(\n        '-',\n        address,\n        asset_id,\n        DATE\n    ) AS _unique_key\nFROM\n    balance_tmp\nORDER BY\n    address,\n    asset_id,\n    DATE DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.hourly_pool_balances"}, "model.algorand_models.silver__account": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'address',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nSELECT\n    algorand_decode_hex_addr(\n        addr :: text\n    ) AS address,\n    addr :: text AS address_raw,\n    deleted AS account_closed,\n    rewardsbase,\n    CASE\n        WHEN rewardsbase > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_rewards_base,\n    rewards_total,\n    CASE\n        WHEN rewards_total > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_rewards_total,\n    microalgos,\n    CASE\n        WHEN microalgos > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_balance,\n    A.created_at,\n    A.closed_at,\n    A.keytype account_data,\n    A._inserted_timestamp\nFROM\n    {{ ref('bronze__account') }} A\n\n{% if is_incremental() %}\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.bronze__account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__account"], "unique_id": "model.algorand_models.silver__account", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__account.sql", "original_file_path": "models/silver/silver__account.sql", "name": "silver__account", "alias": "account", "checksum": {"name": "sha256", "checksum": "fcf3888553894d94da47e972c5b4dcf3dff52cf33bbc598c5acdbd766ab3614a"}, "tags": [], "refs": [["bronze__account"]], "sources": [], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_RAW": {"name": "ADDRESS_RAW", "description": "the un decoded address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_CLOSED": {"name": "ACCOUNT_CLOSED", "description": "Whether or not the account is currently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_BASE": {"name": "REWARDS_BASE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_REWARDS_BASE": {"name": "NON_ZERO_REWARDS_BASE", "description": "Used as part of the rewards computation. Only applicable to accounts which are participating. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_TOTAL": {"name": "REWARDS_TOTAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_REWARDS_TOTAL": {"name": "NON_ZERO_REWARDS_TOTAL", "description": "Total amount of rewards a wallet address has accrued. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MICROALGOS": {"name": "MICROALGOS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_BALANCE": {"name": "NON_ZERO_BALANCE", "description": "Total number of ALGOs in the account. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which account was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Block timestamp during which account was closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_DATA": {"name": "ACCOUNT_DATA", "description": "Extra data related to the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__account.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.946589, "compiled_sql": "\n\nSELECT\n    algorand_decode_hex_addr(\n        addr :: text\n    ) AS address,\n    addr :: text AS address_raw,\n    deleted AS account_closed,\n    rewardsbase,\n    CASE\n        WHEN rewardsbase > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_rewards_base,\n    rewards_total,\n    CASE\n        WHEN rewards_total > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_rewards_total,\n    microalgos,\n    CASE\n        WHEN microalgos > 0 THEN TRUE\n        ELSE FALSE\n    END non_zero_balance,\n    A.created_at,\n    A.closed_at,\n    A.keytype account_data,\n    A._inserted_timestamp\nFROM\n    ALGORAND_DEV.bronze.account A\n\n\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.account\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.account"}, "model.algorand_models.silver__nft_sales_algoxnft": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH nft_trans AS (\n\n    SELECT\n        tx_group_id,\n        fee,\n        amount,\n        sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n        AND receiver = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n        AND algorand_decode_b64_addr(\n            tx_message :txn :close :: STRING\n        ) IS NULL\n        AND amount > 0\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nall_nft_txn AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        SUM(\n            A.amount\n        ) total_sales_amount\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN (\n            SELECT\n                DISTINCT sender,\n                tx_group_id\n            FROM\n                nft_trans\n        ) b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.sender = b.sender\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    block_id,\n    A.tx_group_id\n),\nbuynow AS(\n    SELECT\n        sale.block_id,\n        sale.tx_group_id,\n        nft.asset_receiver AS purchaser,\n        asset_id AS nft_asset_id,\n        sale.total_sales_amount,\n        SUM(\n            nft.asset_amount\n        ) AS number_of_nfts,\n        MAX(\n            nft._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        all_nft_txn sale\n        JOIN {{ ref('silver__transaction') }}\n        nft\n        ON sale.tx_group_id = nft.tx_group_id\n    WHERE\n        tx_type = 'axfer'\n        AND asset_amount > 0\n    GROUP BY\n        sale.block_id,\n        sale.tx_group_id,\n        nft.asset_receiver,\n        asset_id,\n        sale.total_sales_amount\n),\nnft_trans_auc AS (\n    SELECT\n        tx_message :ca :: DECIMAL / pow(\n            10,\n            6\n        ) AS close_amount,\n        tx_group_id\n    FROM\n        {{ ref('silver__transaction') }}\n        pt\n    WHERE\n        tx_type = 'pay'\n        AND algorand_decode_b64_addr(\n            tx_message :txn :close :: STRING\n        ) = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n        AND amount IS NOT NULL\n\n{% if is_incremental() %}\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nall_nft_txn_auc AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }} A\n    WHERE\n        tx_type = 'pay'\n        AND tx_group_id IN (\n            SELECT\n                DISTINCT tx_group_id\n            FROM\n                nft_trans_auc\n        )\n        AND receiver != 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nsales_auc AS (\n    SELECT\n        sales.block_id,\n        sales.tx_group_id,\n        SUM(\n            sales.amount\n        ) + SUM(\n            close_a.close_amount\n        ) / COUNT(\n            close_a.close_amount\n        ) AS sales,\n        MAX(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\n    FROM\n        all_nft_txn_auc sales\n        JOIN nft_trans_auc close_a\n        ON sales.tx_group_id = close_a.tx_group_id\n    GROUP BY\n        sales.block_id,\n        sales.tx_group_id\n),\nauc_sales AS(\n    SELECT\n        sales.block_id,\n        sales.tx_group_id,\n        nft.asset_receiver AS purchaser,\n        ast.asset_id AS nft_asset_id,\n        sales.sales total_sales_amount,\n        SUM(\n            nft.asset_amount\n        ) AS number_of_nfts,\n        MAX(\n            sales._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP,\n        decimals\n    FROM\n        sales_auc sales\n        JOIN {{ ref('silver__transaction') }}\n        nft\n        ON sales.tx_group_id = nft.tx_group_id\n        JOIN {{ ref('silver__asset') }}\n        ast\n        ON nft.asset_id = ast.asset_id\n    WHERE\n        tx_type = 'axfer'\n        AND sales IS NOT NULL\n        AND asset_amount IS NOT NULL\n    GROUP BY\n        sales.block_id,\n        sales.tx_group_id,\n        nft.asset_receiver,\n        ast.asset_id,\n        sales.sales,\n        decimals\n)\nSELECT\n    block_id,\n    tx_group_id,\n    'buy now' event_type,\n    purchaser,\n    nft.nft_asset_id,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    CASE\n        WHEN ast.decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            ast.decimals\n        )\n        WHEN NULLIF(\n            ast.decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft.nft_asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    buynow nft\n    JOIN {{ ref('silver__asset') }}\n    ast\n    ON nft.nft_asset_id = ast.asset_id\nWHERE\n    is_nft = TRUE\nUNION ALL\nSELECT\n    block_id,\n    tx_group_id,\n    'auction' event_type,\n    purchaser,\n    nft.nft_asset_id,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft.nft_asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    auc_sales nft", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_algoxnft"], "unique_id": "model.algorand_models.silver__nft_sales_algoxnft", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_algoxnft.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.sql", "name": "silver__nft_sales_algoxnft", "alias": "nft_sales_algoxnft", "checksum": {"name": "sha256", "checksum": "aecd30ec2e62ad896b48760410de930ac3d16cb1efa576198531f0741514a919"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_algoxnft.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.937236, "compiled_sql": "\n\nWITH nft_trans AS (\n\n    SELECT\n        tx_group_id,\n        fee,\n        amount,\n        sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n        AND receiver = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n        AND algorand_decode_b64_addr(\n            tx_message :txn :close :: STRING\n        ) IS NULL\n        AND amount > 0\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_algoxnft\n) - INTERVAL '4 HOURS'\n\n),\nall_nft_txn AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        SUM(\n            A.amount\n        ) total_sales_amount\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN (\n            SELECT\n                DISTINCT sender,\n                tx_group_id\n            FROM\n                nft_trans\n        ) b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.sender = b.sender\n    WHERE\n        tx_type = 'pay'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_algoxnft\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    block_id,\n    A.tx_group_id\n),\nbuynow AS(\n    SELECT\n        sale.block_id,\n        sale.tx_group_id,\n        nft.asset_receiver AS purchaser,\n        asset_id AS nft_asset_id,\n        sale.total_sales_amount,\n        SUM(\n            nft.asset_amount\n        ) AS number_of_nfts,\n        MAX(\n            nft._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        all_nft_txn sale\n        JOIN ALGORAND_DEV.silver.transaction\n        nft\n        ON sale.tx_group_id = nft.tx_group_id\n    WHERE\n        tx_type = 'axfer'\n        AND asset_amount > 0\n    GROUP BY\n        sale.block_id,\n        sale.tx_group_id,\n        nft.asset_receiver,\n        asset_id,\n        sale.total_sales_amount\n),\nnft_trans_auc AS (\n    SELECT\n        tx_message :ca :: DECIMAL / pow(\n            10,\n            6\n        ) AS close_amount,\n        tx_group_id\n    FROM\n        ALGORAND_DEV.silver.transaction\n        pt\n    WHERE\n        tx_type = 'pay'\n        AND algorand_decode_b64_addr(\n            tx_message :txn :close :: STRING\n        ) = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n        AND amount IS NOT NULL\n\n\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_algoxnft\n) - INTERVAL '4 HOURS'\n\n),\nall_nft_txn_auc AS (\n    SELECT\n        block_id,\n        A.tx_group_id,\n        amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction A\n    WHERE\n        tx_type = 'pay'\n        AND tx_group_id IN (\n            SELECT\n                DISTINCT tx_group_id\n            FROM\n                nft_trans_auc\n        )\n        AND receiver != 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_algoxnft\n) - INTERVAL '4 HOURS'\n\n),\nsales_auc AS (\n    SELECT\n        sales.block_id,\n        sales.tx_group_id,\n        SUM(\n            sales.amount\n        ) + SUM(\n            close_a.close_amount\n        ) / COUNT(\n            close_a.close_amount\n        ) AS sales,\n        MAX(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\n    FROM\n        all_nft_txn_auc sales\n        JOIN nft_trans_auc close_a\n        ON sales.tx_group_id = close_a.tx_group_id\n    GROUP BY\n        sales.block_id,\n        sales.tx_group_id\n),\nauc_sales AS(\n    SELECT\n        sales.block_id,\n        sales.tx_group_id,\n        nft.asset_receiver AS purchaser,\n        ast.asset_id AS nft_asset_id,\n        sales.sales total_sales_amount,\n        SUM(\n            nft.asset_amount\n        ) AS number_of_nfts,\n        MAX(\n            sales._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP,\n        decimals\n    FROM\n        sales_auc sales\n        JOIN ALGORAND_DEV.silver.transaction\n        nft\n        ON sales.tx_group_id = nft.tx_group_id\n        JOIN ALGORAND_DEV.silver.asset\n        ast\n        ON nft.asset_id = ast.asset_id\n    WHERE\n        tx_type = 'axfer'\n        AND sales IS NOT NULL\n        AND asset_amount IS NOT NULL\n    GROUP BY\n        sales.block_id,\n        sales.tx_group_id,\n        nft.asset_receiver,\n        ast.asset_id,\n        sales.sales,\n        decimals\n)\nSELECT\n    block_id,\n    tx_group_id,\n    'buy now' event_type,\n    purchaser,\n    nft.nft_asset_id,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    CASE\n        WHEN ast.decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            ast.decimals\n        )\n        WHEN NULLIF(\n            ast.decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft.nft_asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    buynow nft\n    JOIN ALGORAND_DEV.silver.asset\n    ast\n    ON nft.nft_asset_id = ast.asset_id\nWHERE\n    is_nft = TRUE\nUNION ALL\nSELECT\n    block_id,\n    tx_group_id,\n    'auction' event_type,\n    purchaser,\n    nft.nft_asset_id,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft.nft_asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    auc_sales nft", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_algoxnft"}, "model.algorand_models.silver__nft_atomic_swaps": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH atran AS (\n\n    SELECT\n        A.tx_group_id,\n        block_id,\n        asset_receiver,\n        A.asset_id,\n        decimals,\n        tx_message,\n        asset_amount\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN {{ ref('silver__asset') }}\n        nft\n        ON A.asset_id = nft.asset_id\n        LEFT JOIN (\n            SELECT\n                DISTINCT tx_group_id AS tx_group_id\n            FROM\n                {{ ref('silver__transaction') }} A\n            WHERE\n                tx_type = 'pay'\n                AND (\n                    receiver = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n                    OR receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'\n                )\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n) AS market\nON A.tx_group_id = market.tx_group_id\nWHERE\n    tx_type = 'axfer'\n    AND is_nft = TRUE\n    AND market.tx_group_id IS NULL\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\npt AS (\n    SELECT\n        tx_group_id,\n        amount,\n        sender\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nnft_transfers AS(\n    SELECT\n        DISTINCT tx_group_id\n    FROM\n        atran axfer\n    WHERE\n        COALESCE(\n            TRY_BASE64_DECODE_STRING(\n                tx_message :txn :note :: STRING\n            ),\n            ''\n        ) != 'ab2.gallery'\n),\ntx_group_id_atomic AS(\n    SELECT\n        t.tx_group_id,\n        t.block_id,\n        COUNT(\n            t.tx_group_id\n        ) AS tx_group_id_ct,\n        SUM(\n            CASE\n                WHEN tx_type = 'pay' THEN 1\n                ELSE 0\n            END\n        ) AS pay_tx_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN tx_type = 'axfer'\n                AND nft.tx_group_id IS NOT NULL\n                AND t.tx_message :txn :aamt :: NUMBER > 0 THEN sender {# ELSE 0 #}\n            END\n        ) AS axfer_tx_count,\n        MAX(\n            t._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n        t\n        JOIN nft_transfers nft\n        ON t.tx_group_id = nft.tx_group_id\n    WHERE\n        (\n            asset_id = 0\n            OR asset_id IN (\n                SELECT\n                    asset_id\n                FROM\n                    {{ ref('silver__asset') }}\n                WHERE\n                    is_nft = TRUE\n            )\n        )\n\n{% if is_incremental() %}\nAND t._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    t.block_id,\n    t.tx_group_id\nHAVING\n    tx_group_id_ct >= 2\n    AND pay_tx_count = 1\n    AND axfer_tx_count = 1\n)\nSELECT\n    b.block_timestamp,\n    axfer.block_id,\n    axfer.tx_group_id,\n    axfer.asset_receiver AS purchaser,\n    axfer.asset_id AS nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN asset_amount :: FLOAT\n    END AS number_of_nfts,\n    pay.amount :: FLOAT / pow(\n        10,\n        6\n    ) / axfer_tx_count AS total_sales_amount,\n    concat_ws(\n        '-',\n        axfer.block_id :: STRING,\n        axfer.tx_group_id :: STRING,\n        axfer.asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    tx_group_id_atomic A\n    JOIN {{ ref('silver__block') }}\n    b\n    ON A.block_id = b.block_id\n    JOIN atran axfer\n    ON A.tx_group_id = axfer.tx_group_id\n    JOIN pt pay\n    ON pay.tx_group_id = A.tx_group_id\n    AND axfer.asset_receiver = pay.sender\n    LEFT JOIN (\n        SELECT\n            DISTINCT tx_group_id\n        FROM\n            {{ ref('silver__transaction') }}\n        WHERE\n            tx_type = 'appl'\n    ) exc\n    ON A.tx_group_id = exc.tx_group_id\nWHERE\n    axfer.asset_amount BETWEEN 0\n    AND 450\n    AND pay.amount > 0\n    AND exc.tx_group_id IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_atomic_swaps"], "unique_id": "model.algorand_models.silver__nft_atomic_swaps", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_atomic_swaps.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.sql", "name": "silver__nft_atomic_swaps", "alias": "nft_atomic_swaps", "checksum": {"name": "sha256", "checksum": "932b4341bcab8eb154f706ec8cee358ef46439288f2eeee6ac8a4c5e87d36d8f"}, "tags": [], "refs": [["silver__transaction"], ["silver__asset"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__block"], ["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_atomic_swaps.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.928858, "compiled_sql": "\n\nWITH atran AS (\n\n    SELECT\n        A.tx_group_id,\n        block_id,\n        asset_receiver,\n        A.asset_id,\n        decimals,\n        tx_message,\n        asset_amount\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN ALGORAND_DEV.silver.asset\n        nft\n        ON A.asset_id = nft.asset_id\n        LEFT JOIN (\n            SELECT\n                DISTINCT tx_group_id AS tx_group_id\n            FROM\n                ALGORAND_DEV.silver.transaction A\n            WHERE\n                tx_type = 'pay'\n                AND (\n                    receiver = 'XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4'\n                    OR receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE'\n                )\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_atomic_swaps\n) - INTERVAL '4 HOURS'\n\n) AS market\nON A.tx_group_id = market.tx_group_id\nWHERE\n    tx_type = 'axfer'\n    AND is_nft = TRUE\n    AND market.tx_group_id IS NULL\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_atomic_swaps\n) - INTERVAL '4 HOURS'\n\n),\npt AS (\n    SELECT\n        tx_group_id,\n        amount,\n        sender\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_atomic_swaps\n) - INTERVAL '4 HOURS'\n\n),\nnft_transfers AS(\n    SELECT\n        DISTINCT tx_group_id\n    FROM\n        atran axfer\n    WHERE\n        COALESCE(\n            TRY_BASE64_DECODE_STRING(\n                tx_message :txn :note :: STRING\n            ),\n            ''\n        ) != 'ab2.gallery'\n),\ntx_group_id_atomic AS(\n    SELECT\n        t.tx_group_id,\n        t.block_id,\n        COUNT(\n            t.tx_group_id\n        ) AS tx_group_id_ct,\n        SUM(\n            CASE\n                WHEN tx_type = 'pay' THEN 1\n                ELSE 0\n            END\n        ) AS pay_tx_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN tx_type = 'axfer'\n                AND nft.tx_group_id IS NOT NULL\n                AND t.tx_message :txn :aamt :: NUMBER > 0 THEN sender \n            END\n        ) AS axfer_tx_count,\n        MAX(\n            t._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n        t\n        JOIN nft_transfers nft\n        ON t.tx_group_id = nft.tx_group_id\n    WHERE\n        (\n            asset_id = 0\n            OR asset_id IN (\n                SELECT\n                    asset_id\n                FROM\n                    ALGORAND_DEV.silver.asset\n                WHERE\n                    is_nft = TRUE\n            )\n        )\n\n\nAND t._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_atomic_swaps\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    t.block_id,\n    t.tx_group_id\nHAVING\n    tx_group_id_ct >= 2\n    AND pay_tx_count = 1\n    AND axfer_tx_count = 1\n)\nSELECT\n    b.block_timestamp,\n    axfer.block_id,\n    axfer.tx_group_id,\n    axfer.asset_receiver AS purchaser,\n    axfer.asset_id AS nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN asset_amount :: FLOAT\n    END AS number_of_nfts,\n    pay.amount :: FLOAT / pow(\n        10,\n        6\n    ) / axfer_tx_count AS total_sales_amount,\n    concat_ws(\n        '-',\n        axfer.block_id :: STRING,\n        axfer.tx_group_id :: STRING,\n        axfer.asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    tx_group_id_atomic A\n    JOIN ALGORAND_DEV.silver.block\n    b\n    ON A.block_id = b.block_id\n    JOIN atran axfer\n    ON A.tx_group_id = axfer.tx_group_id\n    JOIN pt pay\n    ON pay.tx_group_id = A.tx_group_id\n    AND axfer.asset_receiver = pay.sender\n    LEFT JOIN (\n        SELECT\n            DISTINCT tx_group_id\n        FROM\n            ALGORAND_DEV.silver.transaction\n        WHERE\n            tx_type = 'appl'\n    ) exc\n    ON A.tx_group_id = exc.tx_group_id\nWHERE\n    axfer.asset_amount BETWEEN 0\n    AND 450\n    AND pay.amount > 0\n    AND exc.tx_group_id IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_atomic_swaps"}, "model.algorand_models.silver__account_asset": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        addr :: text AS address_raw,\n        assetid AS asset_id,\n        amount :: NUMBER AS amount,\n        closed_at,\n        created_at,\n        deleted AS asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__account_asset') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    b.address,\n    A.asset_id,\n    A.amount,\n    A.closed_at,\n    A.created_at,\n    A.asset_closed,\n    A.frozen,\n    A._inserted_timestamp,\n    concat_ws(\n        '-',\n        address,\n        asset_id\n    ) AS _unique_key\nFROM\n    base A\n    JOIN {{ ref('silver__account') }}\n    b\n    ON A.address_raw = b.address_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.bronze__account_asset", "model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__account_asset"], "unique_id": "model.algorand_models.silver__account_asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__account_asset.sql", "original_file_path": "models/silver/silver__account_asset.sql", "name": "silver__account_asset", "alias": "account_asset", "checksum": {"name": "sha256", "checksum": "36de20d4eeb3e6fb4f5444a75bd6e108c2a7fdc9e15a51717675a8c4e8919718"}, "tags": [], "refs": [["bronze__account_asset"], ["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_CLOSED": {"name": "ASSET_CLOSED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROZEN": {"name": "FROZEN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__account_asset.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.728755, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        addr :: text AS address_raw,\n        assetid AS asset_id,\n        amount :: NUMBER AS amount,\n        closed_at,\n        created_at,\n        deleted AS asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.bronze.account_asset\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.account_asset\n    )\n\n)\nSELECT\n    b.address,\n    A.asset_id,\n    A.amount,\n    A.closed_at,\n    A.created_at,\n    A.asset_closed,\n    A.frozen,\n    A._inserted_timestamp,\n    concat_ws(\n        '-',\n        address,\n        asset_id\n    ) AS _unique_key\nFROM\n    base A\n    JOIN ALGORAND_DEV.silver.account\n    b\n    ON A.address_raw = b.address_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.account_asset"}, "model.algorand_models.silver__nft_sales_octorand": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH gen1 AS (\n\n    SELECT\n        asset_id,\n        decimals,\n        'gen1' AS gen\n    FROM\n        {{ ref('silver__asset') }}\n    WHERE\n        asset_name LIKE '%ctorand%'\n        AND creator_address = 'X5YPUJ2HTFBY66WKWZOAA75WST5V7HWAGS2346SQFK622VNIRQ5ASXHTGA'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\ngen2 AS (\n    SELECT\n        asset_id,\n        decimals,\n        'gen2' AS gen\n    FROM\n        {{ ref('silver__asset') }}\n    WHERE\n        asset_name LIKE '%cto Prime%'\n        AND creator_address IN (\n            'XIUCOQPPZO2UNFD2TXQAEW7W5MPGZROVD2YUOGME22GNORYCJVMEYK3P5U',\n            'UFFXUBZ5DFRLOQOB4LOC7GA3HTWMEEE54U3DJRTL27RKKV4UWOIID3I4FU',\n            '6DGJ4FUQP623YFFIZXXOJ7OK63VILGT2FDGYCYI62VW2767DRBZFDTRMI4',\n            'AB4T4VD7LRGHH75Z3KISVPNDENGY4W227RPAJEBYUDVKVNF2PWDKMHTO4A',\n            'KPCXKFGBLR3WZN74BHG3RTKVOK6PW3UP53BHAYK7BLYDUCOTXJYKJU7JUY',\n            'VOKX5CEPHTY6WJNZU4SQGCHCBK5MWNYXXIBUFQAMVTOCVP6VS6MFEEAFLM',\n            'VVCR4Q2GYOQO3ENWQDQEFFGTNDJRA56QIYHUQ3RCZT36I6WXBAUU2FS7QE',\n            'ZI35SDCVSLRTKUQWCA6SXYX2VUKDJ5JJEWDMDH6ZYMXTQBQDAE6GWUEU6I'\n        )\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nraw_data AS (\n    SELECT\n        DISTINCT x.block_id,\n        x.tx_group_id,\n        x.asset_receiver AS purchaser,\n        nft.asset_id AS nft_asset_id,\n        decimals,\n        x.asset_amount AS number_of_nfts,\n        gen AS generation,\n        SUM(\n            y.amount\n        ) AS total_sales_amount,\n        MAX(\n            x._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n        x\n        JOIN(\n            SELECT\n                asset_id,\n                decimals,\n                gen\n            FROM\n                gen1\n            UNION ALL\n            SELECT\n                asset_id,\n                decimals,\n                gen\n            FROM\n                gen2\n        ) nft\n        ON x.asset_id = nft.asset_id\n        JOIN {{ ref('silver__transaction') }}\n        y\n        ON x.tx_group_id = y.tx_group_id\n        JOIN (\n            SELECT\n                DISTINCT tx_group_id\n            FROM\n                {{ ref('silver__transaction') }}\n            WHERE\n                tx_type = 'appl'\n        ) app_call\n        ON x.tx_group_id = app_call.tx_group_id\n    WHERE\n        x.tx_type = 'axfer'\n        AND y.tx_type = 'pay'\n        AND x.asset_amount > 0\n        AND y.tx_message :txn :amt IS NOT NULL\n\n{% if is_incremental() %}\nAND x._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    x.block_id,\n    x.tx_group_id,\n    x.asset_receiver,\n    nft.asset_id,\n    decimals,\n    number_of_nfts,\n    generation\n)\nSELECT\n    rd.block_id,\n    rd.tx_group_id,\n    rd.purchaser,\n    rd.nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    rd.generation,\n    rd.total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) / COUNT(1) over(\n        PARTITION BY rd.tx_group_id\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        rd.nft_asset_id :: STRING\n    ) AS _unique_key,\n    rd._INSERTED_TIMESTAMP\nFROM\n    raw_data rd", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_octorand"], "unique_id": "model.algorand_models.silver__nft_sales_octorand", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_octorand.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.sql", "name": "silver__nft_sales_octorand", "alias": "nft_sales_octorand", "checksum": {"name": "sha256", "checksum": "ae27d8e2bfc7d3bceca86f372d62510ba52ae4f027a5f8d08d431796cc98b00d"}, "tags": [], "refs": [["silver__asset"], ["silver__asset"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_octorand.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.782391, "compiled_sql": "\n\nWITH gen1 AS (\n\n    SELECT\n        asset_id,\n        decimals,\n        'gen1' AS gen\n    FROM\n        ALGORAND_DEV.silver.asset\n    WHERE\n        asset_name LIKE '%ctorand%'\n        AND creator_address = 'X5YPUJ2HTFBY66WKWZOAA75WST5V7HWAGS2346SQFK622VNIRQ5ASXHTGA'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_octorand\n) - INTERVAL '4 HOURS'\n\n),\ngen2 AS (\n    SELECT\n        asset_id,\n        decimals,\n        'gen2' AS gen\n    FROM\n        ALGORAND_DEV.silver.asset\n    WHERE\n        asset_name LIKE '%cto Prime%'\n        AND creator_address IN (\n            'XIUCOQPPZO2UNFD2TXQAEW7W5MPGZROVD2YUOGME22GNORYCJVMEYK3P5U',\n            'UFFXUBZ5DFRLOQOB4LOC7GA3HTWMEEE54U3DJRTL27RKKV4UWOIID3I4FU',\n            '6DGJ4FUQP623YFFIZXXOJ7OK63VILGT2FDGYCYI62VW2767DRBZFDTRMI4',\n            'AB4T4VD7LRGHH75Z3KISVPNDENGY4W227RPAJEBYUDVKVNF2PWDKMHTO4A',\n            'KPCXKFGBLR3WZN74BHG3RTKVOK6PW3UP53BHAYK7BLYDUCOTXJYKJU7JUY',\n            'VOKX5CEPHTY6WJNZU4SQGCHCBK5MWNYXXIBUFQAMVTOCVP6VS6MFEEAFLM',\n            'VVCR4Q2GYOQO3ENWQDQEFFGTNDJRA56QIYHUQ3RCZT36I6WXBAUU2FS7QE',\n            'ZI35SDCVSLRTKUQWCA6SXYX2VUKDJ5JJEWDMDH6ZYMXTQBQDAE6GWUEU6I'\n        )\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_octorand\n) - INTERVAL '4 HOURS'\n\n),\nraw_data AS (\n    SELECT\n        DISTINCT x.block_id,\n        x.tx_group_id,\n        x.asset_receiver AS purchaser,\n        nft.asset_id AS nft_asset_id,\n        decimals,\n        x.asset_amount AS number_of_nfts,\n        gen AS generation,\n        SUM(\n            y.amount\n        ) AS total_sales_amount,\n        MAX(\n            x._INSERTED_TIMESTAMP\n        ) AS _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n        x\n        JOIN(\n            SELECT\n                asset_id,\n                decimals,\n                gen\n            FROM\n                gen1\n            UNION ALL\n            SELECT\n                asset_id,\n                decimals,\n                gen\n            FROM\n                gen2\n        ) nft\n        ON x.asset_id = nft.asset_id\n        JOIN ALGORAND_DEV.silver.transaction\n        y\n        ON x.tx_group_id = y.tx_group_id\n        JOIN (\n            SELECT\n                DISTINCT tx_group_id\n            FROM\n                ALGORAND_DEV.silver.transaction\n            WHERE\n                tx_type = 'appl'\n        ) app_call\n        ON x.tx_group_id = app_call.tx_group_id\n    WHERE\n        x.tx_type = 'axfer'\n        AND y.tx_type = 'pay'\n        AND x.asset_amount > 0\n        AND y.tx_message :txn :amt IS NOT NULL\n\n\nAND x._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_octorand\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    x.block_id,\n    x.tx_group_id,\n    x.asset_receiver,\n    nft.asset_id,\n    decimals,\n    number_of_nfts,\n    generation\n)\nSELECT\n    rd.block_id,\n    rd.tx_group_id,\n    rd.purchaser,\n    rd.nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    rd.generation,\n    rd.total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) / COUNT(1) over(\n        PARTITION BY rd.tx_group_id\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        rd.nft_asset_id :: STRING\n    ) AS _unique_key,\n    rd._INSERTED_TIMESTAMP\nFROM\n    raw_data rd", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_octorand"}, "model.algorand_models.silver__block": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'block_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nSELECT\n    ROUND AS block_id,\n    realtime :: TIMESTAMP AS block_timestamp,\n    realtime :: DATE AS block_date,\n    HOUR(realtime) AS block_hour,\n    week(realtime) AS block_week,\n    MONTH(realtime) AS block_month,\n    quarter(realtime) AS block_quarter,\n    YEAR(realtime) AS block_year,\n    dayofmonth(realtime) AS block_DAYOFMONTH,\n    dayofweek(realtime) AS block_DAYOFWEEK,\n    dayofyear(realtime) AS block_DAYOFYEAR,\n    rewardslevel AS rewards_level,\n    header :gen :: STRING AS network,\n    header :gh :: STRING AS genesis_hash,\n    header :prev :: STRING AS prev_block_hash,\n    header :txn :: STRING AS txn_root,\n    header,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\nFROM\n    {{ ref('bronze__block') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.bronze__block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__block"], "unique_id": "model.algorand_models.silver__block", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__block.sql", "original_file_path": "models/silver/silver__block.sql", "name": "silver__block", "alias": "block", "checksum": {"name": "sha256", "checksum": "436aa4b8e614bae6ad9c4a2e4a54481af4a861a198b021f19998672ce0e22027"}, "tags": [], "refs": [["bronze__block"]], "sources": [], "metrics": [], "description": "Records of all blocks that have occurred on Algorand, dating back to the genesis block. ", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_LEVEL": {"name": "REWARDS_LEVEL", "description": "How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis. Link: https://algorand.github.io/java-algorand-sdk/com/algorand/algosdk/v2/client/model/BlockRewards.html", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "Signifying whether the block is from mainnet or testnet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENESIS_HASH": {"name": "GENESIS_HASH", "description": "The hash of the genesis block of the network for which the transaction is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_BLOCK_HASH": {"name": "PREV_BLOCK_HASH", "description": "ID to which the block before this belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TXN_ROOT": {"name": "TXN_ROOT", "description": "TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HEADER": {"name": "HEADER", "description": "Block details, see rules below- for more message details https://developer.algorand.org/docs/rest-apis/indexer/#blockrewards", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__block.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.769973, "compiled_sql": "\n\nSELECT\n    ROUND AS block_id,\n    realtime :: TIMESTAMP AS block_timestamp,\n    realtime :: DATE AS block_date,\n    HOUR(realtime) AS block_hour,\n    week(realtime) AS block_week,\n    MONTH(realtime) AS block_month,\n    quarter(realtime) AS block_quarter,\n    YEAR(realtime) AS block_year,\n    dayofmonth(realtime) AS block_DAYOFMONTH,\n    dayofweek(realtime) AS block_DAYOFWEEK,\n    dayofyear(realtime) AS block_DAYOFYEAR,\n    rewardslevel AS rewards_level,\n    header :gen :: STRING AS network,\n    header :gh :: STRING AS genesis_hash,\n    header :prev :: STRING AS prev_block_hash,\n    header :txn :: STRING AS txn_root,\n    header,\n    DATEADD(\n        ms,\n        __HEVO__LOADED_AT,\n        '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\nFROM\n    ALGORAND_DEV.bronze.block\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.block\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.block"}, "model.algorand_models.silver__indexer_tx": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'TX_ID',\n    incremental_strategy = 'merge',\n    cluster_by = ['_INSERTED_TIMESTAMP::DATE']\n) }}\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => '{{ source( 'algorand_db_external','algorand_indexer_tx' ) }}'\n            )\n        ) A\n    GROUP BY\n        last_modified,\n        file_name\n)\n\n{% if is_incremental() %},\nmax_date AS (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        ) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }}\n)\n{% endif %}\nSELECT\n    tx_id,\n    account_id,\n    DATA :\"confirmed-round\" :: INT AS block_id,\n    DATA,\n    last_modified AS _INSERTED_TIMESTAMP\nFROM\n    {{ source(\n        'algorand_db_external',\n        'algorand_indexer_tx'\n    ) }}\n    JOIN meta b\n    ON b.file_name = metadata$filename\nWHERE\n    tx_id IS NOT NULL\n    AND _PARTITION_BY_DATE = '2022-07-27'\n\n{% if is_incremental() %}\nAND _PARTITION_BY_DATE >= (\n    SELECT\n        max_INSERTED_TIMESTAMP :: DATE\n    FROM\n        max_date\n)\nAND b.last_modified > (\n    SELECT\n        max_INSERTED_TIMESTAMP\n    FROM\n        max_date\n)\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY tx_id\nORDER BY\n    _PARTITION_BY_DATE DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.algorand_db_external.algorand_indexer_tx", "source.algorand_models.algorand_db_external.algorand_indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "TX_ID", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_INSERTED_TIMESTAMP::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__indexer_tx"], "unique_id": "model.algorand_models.silver__indexer_tx", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__indexer_tx.sql", "original_file_path": "models/silver/silver__indexer_tx.sql", "name": "silver__indexer_tx", "alias": "indexer_tx", "checksum": {"name": "sha256", "checksum": "b312e7111b3475b40ec8f51a5eb4b40c798cfd1fd1b029f4e9a142dfc1ab19b2"}, "tags": [], "refs": [], "sources": [["algorand_db_external", "algorand_indexer_tx"], ["algorand_db_external", "algorand_indexer_tx"]], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_ID": {"name": "ACCOUNT_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__indexer_tx.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "TX_ID", "incremental_strategy": "merge", "cluster_by": ["_INSERTED_TIMESTAMP::DATE"]}, "created_at": 1667512711.7631009, "compiled_sql": "\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'flipside_prod_db.bronze.algorand_indexer_tx'\n            )\n        ) A\n    GROUP BY\n        last_modified,\n        file_name\n)\n\n,\nmax_date AS (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        ) max_INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.indexer_tx\n)\n\nSELECT\n    tx_id,\n    account_id,\n    DATA :\"confirmed-round\" :: INT AS block_id,\n    DATA,\n    last_modified AS _INSERTED_TIMESTAMP\nFROM\n    flipside_prod_db.bronze.algorand_indexer_tx\n    JOIN meta b\n    ON b.file_name = metadata$filename\nWHERE\n    tx_id IS NOT NULL\n    AND _PARTITION_BY_DATE = '2022-07-27'\n\n\nAND _PARTITION_BY_DATE >= (\n    SELECT\n        max_INSERTED_TIMESTAMP :: DATE\n    FROM\n        max_date\n)\nAND b.last_modified > (\n    SELECT\n        max_INSERTED_TIMESTAMP\n    FROM\n        max_date\n)\n\n\nqualify(ROW_NUMBER() over (PARTITION BY tx_id\nORDER BY\n    _PARTITION_BY_DATE DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.indexer_tx"}, "model.algorand_models.silver__daily_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['date'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH address_ranges AS (\n\n    SELECT\n        A.address,\n        b.block_date AS min_block_date,\n        CURRENT_TIMESTAMP :: DATE AS max_block_date\n    FROM\n        {{ ref('silver__account') }} A\n        JOIN {{ ref('silver__block') }}\n        b\n        ON A.created_at = b.block_id\n),\ncte_my_date AS (\n    SELECT\n        HOUR :: DATE AS DATE\n    FROM\n        {{ source(\n            'shared',\n            'hours'\n        ) }}\n    WHERE\n        HOUR :: DATE <= CURRENT_DATE :: DATE\n\n{% if is_incremental() %}\nAND HOUR :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n    GROUP BY\n        DATE\n),\nall_dates AS (\n    SELECT\n        C.date,\n        A.address\n    FROM\n        cte_my_date C\n        JOIN address_ranges A\n        ON C.date BETWEEN A.min_block_date\n        AND A.max_block_date\n),\ntxns AS (\n    SELECT\n        A.sender,\n        A.receiver,\n        COALESCE(\n            A.amount,\n            0\n        ) / pow(\n            10,\n            6\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        b.block_timestamp,\n        tx_type\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN {{ ref('silver__block') }}\n        b\n        ON A.block_id = b.block_id\n),\nsenderpay AS(\n    SELECT\n        A.sender AS address,\n        (\n            (\n                COALESCE(\n                    A.amount,\n                    0\n                ) * -1\n            ) -.001\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nsendersfee AS(\n    SELECT\n        A.sender AS address,\n        0.001 * -1 AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type <> 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nreceivers AS (\n    SELECT\n        A.receiver AS address,\n        COALESCE(\n            A.amount,\n            0\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.receiver = b.address\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nreward AS (\n    SELECT\n        A.account AS address,\n        COALESCE(\n            A.amount,\n            0\n        ) / pow(\n            10,\n            6\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp\n    FROM\n        {{ ref('silver__transaction_reward') }} A\n        JOIN address_ranges b\n        ON A.account = b.address\n        JOIN {{ ref('silver__block') }} C\n        ON A.block_id = C.block_id\n\n{% if is_incremental() %}\nWHERE\n    block_timestamp :: DATE >=(\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            {{ this }})\n        {% endif %}\n    ),\n    closes AS (\n        SELECT\n            A.account AS address,\n            CASE\n                WHEN asa.decimals > 0 THEN COALESCE(\n                    A.amount,\n                    0\n                ) / pow(\n                    10,\n                    asa.decimals\n                )\n                WHEN asa.decimals = 0 THEN COALESCE(\n                    A.amount,\n                    0\n                )\n            END AS amount,\n            A.block_id,\n            A.intra,\n            C.block_timestamp\n        FROM\n            {{ ref('silver__transaction_close') }} A\n            JOIN address_ranges b\n            ON A.account = b.address\n            LEFT JOIN {{ ref('silver__asset') }}\n            asa\n            ON A.asset_id = asa.asset_id\n            JOIN {{ ref('silver__block') }} C\n            ON A.block_id = C.block_id\n        WHERE\n            A.asset_id = 0\n\n{% if is_incremental() %}\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        {{ this }})\n    {% endif %}\n),\nall_actions AS(\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        senderpay\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        sendersfee\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        receivers\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        reward\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        closes\n    UNION ALL\n    SELECT\n        address,\n        0 amount,\n        1 block_id,\n        0 intra,\n        min_block_date AS block_timestamp\n    FROM\n        address_ranges\n),\ndailysummed_balances AS(\n    SELECT\n        block_timestamp :: DATE AS DATE,\n        address,\n        SUM(amount) AS amount\n    FROM\n        all_actions\n    GROUP BY\n        block_timestamp :: DATE,\n        address\n),\nrollup_balances AS (\n    SELECT\n        DATE,\n        address,\n        SUM(amount) over (\n            PARTITION BY address\n            ORDER BY\n                DATE\n        ) AS balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address,\n                SUM(amount) amount\n            FROM\n                (\n                    SELECT\n                        DATE,\n                        address,\n                        amount\n                    FROM\n                        dailysummed_balances\n\n{% if is_incremental() %}\nUNION ALL\nSELECT\n    DATE,\n    address,\n    balance AS amount\nFROM\n    {{ this }}\nWHERE\n    DATE :: DATE < (\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            {{ this }}) qualify (ROW_NUMBER() over(PARTITION BY address\n        ORDER BY\n            DATE DESC) = 1)\n        {% endif %}\n    ) z\nGROUP BY\n    DATE,\n    address\n) x\n),\nbalance_tmp AS (\n    SELECT\n        d.date,\n        d.address AS address,\n        b.balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address\n            FROM\n                all_dates\n            UNION\n            SELECT\n                DATE,\n                address\n            FROM\n                rollup_balances\n        ) d\n        LEFT JOIN rollup_balances b\n        ON d.date = b.date\n        AND d.address = b.address\n)\nSELECT\n    DATE,\n    address,\n    LAST_VALUE(\n        balance ignore nulls\n    ) over(\n        PARTITION BY address\n        ORDER BY\n            DATE ASC rows unbounded preceding\n    ) AS balance,\n    concat_ws(\n        '-',\n        address,\n        DATE\n    ) AS _unique_key\nFROM\n    balance_tmp\nORDER BY\n    address,\n    DATE DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.shared.hours", "model.algorand_models.silver__account", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction_reward", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction_close", "model.algorand_models.silver__asset", "model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["date"], "incremental_strategy": "merge", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__daily_balances"], "unique_id": "model.algorand_models.silver__daily_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__daily_balances.sql", "original_file_path": "models/silver/silver__daily_balances.sql", "name": "silver__daily_balances", "alias": "daily_balances", "checksum": {"name": "sha256", "checksum": "93af247949c7d3463f15062043362b5ca166b03d336b1b27b3c17df889bb48fe"}, "tags": [], "refs": [["silver__account"], ["silver__block"], ["silver__transaction"], ["silver__block"], ["silver__transaction_reward"], ["silver__block"], ["silver__transaction_close"], ["silver__asset"], ["silver__block"]], "sources": [["shared", "hours"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE": {"name": "DATE", "description": "The date where the end of day balance is valid for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BALANCE": {"name": "BALANCE", "description": "The total amount of ALGOs held by this address at the end of the day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__daily_balances.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["date"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1667512711.751303, "compiled_sql": "\n\nWITH address_ranges AS (\n\n    SELECT\n        A.address,\n        b.block_date AS min_block_date,\n        CURRENT_TIMESTAMP :: DATE AS max_block_date\n    FROM\n        ALGORAND_DEV.silver.account A\n        JOIN ALGORAND_DEV.silver.block\n        b\n        ON A.created_at = b.block_id\n),\ncte_my_date AS (\n    SELECT\n        HOUR :: DATE AS DATE\n    FROM\n        flipside_prod_db.silver.hours\n    WHERE\n        HOUR :: DATE <= CURRENT_DATE :: DATE\n\n\nAND HOUR :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.daily_balances)\n    \n    GROUP BY\n        DATE\n),\nall_dates AS (\n    SELECT\n        C.date,\n        A.address\n    FROM\n        cte_my_date C\n        JOIN address_ranges A\n        ON C.date BETWEEN A.min_block_date\n        AND A.max_block_date\n),\ntxns AS (\n    SELECT\n        A.sender,\n        A.receiver,\n        COALESCE(\n            A.amount,\n            0\n        ) / pow(\n            10,\n            6\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        b.block_timestamp,\n        tx_type\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN ALGORAND_DEV.silver.block\n        b\n        ON A.block_id = b.block_id\n),\nsenderpay AS(\n    SELECT\n        A.sender AS address,\n        (\n            (\n                COALESCE(\n                    A.amount,\n                    0\n                ) * -1\n            ) -.001\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type = 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.daily_balances)\n    \n),\nsendersfee AS(\n    SELECT\n        A.sender AS address,\n        0.001 * -1 AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.sender = b.address\n    WHERE\n        tx_type <> 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.daily_balances)\n    \n),\nreceivers AS (\n    SELECT\n        A.receiver AS address,\n        COALESCE(\n            A.amount,\n            0\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        A.block_timestamp\n    FROM\n        txns A\n        JOIN address_ranges b\n        ON A.receiver = b.address\n    WHERE\n        tx_type = 'pay'\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.daily_balances)\n    \n),\nreward AS (\n    SELECT\n        A.account AS address,\n        COALESCE(\n            A.amount,\n            0\n        ) / pow(\n            10,\n            6\n        ) AS amount,\n        A.block_id,\n        A.intra,\n        C.block_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction_reward A\n        JOIN address_ranges b\n        ON A.account = b.address\n        JOIN ALGORAND_DEV.silver.block C\n        ON A.block_id = C.block_id\n\n\nWHERE\n    block_timestamp :: DATE >=(\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            ALGORAND_DEV.silver.daily_balances)\n        \n    ),\n    closes AS (\n        SELECT\n            A.account AS address,\n            CASE\n                WHEN asa.decimals > 0 THEN COALESCE(\n                    A.amount,\n                    0\n                ) / pow(\n                    10,\n                    asa.decimals\n                )\n                WHEN asa.decimals = 0 THEN COALESCE(\n                    A.amount,\n                    0\n                )\n            END AS amount,\n            A.block_id,\n            A.intra,\n            C.block_timestamp\n        FROM\n            ALGORAND_DEV.silver.transaction_close A\n            JOIN address_ranges b\n            ON A.account = b.address\n            LEFT JOIN ALGORAND_DEV.silver.asset\n            asa\n            ON A.asset_id = asa.asset_id\n            JOIN ALGORAND_DEV.silver.block C\n            ON A.block_id = C.block_id\n        WHERE\n            A.asset_id = 0\n\n\nAND block_timestamp :: DATE >=(\n    SELECT\n        DATEADD('day', -2, MAX(DATE))\n    FROM\n        ALGORAND_DEV.silver.daily_balances)\n    \n),\nall_actions AS(\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        senderpay\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        sendersfee\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        receivers\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        reward\n    UNION ALL\n    SELECT\n        address,\n        amount,\n        block_id,\n        intra,\n        block_timestamp\n    FROM\n        closes\n    UNION ALL\n    SELECT\n        address,\n        0 amount,\n        1 block_id,\n        0 intra,\n        min_block_date AS block_timestamp\n    FROM\n        address_ranges\n),\ndailysummed_balances AS(\n    SELECT\n        block_timestamp :: DATE AS DATE,\n        address,\n        SUM(amount) AS amount\n    FROM\n        all_actions\n    GROUP BY\n        block_timestamp :: DATE,\n        address\n),\nrollup_balances AS (\n    SELECT\n        DATE,\n        address,\n        SUM(amount) over (\n            PARTITION BY address\n            ORDER BY\n                DATE\n        ) AS balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address,\n                SUM(amount) amount\n            FROM\n                (\n                    SELECT\n                        DATE,\n                        address,\n                        amount\n                    FROM\n                        dailysummed_balances\n\n\nUNION ALL\nSELECT\n    DATE,\n    address,\n    balance AS amount\nFROM\n    ALGORAND_DEV.silver.daily_balances\nWHERE\n    DATE :: DATE < (\n        SELECT\n            DATEADD('day', -2, MAX(DATE))\n        FROM\n            ALGORAND_DEV.silver.daily_balances) qualify (ROW_NUMBER() over(PARTITION BY address\n        ORDER BY\n            DATE DESC) = 1)\n        \n    ) z\nGROUP BY\n    DATE,\n    address\n) x\n),\nbalance_tmp AS (\n    SELECT\n        d.date,\n        d.address AS address,\n        b.balance\n    FROM\n        (\n            SELECT\n                DATE,\n                address\n            FROM\n                all_dates\n            UNION\n            SELECT\n                DATE,\n                address\n            FROM\n                rollup_balances\n        ) d\n        LEFT JOIN rollup_balances b\n        ON d.date = b.date\n        AND d.address = b.address\n)\nSELECT\n    DATE,\n    address,\n    LAST_VALUE(\n        balance ignore nulls\n    ) over(\n        PARTITION BY address\n        ORDER BY\n            DATE ASC rows unbounded preceding\n    ) AS balance,\n    concat_ws(\n        '-',\n        address,\n        DATE\n    ) AS _unique_key\nFROM\n    balance_tmp\nORDER BY\n    address,\n    DATE DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.daily_balances"}, "model.algorand_models.silver__swaps_humble_swap_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_INSERTED_TIMESTAMP::DATE']\n) }}\n\nWITH appl AS (\n\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.sender AS swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }} A\n    WHERE\n        A.tx_type = 'appl'\n        AND A.block_id >= 20550530\n        AND TRY_BASE64_DECODE_STRING(\n            A.tx_message :txn :note :: STRING\n        ) = 'Reach 0.1.10'\n        AND TO_ARRAY(\n            BASE64_DECODE_BINARY(\n                A.tx_message :txn :apaa [1] :: STRING\n            )\n        ) [0] = '03'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\ntrans AS (\n    SELECT\n        A.tx_group_id,\n        A.tx_id,\n        COALESCE(\n            A.asset_sender,\n            A.sender\n        ) AS asset_sender,\n        A.asset_id,\n        COALESCE(\n            A.amount,\n            A.asset_amount\n        ) AS amount,\n        COALESCE(\n            A.asset_receiver,\n            receiver\n        ) AS asset_receiver\n    FROM\n        {{ ref('silver__transaction') }} A\n    WHERE\n        tx_type IN (\n            'pay',\n            'axfer'\n        )\n        AND A.block_id >= 20550530\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nhs_tx_group_ids AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        appl A\n        JOIN trans b\n        ON b.tx_group_id = A.tx_group_id\n    GROUP BY\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    HAVING\n        COUNT(1) = 2\n),\nhs_transfers AS(\n    SELECT\n        A.tx_group_id,\n        A.asset_sender,\n        A.asset_id,\n        A.amount,\n        A.asset_receiver,\n        CASE\n            WHEN asset_sender <> b.swapper THEN asset_sender\n        END AS pool_address\n    FROM\n        trans A\n        JOIN hs_tx_group_ids b\n        ON A.tx_group_id = b.tx_group_id\n),\nnormal_swaps AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        b.asset_id AS swap_from_asset_id,\n        b.amount :: FLOAT AS swap_from_amount,\n        C.pool_address,\n        C.asset_id AS swap_to_asset_id,\n        C.amount :: FLOAT AS swap_to_amount,\n        concat_ws(\n            '-',\n            A.block_id :: STRING,\n            A.intra :: STRING\n        ) AS _unique_key,\n        _INSERTED_TIMESTAMP\n    FROM\n        hs_tx_group_ids A\n        JOIN hs_transfers b\n        ON A.tx_group_id = b.tx_group_id\n        AND b.pool_address IS NULL\n        JOIN hs_transfers C\n        ON A.tx_group_id = C.tx_group_id\n        AND C.pool_address IS NOT NULL\n),\nhs_tx_ids AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        appl A\n        JOIN trans b\n        ON b.tx_id = A.tx_id\n        LEFT JOIN hs_tx_group_ids C\n        ON A.tx_group_id = C.tx_group_id\n    WHERE\n        C.tx_group_id IS NULL\n        AND (\n            b.asset_receiver IN (\n                SELECT\n                    pool_address\n                FROM\n                    normal_swaps\n\n{% if is_incremental() %}\nUNION ALL\nSELECT\n    pool_address\nFROM\n    {{ this }}\n{% endif %}\n)\nOR asset_sender IN (\n    SELECT\n        pool_address\n    FROM\n        normal_swaps\n\n{% if is_incremental() %}\nUNION ALL\nSELECT\n    pool_address\nFROM\n    {{ this }}\n{% endif %}\n)\n)\nGROUP BY\n    A.block_id,\n    A.intra,\n    A.tx_group_id,\n    A.tx_id,\n    A.app_id,\n    A.swapper,\n    A._INSERTED_TIMESTAMP\nHAVING\n    COUNT(1) = 2\n),\nodd_hs_transfers AS (\n    SELECT\n        A.tx_group_id,\n        A.tx_id,\n        A.asset_sender,\n        A.asset_id,\n        A.amount,\n        A.asset_receiver,\n        CASE\n            WHEN rec.pool_address IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END rec_is_pool\n    FROM\n        trans A\n        LEFT JOIN hs_tx_ids b\n        ON A.tx_id = b.tx_id\n        LEFT JOIN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                normal_swaps\n\n{% if is_incremental() %}\nUNION\nSELECT\n    DISTINCT pool_address\nFROM\n    {{ this }}\n{% endif %}\n) rec\nON A.asset_receiver = rec.pool_address\nLEFT JOIN (\n    SELECT\n        DISTINCT pool_address\n    FROM\n        normal_swaps\n\n{% if is_incremental() %}\nUNION\nSELECT\n    DISTINCT pool_address\nFROM\n    {{ this }}\n{% endif %}\n) sndr\nON A.asset_sender = sndr.pool_address\nWHERE\n    (\n        rec.pool_address IS NOT NULL\n        OR sndr.pool_address IS NOT NULL\n    )\n),\nodd_swaps AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        b.asset_id AS swap_from_asset_id,\n        b.amount :: FLOAT AS swap_from_amount,\n        C.asset_sender pool_address,\n        C.asset_id AS swap_to_asset_id,\n        C.amount :: FLOAT AS swap_to_amount,\n        concat_ws(\n            '-',\n            A.block_id :: STRING,\n            A.intra :: STRING\n        ) AS _unique_key,\n        _INSERTED_TIMESTAMP\n    FROM\n        hs_tx_ids A\n        JOIN odd_hs_transfers b\n        ON A.tx_id = b.tx_id\n        AND b.rec_is_pool = TRUE\n        JOIN odd_hs_transfers C\n        ON A.tx_id = C.tx_id\n        AND C.rec_is_pool = FALSE\n),\nFINAL AS (\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _unique_key,\n        _INSERTED_TIMESTAMP,\n        'normal' TYPE\n    FROM\n        normal_swaps\n    UNION ALL\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _unique_key,\n        _INSERTED_TIMESTAMP,\n        'other' TYPE\n    FROM\n        odd_swaps\n)\nSELECT\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    CASE\n        WHEN af.decimals > 0 THEN A.swap_from_amount / pow(\n            10,\n            af.decimals\n        )\n        ELSE A.swap_from_amount\n    END :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    CASE\n        WHEN ato.decimals > 0 THEN A.swap_to_amount / pow(\n            10,\n            ato.decimals\n        )\n        ELSE A.swap_to_amount\n    END :: FLOAT AS swap_to_amount,\n    _unique_key,\n    A._INSERTED_TIMESTAMP,\n    TYPE\nFROM\n    FINAL A\n    LEFT JOIN {{ ref('silver__asset') }}\n    af\n    ON af.asset_id = A.swap_from_asset_id\n    LEFT JOIN {{ ref('silver__asset') }}\n    ato\n    ON ato.asset_id = A.swap_to_asset_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_INSERTED_TIMESTAMP::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_humble_swap_dex"], "unique_id": "model.algorand_models.silver__swaps_humble_swap_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_humble_swap_dex.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.sql", "name": "silver__swaps_humble_swap_dex", "alias": "swaps_humble_swap_dex", "checksum": {"name": "sha256", "checksum": "4c8186b790d9d57f81e6bb48789e99f83f5633719d393c70c30c1145e28089a8"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_humble_swap_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_INSERTED_TIMESTAMP::DATE"]}, "created_at": 1667512711.736129, "compiled_sql": "\n\nWITH appl AS (\n\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.sender AS swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction A\n    WHERE\n        A.tx_type = 'appl'\n        AND A.block_id >= 20550530\n        AND TRY_BASE64_DECODE_STRING(\n            A.tx_message :txn :note :: STRING\n        ) = 'Reach 0.1.10'\n        AND TO_ARRAY(\n            BASE64_DECODE_BINARY(\n                A.tx_message :txn :apaa [1] :: STRING\n            )\n        ) [0] = '03'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_humble_swap_dex\n) - INTERVAL '4 HOURS'\n\n),\ntrans AS (\n    SELECT\n        A.tx_group_id,\n        A.tx_id,\n        COALESCE(\n            A.asset_sender,\n            A.sender\n        ) AS asset_sender,\n        A.asset_id,\n        COALESCE(\n            A.amount,\n            A.asset_amount\n        ) AS amount,\n        COALESCE(\n            A.asset_receiver,\n            receiver\n        ) AS asset_receiver\n    FROM\n        ALGORAND_DEV.silver.transaction A\n    WHERE\n        tx_type IN (\n            'pay',\n            'axfer'\n        )\n        AND A.block_id >= 20550530\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_humble_swap_dex\n) - INTERVAL '4 HOURS'\n\n),\nhs_tx_group_ids AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        appl A\n        JOIN trans b\n        ON b.tx_group_id = A.tx_group_id\n    GROUP BY\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    HAVING\n        COUNT(1) = 2\n),\nhs_transfers AS(\n    SELECT\n        A.tx_group_id,\n        A.asset_sender,\n        A.asset_id,\n        A.amount,\n        A.asset_receiver,\n        CASE\n            WHEN asset_sender <> b.swapper THEN asset_sender\n        END AS pool_address\n    FROM\n        trans A\n        JOIN hs_tx_group_ids b\n        ON A.tx_group_id = b.tx_group_id\n),\nnormal_swaps AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        b.asset_id AS swap_from_asset_id,\n        b.amount :: FLOAT AS swap_from_amount,\n        C.pool_address,\n        C.asset_id AS swap_to_asset_id,\n        C.amount :: FLOAT AS swap_to_amount,\n        concat_ws(\n            '-',\n            A.block_id :: STRING,\n            A.intra :: STRING\n        ) AS _unique_key,\n        _INSERTED_TIMESTAMP\n    FROM\n        hs_tx_group_ids A\n        JOIN hs_transfers b\n        ON A.tx_group_id = b.tx_group_id\n        AND b.pool_address IS NULL\n        JOIN hs_transfers C\n        ON A.tx_group_id = C.tx_group_id\n        AND C.pool_address IS NOT NULL\n),\nhs_tx_ids AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        A._INSERTED_TIMESTAMP\n    FROM\n        appl A\n        JOIN trans b\n        ON b.tx_id = A.tx_id\n        LEFT JOIN hs_tx_group_ids C\n        ON A.tx_group_id = C.tx_group_id\n    WHERE\n        C.tx_group_id IS NULL\n        AND (\n            b.asset_receiver IN (\n                SELECT\n                    pool_address\n                FROM\n                    normal_swaps\n\n\nUNION ALL\nSELECT\n    pool_address\nFROM\n    ALGORAND_DEV.silver.swaps_humble_swap_dex\n\n)\nOR asset_sender IN (\n    SELECT\n        pool_address\n    FROM\n        normal_swaps\n\n\nUNION ALL\nSELECT\n    pool_address\nFROM\n    ALGORAND_DEV.silver.swaps_humble_swap_dex\n\n)\n)\nGROUP BY\n    A.block_id,\n    A.intra,\n    A.tx_group_id,\n    A.tx_id,\n    A.app_id,\n    A.swapper,\n    A._INSERTED_TIMESTAMP\nHAVING\n    COUNT(1) = 2\n),\nodd_hs_transfers AS (\n    SELECT\n        A.tx_group_id,\n        A.tx_id,\n        A.asset_sender,\n        A.asset_id,\n        A.amount,\n        A.asset_receiver,\n        CASE\n            WHEN rec.pool_address IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END rec_is_pool\n    FROM\n        trans A\n        LEFT JOIN hs_tx_ids b\n        ON A.tx_id = b.tx_id\n        LEFT JOIN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                normal_swaps\n\n\nUNION\nSELECT\n    DISTINCT pool_address\nFROM\n    ALGORAND_DEV.silver.swaps_humble_swap_dex\n\n) rec\nON A.asset_receiver = rec.pool_address\nLEFT JOIN (\n    SELECT\n        DISTINCT pool_address\n    FROM\n        normal_swaps\n\n\nUNION\nSELECT\n    DISTINCT pool_address\nFROM\n    ALGORAND_DEV.silver.swaps_humble_swap_dex\n\n) sndr\nON A.asset_sender = sndr.pool_address\nWHERE\n    (\n        rec.pool_address IS NOT NULL\n        OR sndr.pool_address IS NOT NULL\n    )\n),\nodd_swaps AS (\n    SELECT\n        A.block_id,\n        A.intra,\n        A.tx_group_id,\n        A.tx_id,\n        A.app_id,\n        A.swapper,\n        b.asset_id AS swap_from_asset_id,\n        b.amount :: FLOAT AS swap_from_amount,\n        C.asset_sender pool_address,\n        C.asset_id AS swap_to_asset_id,\n        C.amount :: FLOAT AS swap_to_amount,\n        concat_ws(\n            '-',\n            A.block_id :: STRING,\n            A.intra :: STRING\n        ) AS _unique_key,\n        _INSERTED_TIMESTAMP\n    FROM\n        hs_tx_ids A\n        JOIN odd_hs_transfers b\n        ON A.tx_id = b.tx_id\n        AND b.rec_is_pool = TRUE\n        JOIN odd_hs_transfers C\n        ON A.tx_id = C.tx_id\n        AND C.rec_is_pool = FALSE\n),\nFINAL AS (\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _unique_key,\n        _INSERTED_TIMESTAMP,\n        'normal' TYPE\n    FROM\n        normal_swaps\n    UNION ALL\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _unique_key,\n        _INSERTED_TIMESTAMP,\n        'other' TYPE\n    FROM\n        odd_swaps\n)\nSELECT\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    CASE\n        WHEN af.decimals > 0 THEN A.swap_from_amount / pow(\n            10,\n            af.decimals\n        )\n        ELSE A.swap_from_amount\n    END :: FLOAT AS swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    CASE\n        WHEN ato.decimals > 0 THEN A.swap_to_amount / pow(\n            10,\n            ato.decimals\n        )\n        ELSE A.swap_to_amount\n    END :: FLOAT AS swap_to_amount,\n    _unique_key,\n    A._INSERTED_TIMESTAMP,\n    TYPE\nFROM\n    FINAL A\n    LEFT JOIN ALGORAND_DEV.silver.asset\n    af\n    ON af.asset_id = A.swap_from_asset_id\n    LEFT JOIN ALGORAND_DEV.silver.asset\n    ato\n    ON ato.asset_id = A.swap_to_asset_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_humble_swap_dex"}, "model.algorand_models.silver__swaps_pactfi_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge'\n) }}\n\nWITH pact_app_ids AS (\n\n    SELECT\n        DISTINCT tx_message :txn :apid :: NUMBER AS app_id\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        inner_tx = 'FALSE'\n        AND tx_message :dt :itx [0] :txn :type :: STRING = 'acfg'\n        AND tx_message :dt :itx [0] :txn :apar :an :: STRING LIKE '%PACT LP Token'\n        AND tx_message :dt :itx [0] :txn :apar :au :: STRING = 'https://pact.fi/'\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'appl'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        {{ ref('silver__transaction') }}\n        pt\n        JOIN {{ ref('silver__asset') }} A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\npactfi_app AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        sender AS swapper,\n        app_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asa.asset_name :: STRING\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS to_asset_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND asa.decimals > 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                asa.decimals\n            )\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND asa.decimals = 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN {{ ref('silver__asset') }}\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        block_id > 18993713 {# block_timestamp :: DATE > '2022-02-01' #}\n        AND app_id IN (\n            SELECT\n                app_id\n            FROM\n                pact_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) = 'SWAP'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swaps AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        pactfi_app pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swaps AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        CASE\n            WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END AS from_amount,\n        asset_id AS from_asset_id\n    FROM\n        pactfi_app pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swaps AS(\n    SELECT\n        *\n    FROM\n        from_pay_swaps\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swaps\n)\nSELECT\n    pa.block_id,\n    pa.intra,\n    pa.tx_group_id,\n    pa.app_id,\n    fs.swapper,\n    fs.from_asset_id AS swap_from_asset_id,\n    ZEROIFNULL(\n        fs.swap_from_amount\n    ) :: FLOAT AS swap_from_amount,\n    pa.pool_address AS pool_address,\n    pa.to_asset_id AS swap_to_asset_id,\n    ZEROIFNULL(\n        pa.swap_to_amount\n    ) :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        pa.block_id :: STRING,\n        pa.intra :: STRING\n    ) AS _unique_key,\n    pa._INSERTED_TIMESTAMP\nFROM\n    pactfi_app pa\n    LEFT JOIN from_swaps fs\n    ON pa.tx_group_id = fs.tx_group_id\n    AND pa.intra -1 = fs.intra", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_pactfi_dex"], "unique_id": "model.algorand_models.silver__swaps_pactfi_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_pactfi_dex.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.sql", "name": "silver__swaps_pactfi_dex", "alias": "swaps_pactfi_dex", "checksum": {"name": "sha256", "checksum": "d293ea361a22a9728c87f017cd7396d2790d12959138f90060c981b49f90a59c"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_pactfi_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge"}, "created_at": 1667512711.791251, "compiled_sql": "\n\nWITH pact_app_ids AS (\n\n    SELECT\n        DISTINCT tx_message :txn :apid :: NUMBER AS app_id\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        inner_tx = 'FALSE'\n        AND tx_message :dt :itx [0] :txn :type :: STRING = 'acfg'\n        AND tx_message :dt :itx [0] :txn :apar :an :: STRING LIKE '%PACT LP Token'\n        AND tx_message :dt :itx [0] :txn :apar :au :: STRING = 'https://pact.fi/'\n),\ntx_app_call AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'appl'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_pactfi_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_pactfi_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        ALGORAND_DEV.silver.transaction\n        pt\n        JOIN ALGORAND_DEV.silver.asset A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_pactfi_dex\n) - INTERVAL '48 HOURS'\n\n),\npactfi_app AS(\n    SELECT\n        act.block_id,\n        act.intra,\n        act.tx_group_id,\n        act._INSERTED_TIMESTAMP,\n        sender AS swapper,\n        app_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN asa.asset_name :: STRING\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 'ALGO'\n        END AS to_asset_name,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer' THEN tx_message :dt :itx [0] :txn :xaid :: NUMBER\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN 0\n        END AS to_asset_id,\n        CASE\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND asa.decimals > 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT / pow(\n                10,\n                asa.decimals\n            )\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'axfer'\n            AND asa.decimals = 0 THEN tx_message :dt :itx [0] :txn :aamt :: FLOAT\n            WHEN tx_message :dt :itx [0] :txn :type :: STRING = 'pay' THEN tx_message :dt :itx [0] :txn :amt :: FLOAT / pow(\n                10,\n                6\n            )\n        END AS swap_to_amount,\n        algorand_decode_b64_addr(\n            tx_message :dt :itx [0] :txn :snd :: STRING\n        ) AS pool_address\n    FROM\n        tx_app_call act\n        JOIN ALGORAND_DEV.silver.asset\n        asa\n        ON act.tx_message :dt :itx [0] :txn :xaid :: NUMBER = asa.asset_id\n    WHERE\n        block_id > 18993713 \n        AND app_id IN (\n            SELECT\n                app_id\n            FROM\n                pact_app_ids\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) = 'SWAP'\n        AND inner_tx = 'FALSE'\n),\nfrom_pay_swaps AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount,\n        0 AS from_asset_id\n    FROM\n        pactfi_app pa\n        JOIN tx_pay pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.swapper = pt.sender\n        AND pa.intra -1 = pt.intra\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_axfer_swaps AS(\n    SELECT\n        pa.tx_group_id AS tx_group_id,\n        pt.intra,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        CASE\n            WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END AS from_amount,\n        asset_id AS from_asset_id\n    FROM\n        pactfi_app pa\n        JOIN tx_a_tfer pt\n        ON pa.tx_group_id = pt.tx_group_id\n        AND pa.intra -1 = pt.intra\n        AND pa.swapper = pt.sender\n    WHERE\n        pt.inner_tx = 'FALSE'\n),\nfrom_swaps AS(\n    SELECT\n        *\n    FROM\n        from_pay_swaps\n    UNION\n    SELECT\n        *\n    FROM\n        from_axfer_swaps\n)\nSELECT\n    pa.block_id,\n    pa.intra,\n    pa.tx_group_id,\n    pa.app_id,\n    fs.swapper,\n    fs.from_asset_id AS swap_from_asset_id,\n    ZEROIFNULL(\n        fs.swap_from_amount\n    ) :: FLOAT AS swap_from_amount,\n    pa.pool_address AS pool_address,\n    pa.to_asset_id AS swap_to_asset_id,\n    ZEROIFNULL(\n        pa.swap_to_amount\n    ) :: FLOAT AS swap_to_amount,\n    concat_ws(\n        '-',\n        pa.block_id :: STRING,\n        pa.intra :: STRING\n    ) AS _unique_key,\n    pa._INSERTED_TIMESTAMP\nFROM\n    pactfi_app pa\n    LEFT JOIN from_swaps fs\n    ON pa.tx_group_id = fs.tx_group_id\n    AND pa.intra -1 = fs.intra", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_pactfi_dex"}, "model.algorand_models.silver__transaction": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE', 'tx_type'],\n) }}\n\nWITH allTXN AS (\n\n    SELECT\n        intra,\n        ROUND AS block_id,\n        txn :txn :grp :: STRING AS tx_group_id,\n        b.txid :: text AS tx_id,\n        'false' AS inner_tx,\n        CASE\n            WHEN txn :txn :type :: STRING = 'appl' THEN NULL\n            WHEN txn :txn :type :: STRING = 'pay' THEN 0\n            ELSE asset\n        END AS asset_id,\n        txn :txn :snd :: text AS sender,\n        txn :txn :fee / pow(\n            10,\n            6\n        ) AS fee,\n        txn :txn :type :: STRING AS tx_type,\n        txn :txn :gh :: STRING AS genesis_hash,\n        txn AS tx_message,\n        extra,\n        __HEVO__LOADED_AT,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__transaction') }}\n        b\n    WHERE\n        txid IS NOT NULL\n),\ninnertx AS (\n    SELECT\n        b.intra + ROW_NUMBER() over(\n            PARTITION BY txid\n            ORDER BY\n                path\n        ) AS intra,\n        b.round AS block_id,\n        txn :txn :grp :: STRING AS tx_group_id,\n        b.txid :: text AS tx_id,\n        'TRUE' AS inner_tx,\n        CASE\n            WHEN VALUE :txn :type :: STRING = 'appl' THEN NULL\n            WHEN VALUE :txn :type :: STRING = 'pay' THEN 0\n            WHEN VALUE :txn :type :: STRING = 'afrz' THEN VALUE :txn :faid :: NUMBER\n            WHEN VALUE :txn :type :: STRING = 'acfg' THEN COALESCE(\n                VALUE :txn :caid :: NUMBER,\n                VALUE :caid :: NUMBER\n            )\n            ELSE VALUE :txn :xaid :: STRING\n        END AS asset_id,\n        VALUE :txn :snd :: text AS sender,\n        CASE\n            WHEN VALUE :txn :fee IS NULL THEN 0\n            ELSE VALUE :txn :fee / pow(\n                10,\n                6\n            )\n        END AS fee,\n        VALUE :txn :type :: STRING AS tx_type,\n        txn :txn :gh :: STRING AS genesis_hash,\n        VALUE AS tx_message,\n        extra,\n        __HEVO__LOADED_AT,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__transaction') }}\n        b,\n        LATERAL FLATTEN(\n            input => txn :dt :itx,\n            recursive => TRUE\n        ) f\n    WHERE\n        txn :dt :itx IS NOT NULL\n        AND txid IS NOT NULL\n        AND VALUE :txn :type IS NOT NULL\n),\nuniontxn AS(\n    SELECT\n        *\n    FROM\n        allTXN\n    UNION\n    SELECT\n        *\n    FROM\n        innertx\n)\nSELECT\n    b.intra,\n    b.block_id,\n    tx_group_id,\n    HEX_DECODE_STRING(\n        tx_id\n    ) AS tx_id,\n    TO_BOOLEAN(inner_tx) AS inner_tx,\n    asset_id :: NUMBER AS asset_id,\n    algorand_decode_b64_addr(\n        sender\n    ) AS sender,\n    ZEROIFNULL(fee) AS fee,\n    b.tx_type,\n    tx_message,\n    extra,\n    COALESCE(\n        tx_message :txn :apid,\n        tx_message :apid,\n        tx_message :\"dt\" :\"gd\" :\"aWQ=\" :\"ui\"\n    ) app_id,\n    tx_message :txn :apar :t AS asset_supply,\n    tx_message :txn :apar AS asset_parameters,\n    tx_message :txn :fadd :: text AS asset_address,\n    tx_message :txn :afrz AS asset_freeze,\n    algorand_decode_b64_addr(\n        tx_message :txn :votekey :: text\n    ) AS participation_key,\n    algorand_decode_b64_addr(\n        tx_message :txn :selkey :: text\n    ) AS vrf_public_key,\n    tx_message :txn :votefst AS vote_first,\n    tx_message :txn :votelst AS vote_last,\n    tx_message :txn :votekd AS vote_keydilution,\n    algorand_decode_b64_addr(\n        tx_message :txn :rcv :: text\n    ) AS receiver,\n    algorand_decode_b64_addr(\n        tx_message :txn :asnd :: text\n    ) AS asset_sender,\n    algorand_decode_b64_addr(\n        tx_message :txn :arcv :: text\n    ) AS asset_receiver,\n    tx_message :txn :aamt AS asset_amount,\n    tx_message :txn :xaid AS asset_transferred,\n    tx_message :txn :amt AS amount,\n    concat_ws(\n        '-',\n        b.block_id :: STRING,\n        b.intra :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    uniontxn b\n\n{% if is_incremental() %}\nWHERE\n    b._inserted_timestamp >= (\n        (\n            SELECT\n                MAX(\n                    _inserted_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.bronze__transaction", "model.algorand_models.bronze__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE", "tx_type"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__transaction"], "unique_id": "model.algorand_models.silver__transaction", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__transaction.sql", "original_file_path": "models/silver/silver__transaction.sql", "name": "silver__transaction", "alias": "transaction", "checksum": {"name": "sha256", "checksum": "4d8542e55bd9a78dd969b1b64f890fb67e29ae495d40350709cddd6b9f2be3c9"}, "tags": [], "refs": [["bronze__transaction"], ["bronze__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_MESSAGE": {"name": "TX_MESSAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__transaction.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE", "tx_type"]}, "created_at": 1667512711.806274, "compiled_sql": "\n\nWITH allTXN AS (\n\n    SELECT\n        intra,\n        ROUND AS block_id,\n        txn :txn :grp :: STRING AS tx_group_id,\n        b.txid :: text AS tx_id,\n        'false' AS inner_tx,\n        CASE\n            WHEN txn :txn :type :: STRING = 'appl' THEN NULL\n            WHEN txn :txn :type :: STRING = 'pay' THEN 0\n            ELSE asset\n        END AS asset_id,\n        txn :txn :snd :: text AS sender,\n        txn :txn :fee / pow(\n            10,\n            6\n        ) AS fee,\n        txn :txn :type :: STRING AS tx_type,\n        txn :txn :gh :: STRING AS genesis_hash,\n        txn AS tx_message,\n        extra,\n        __HEVO__LOADED_AT,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.bronze.transaction\n        b\n    WHERE\n        txid IS NOT NULL\n),\ninnertx AS (\n    SELECT\n        b.intra + ROW_NUMBER() over(\n            PARTITION BY txid\n            ORDER BY\n                path\n        ) AS intra,\n        b.round AS block_id,\n        txn :txn :grp :: STRING AS tx_group_id,\n        b.txid :: text AS tx_id,\n        'TRUE' AS inner_tx,\n        CASE\n            WHEN VALUE :txn :type :: STRING = 'appl' THEN NULL\n            WHEN VALUE :txn :type :: STRING = 'pay' THEN 0\n            WHEN VALUE :txn :type :: STRING = 'afrz' THEN VALUE :txn :faid :: NUMBER\n            WHEN VALUE :txn :type :: STRING = 'acfg' THEN COALESCE(\n                VALUE :txn :caid :: NUMBER,\n                VALUE :caid :: NUMBER\n            )\n            ELSE VALUE :txn :xaid :: STRING\n        END AS asset_id,\n        VALUE :txn :snd :: text AS sender,\n        CASE\n            WHEN VALUE :txn :fee IS NULL THEN 0\n            ELSE VALUE :txn :fee / pow(\n                10,\n                6\n            )\n        END AS fee,\n        VALUE :txn :type :: STRING AS tx_type,\n        txn :txn :gh :: STRING AS genesis_hash,\n        VALUE AS tx_message,\n        extra,\n        __HEVO__LOADED_AT,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.bronze.transaction\n        b,\n        LATERAL FLATTEN(\n            input => txn :dt :itx,\n            recursive => TRUE\n        ) f\n    WHERE\n        txn :dt :itx IS NOT NULL\n        AND txid IS NOT NULL\n        AND VALUE :txn :type IS NOT NULL\n),\nuniontxn AS(\n    SELECT\n        *\n    FROM\n        allTXN\n    UNION\n    SELECT\n        *\n    FROM\n        innertx\n)\nSELECT\n    b.intra,\n    b.block_id,\n    tx_group_id,\n    HEX_DECODE_STRING(\n        tx_id\n    ) AS tx_id,\n    TO_BOOLEAN(inner_tx) AS inner_tx,\n    asset_id :: NUMBER AS asset_id,\n    algorand_decode_b64_addr(\n        sender\n    ) AS sender,\n    ZEROIFNULL(fee) AS fee,\n    b.tx_type,\n    tx_message,\n    extra,\n    COALESCE(\n        tx_message :txn :apid,\n        tx_message :apid,\n        tx_message :\"dt\" :\"gd\" :\"aWQ=\" :\"ui\"\n    ) app_id,\n    tx_message :txn :apar :t AS asset_supply,\n    tx_message :txn :apar AS asset_parameters,\n    tx_message :txn :fadd :: text AS asset_address,\n    tx_message :txn :afrz AS asset_freeze,\n    algorand_decode_b64_addr(\n        tx_message :txn :votekey :: text\n    ) AS participation_key,\n    algorand_decode_b64_addr(\n        tx_message :txn :selkey :: text\n    ) AS vrf_public_key,\n    tx_message :txn :votefst AS vote_first,\n    tx_message :txn :votelst AS vote_last,\n    tx_message :txn :votekd AS vote_keydilution,\n    algorand_decode_b64_addr(\n        tx_message :txn :rcv :: text\n    ) AS receiver,\n    algorand_decode_b64_addr(\n        tx_message :txn :asnd :: text\n    ) AS asset_sender,\n    algorand_decode_b64_addr(\n        tx_message :txn :arcv :: text\n    ) AS asset_receiver,\n    tx_message :txn :aamt AS asset_amount,\n    tx_message :txn :xaid AS asset_transferred,\n    tx_message :txn :amt AS amount,\n    concat_ws(\n        '-',\n        b.block_id :: STRING,\n        b.intra :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    uniontxn b\n\n\nWHERE\n    b._inserted_timestamp >= (\n        (\n            SELECT\n                MAX(\n                    _inserted_timestamp\n                )\n            FROM\n                ALGORAND_DEV.silver.transaction\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.transaction"}, "model.algorand_models.silver__price_swap": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['block_hour']\n) }}\n\nWITH swaps AS (\n\n    SELECT\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ) AS block_hour,\n        swap_from_asset_id,\n        swap_from_amount,\n        swap_to_asset_id,\n        swap_to_amount,\n        swap_program AS dex\n    FROM\n        {{ ref('silver__swap') }} A\n        JOIN {{ ref('silver__block') }}\n        b\n        ON A.block_id = b.block_id\n    WHERE\n        swap_from_amount > 0\n        AND swap_to_amount > 0 qualify(RANK() over(\n    ORDER BY\n        block_hour DESC)) <> 1\n),\nswap_range AS (\n    SELECT\n        MIN(\n            block_hour\n        ) min_date,\n        MAX(\n            block_hour\n        ) max_date\n    FROM\n        swaps\n),\nusd AS (\n    SELECT\n        block_hour,\n        swap_from_asset_id AS from_asset_id,\n        swap_from_amount AS from_amt,CASE\n            WHEN swap_from_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE swap_to_amount / NULLIF(\n                swap_from_amount,\n                0\n            )\n        END AS from_usd,\n        swap_to_asset_id AS to_asset_id,\n        swap_to_amount AS to_amt,CASE\n            WHEN swap_to_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE swap_from_amount / NULLIF(\n                swap_to_amount,\n                0\n            )\n        END AS to_usd,\n        dex\n    FROM\n        swaps A\n),\nusd_2 AS (\n    SELECT\n        block_hour,\n        from_asset_id asset_id,\n        from_usd price\n    FROM\n        usd\n    WHERE\n        to_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        to_usd\n    FROM\n        usd\n    WHERE\n        from_asset_id IN (\n            '31566704',\n            '312769'\n        )\n),\nusd_3 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        STDDEV(\n            price\n        ) over (\n            PARTITION BY asset_id,\n            block_hour\n        ) stddev_price\n    FROM\n        usd_2\n    WHERE\n        asset_ID = '0'\n),\nusd_4 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        stddev_price,\n        CASE\n            WHEN ABS(price - AVG(price) over(PARTITION BY asset_ID, block_hour)) > stddev_price * 2 THEN TRUE\n            ELSE FALSE\n        END exclude_from_pricing,\n        AVG(price) over(\n            PARTITION BY asset_ID,\n            block_hour\n        ) avg_price\n    FROM\n        usd_3\n),\nalgo_price_hour AS (\n    SELECT\n        block_hour,\n        AVG(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN price\n            END\n        ) price\n    FROM\n        usd_4\n    GROUP BY\n        block_hour\n),\nalgo AS (\n    SELECT\n        A.block_hour,\n        swap_from_asset_id AS from_asset_id,\n        swap_from_amount AS from_amt,CASE\n            WHEN swap_to_asset_id = '0' THEN (\n                swap_to_amount * prices.price\n            ) / NULLIF(\n                swap_from_amount,\n                0\n            )\n        END AS from_usd,\n        swap_to_asset_id AS to_asset_id,\n        swap_to_amount AS to_amt,CASE\n            WHEN swap_from_asset_id = '0' THEN (\n                swap_from_amount * prices.price\n            ) / NULLIF(\n                swap_to_amount,\n                0\n            )\n        END AS to_usd,\n        dex\n    FROM\n        swaps A\n        LEFT JOIN algo_price_hour prices\n        ON A.block_hour = prices.block_hour\n    WHERE\n        (\n            A.swap_from_asset_id = '0'\n            OR A.swap_to_asset_id = '0'\n        )\n        AND NOT (\n            A.swap_from_asset_id = '0'\n            AND A.swap_to_asset_id = '0'\n        )\n),\ncombo_1 AS (\n    SELECT\n        block_hour,\n        from_asset_id asset_id,\n        from_usd price,\n        dex,\n        from_amt amt\n    FROM\n        usd\n    WHERE\n        to_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        to_usd,\n        dex,\n        to_amt amt\n    FROM\n        usd\n    WHERE\n        from_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        CASE\n            WHEN to_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE to_usd\n        END to_usd,\n        dex,\n        to_amt amt\n    FROM\n        algo\n    WHERE\n        from_asset_id = '0'\n    UNION ALL\n    SELECT\n        block_hour,\n        from_asset_id,\n        CASE\n            WHEN from_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE from_usd\n        END from_usd,\n        dex,\n        from_amt amt\n    FROM\n        algo\n    WHERE\n        to_asset_id = '0'\n),\ncombo_2 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        MEDIAN(\n            price\n        ) over (\n            PARTITION BY asset_id,\n            block_hour\n        ) stddev_price,\n        dex,\n        amt\n    FROM\n        combo_1\n),\ncombo_3 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        stddev_price,\n        CASE\n            WHEN ABS(\n                price - stddev_price\n            ) > stddev_price * 2 THEN TRUE\n            ELSE FALSE\n        END exclude_from_pricing,\n        AVG(price) over(\n            PARTITION BY asset_ID,\n            block_hour\n        ) avg_price,\n        dex,\n        amt\n    FROM\n        combo_2\n),\nfinal_dex AS (\n    SELECT\n        block_hour,\n        block_hour :: DATE AS block_date,\n        asset_id,\n        dex,\n        AVG(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN price\n            END\n        ) avg_price_usd_hour_excludes,\n        MIN(\n            price\n        ) min_price_usd_hour,\n        MAX(\n            price\n        ) max_price_usd_hour,\n        MAX(\n            price\n        ) - MIN(\n            price\n        ) AS volatility_measure,\n        SUM(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN 1\n            END\n        ) swaps_in_hour_excludes,\n        COUNT(1) AS swaps_in_hour,\n        SUM(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN amt\n            END\n        ) total_amt_excludes,\n        SUM(amt) AS total_amt\n    FROM\n        combo_3\n    GROUP BY\n        block_hour,\n        block_hour :: DATE,\n        asset_id,\n        dex\n),\nweights AS (\n    SELECT\n        dex,\n        asset_id,\n        block_date,\n        total_amt_excludes / SUM(total_amt_excludes) over(\n            PARTITION BY asset_id,\n            block_date\n        ) vol_weight,\n        swaps_in_day_excludes / SUM(swaps_in_day_excludes) over(\n            PARTITION BY asset_id,\n            block_date\n        ) swaps_weight\n    FROM\n        (\n            SELECT\n                dex,\n                asset_id,\n                block_hour :: DATE block_date,\n                SUM(total_amt_excludes) total_amt_excludes,\n                SUM(swaps_in_hour_excludes) swaps_in_day_excludes\n            FROM\n                final_dex\n            GROUP BY\n                dex,\n                asset_id,\n                block_hour :: DATE\n        ) z\n),\nignore_weights AS (\n    SELECT\n        A.block_hour,\n        A.asset_ID\n    FROM\n        (\n            SELECT\n                block_hour,\n                block_date,\n                asset_id,\n                SUM(swaps_in_hour) tx_count,\n                COUNT(\n                    DISTINCT dex\n                ) dex_count_final\n            FROM\n                final_dex\n            GROUP BY\n                block_hour,\n                block_date,\n                asset_id\n        ) A\n        LEFT JOIN (\n            SELECT\n                block_date,\n                asset_id,\n                COUNT(1) dex_count_weight\n            FROM\n                weights\n            GROUP BY\n                block_date,\n                asset_id\n        ) b\n        ON A.asset_ID = b.asset_id\n        AND DATEADD(\n            'day',\n            -1,\n            A.block_date\n        ) = b.block_date\n    WHERE\n        (\n            tx_count < 20\n            OR A.dex_count_final < 4\n        )\n),\nFINAL AS (\n    SELECT\n        A.block_hour,\n        A.asset_id,\n        MIN(min_price_usd_hour) AS min_price_usd_hour,\n        MAX(max_price_usd_hour) AS max_price_usd_hour,\n        MAX(max_price_usd_hour) - MIN(min_price_usd_hour) AS volatility_measure,\n        SUM(swaps_in_hour) AS swaps_in_hour,\n        SUM(total_amt) AS volume_in_hour,\n        SUM(\n            avg_price_usd_hour_excludes * CASE\n                WHEN C.asset_ID IS NULL THEN vol_weight\n                ELSE current_hour_weight\n            END\n        ) price\n    FROM\n        (\n            SELECT\n                block_hour,\n                block_date,\n                asset_id,\n                dex,\n                avg_price_usd_hour_excludes,\n                min_price_usd_hour,\n                max_price_usd_hour,\n                volatility_measure,\n                swaps_in_hour,\n                total_amt,\n                swaps_in_hour * 1.00 / SUM(swaps_in_hour) over(\n                    PARTITION BY block_hour,\n                    asset_id\n                ) current_hour_weight\n            FROM\n                final_dex\n        ) A\n        LEFT JOIN weights b\n        ON A.asset_ID = b.asset_id\n        AND A.dex = b.dex\n        AND DATEADD(\n            'day',\n            -1,\n            A.block_date\n        ) = b.block_date\n        LEFT JOIN ignore_weights C\n        ON A.asset_ID = C.asset_id\n        AND A.block_hour = C.block_hour\n    GROUP BY\n        A.block_hour,\n        A.asset_id,\n        C.asset_ID\n),\nfill_in_the_blanks_temp AS (\n    SELECT\n        A.hour AS block_hour,\n        b.asset_id,\n        C.price,\n        C.min_price_usd_hour,\n        C.max_price_usd_hour,\n        C.volatility_measure,\n        C.swaps_in_hour,\n        C.volume_in_hour\n    FROM\n        (\n            SELECT\n                HOUR\n            FROM\n                {{ source(\n                    'shared',\n                    'hours'\n                ) }} A\n                JOIN swap_range b\n                ON A.hour BETWEEN b.min_date\n                AND max_date\n        ) A\n        CROSS JOIN (\n            SELECT\n                DISTINCT asset_id\n            FROM\n                FINAL\n        ) b\n        LEFT JOIN (\n            SELECT\n                *\n            FROM\n                FINAL\n        ) C\n        ON A.hour = C.block_hour\n        AND b.asset_ID = C.asset_ID\n)\nSELECT\n    block_hour,\n    A.asset_id,\n    LAST_VALUE(\n        price ignore nulls\n    ) over(\n        PARTITION BY A.asset_id\n        ORDER BY\n            block_hour ASC rows unbounded preceding\n    ) AS price_usd,\n    min_price_usd_hour,\n    max_price_usd_hour,\n    volatility_measure,\n    swaps_in_hour,\n    volume_in_hour * price AS volume_usd_in_hour,\n    concat_ws(\n        '-',\n        block_hour,\n        A.asset_id\n    ) _unique_key\nFROM\n    fill_in_the_blanks_temp A\n    JOIN {{ ref('silver__asset') }}\n    b\n    ON A.asset_id = b.asset_id qualify(LAST_VALUE(price ignore nulls) over(PARTITION BY A.asset_id\nORDER BY\n    block_hour ASC rows unbounded preceding)) IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.algorand_models.shared.hours", "model.algorand_models.silver__swap", "model.algorand_models.silver__block", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_hour"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__price_swap"], "unique_id": "model.algorand_models.silver__price_swap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__price_swap.sql", "original_file_path": "models/silver/silver__price_swap.sql", "name": "silver__price_swap", "alias": "price_swap", "checksum": {"name": "sha256", "checksum": "293a9a56fc93d832ad6288aba4804482c637820fec343470623e899f8a92e432"}, "tags": [], "refs": [["silver__swap"], ["silver__block"], ["silver__asset"]], "sources": [["shared", "hours"]], "metrics": [], "description": "", "columns": {"BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The price of the asset in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_price_usd_hour": {"name": "min_price_usd_hour", "description": "The lowest price found in the hour in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_price_usd_hour": {"name": "max_price_usd_hour", "description": "The highest price found in the hour in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volatility_measure": {"name": "volatility_measure", "description": "The difference between the min and max price for the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swaps_in_hour": {"name": "swaps_in_hour", "description": "The number of swap transactions in the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd_in_hour": {"name": "volume_usd_in_hour", "description": "The volumne of swap transactions (in USD) in the hour", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__price_swap.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_hour"]}, "created_at": 1667512711.813909, "compiled_sql": "\n\nWITH swaps AS (\n\n    SELECT\n        DATE_TRUNC(\n            'HOUR',\n            block_timestamp\n        ) AS block_hour,\n        swap_from_asset_id,\n        swap_from_amount,\n        swap_to_asset_id,\n        swap_to_amount,\n        swap_program AS dex\n    FROM\n        ALGORAND_DEV.silver.swap A\n        JOIN ALGORAND_DEV.silver.block\n        b\n        ON A.block_id = b.block_id\n    WHERE\n        swap_from_amount > 0\n        AND swap_to_amount > 0 qualify(RANK() over(\n    ORDER BY\n        block_hour DESC)) <> 1\n),\nswap_range AS (\n    SELECT\n        MIN(\n            block_hour\n        ) min_date,\n        MAX(\n            block_hour\n        ) max_date\n    FROM\n        swaps\n),\nusd AS (\n    SELECT\n        block_hour,\n        swap_from_asset_id AS from_asset_id,\n        swap_from_amount AS from_amt,CASE\n            WHEN swap_from_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE swap_to_amount / NULLIF(\n                swap_from_amount,\n                0\n            )\n        END AS from_usd,\n        swap_to_asset_id AS to_asset_id,\n        swap_to_amount AS to_amt,CASE\n            WHEN swap_to_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE swap_from_amount / NULLIF(\n                swap_to_amount,\n                0\n            )\n        END AS to_usd,\n        dex\n    FROM\n        swaps A\n),\nusd_2 AS (\n    SELECT\n        block_hour,\n        from_asset_id asset_id,\n        from_usd price\n    FROM\n        usd\n    WHERE\n        to_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        to_usd\n    FROM\n        usd\n    WHERE\n        from_asset_id IN (\n            '31566704',\n            '312769'\n        )\n),\nusd_3 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        STDDEV(\n            price\n        ) over (\n            PARTITION BY asset_id,\n            block_hour\n        ) stddev_price\n    FROM\n        usd_2\n    WHERE\n        asset_ID = '0'\n),\nusd_4 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        stddev_price,\n        CASE\n            WHEN ABS(price - AVG(price) over(PARTITION BY asset_ID, block_hour)) > stddev_price * 2 THEN TRUE\n            ELSE FALSE\n        END exclude_from_pricing,\n        AVG(price) over(\n            PARTITION BY asset_ID,\n            block_hour\n        ) avg_price\n    FROM\n        usd_3\n),\nalgo_price_hour AS (\n    SELECT\n        block_hour,\n        AVG(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN price\n            END\n        ) price\n    FROM\n        usd_4\n    GROUP BY\n        block_hour\n),\nalgo AS (\n    SELECT\n        A.block_hour,\n        swap_from_asset_id AS from_asset_id,\n        swap_from_amount AS from_amt,CASE\n            WHEN swap_to_asset_id = '0' THEN (\n                swap_to_amount * prices.price\n            ) / NULLIF(\n                swap_from_amount,\n                0\n            )\n        END AS from_usd,\n        swap_to_asset_id AS to_asset_id,\n        swap_to_amount AS to_amt,CASE\n            WHEN swap_from_asset_id = '0' THEN (\n                swap_from_amount * prices.price\n            ) / NULLIF(\n                swap_to_amount,\n                0\n            )\n        END AS to_usd,\n        dex\n    FROM\n        swaps A\n        LEFT JOIN algo_price_hour prices\n        ON A.block_hour = prices.block_hour\n    WHERE\n        (\n            A.swap_from_asset_id = '0'\n            OR A.swap_to_asset_id = '0'\n        )\n        AND NOT (\n            A.swap_from_asset_id = '0'\n            AND A.swap_to_asset_id = '0'\n        )\n),\ncombo_1 AS (\n    SELECT\n        block_hour,\n        from_asset_id asset_id,\n        from_usd price,\n        dex,\n        from_amt amt\n    FROM\n        usd\n    WHERE\n        to_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        to_usd,\n        dex,\n        to_amt amt\n    FROM\n        usd\n    WHERE\n        from_asset_id IN (\n            '31566704',\n            '312769'\n        )\n    UNION ALL\n    SELECT\n        block_hour,\n        to_asset_id,\n        CASE\n            WHEN to_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE to_usd\n        END to_usd,\n        dex,\n        to_amt amt\n    FROM\n        algo\n    WHERE\n        from_asset_id = '0'\n    UNION ALL\n    SELECT\n        block_hour,\n        from_asset_id,\n        CASE\n            WHEN from_asset_id IN (\n                '31566704',\n                '312769'\n            ) THEN 1\n            ELSE from_usd\n        END from_usd,\n        dex,\n        from_amt amt\n    FROM\n        algo\n    WHERE\n        to_asset_id = '0'\n),\ncombo_2 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        MEDIAN(\n            price\n        ) over (\n            PARTITION BY asset_id,\n            block_hour\n        ) stddev_price,\n        dex,\n        amt\n    FROM\n        combo_1\n),\ncombo_3 AS (\n    SELECT\n        block_hour,\n        asset_id,\n        price,\n        stddev_price,\n        CASE\n            WHEN ABS(\n                price - stddev_price\n            ) > stddev_price * 2 THEN TRUE\n            ELSE FALSE\n        END exclude_from_pricing,\n        AVG(price) over(\n            PARTITION BY asset_ID,\n            block_hour\n        ) avg_price,\n        dex,\n        amt\n    FROM\n        combo_2\n),\nfinal_dex AS (\n    SELECT\n        block_hour,\n        block_hour :: DATE AS block_date,\n        asset_id,\n        dex,\n        AVG(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN price\n            END\n        ) avg_price_usd_hour_excludes,\n        MIN(\n            price\n        ) min_price_usd_hour,\n        MAX(\n            price\n        ) max_price_usd_hour,\n        MAX(\n            price\n        ) - MIN(\n            price\n        ) AS volatility_measure,\n        SUM(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN 1\n            END\n        ) swaps_in_hour_excludes,\n        COUNT(1) AS swaps_in_hour,\n        SUM(\n            CASE\n                WHEN exclude_from_pricing = FALSE THEN amt\n            END\n        ) total_amt_excludes,\n        SUM(amt) AS total_amt\n    FROM\n        combo_3\n    GROUP BY\n        block_hour,\n        block_hour :: DATE,\n        asset_id,\n        dex\n),\nweights AS (\n    SELECT\n        dex,\n        asset_id,\n        block_date,\n        total_amt_excludes / SUM(total_amt_excludes) over(\n            PARTITION BY asset_id,\n            block_date\n        ) vol_weight,\n        swaps_in_day_excludes / SUM(swaps_in_day_excludes) over(\n            PARTITION BY asset_id,\n            block_date\n        ) swaps_weight\n    FROM\n        (\n            SELECT\n                dex,\n                asset_id,\n                block_hour :: DATE block_date,\n                SUM(total_amt_excludes) total_amt_excludes,\n                SUM(swaps_in_hour_excludes) swaps_in_day_excludes\n            FROM\n                final_dex\n            GROUP BY\n                dex,\n                asset_id,\n                block_hour :: DATE\n        ) z\n),\nignore_weights AS (\n    SELECT\n        A.block_hour,\n        A.asset_ID\n    FROM\n        (\n            SELECT\n                block_hour,\n                block_date,\n                asset_id,\n                SUM(swaps_in_hour) tx_count,\n                COUNT(\n                    DISTINCT dex\n                ) dex_count_final\n            FROM\n                final_dex\n            GROUP BY\n                block_hour,\n                block_date,\n                asset_id\n        ) A\n        LEFT JOIN (\n            SELECT\n                block_date,\n                asset_id,\n                COUNT(1) dex_count_weight\n            FROM\n                weights\n            GROUP BY\n                block_date,\n                asset_id\n        ) b\n        ON A.asset_ID = b.asset_id\n        AND DATEADD(\n            'day',\n            -1,\n            A.block_date\n        ) = b.block_date\n    WHERE\n        (\n            tx_count < 20\n            OR A.dex_count_final < 4\n        )\n),\nFINAL AS (\n    SELECT\n        A.block_hour,\n        A.asset_id,\n        MIN(min_price_usd_hour) AS min_price_usd_hour,\n        MAX(max_price_usd_hour) AS max_price_usd_hour,\n        MAX(max_price_usd_hour) - MIN(min_price_usd_hour) AS volatility_measure,\n        SUM(swaps_in_hour) AS swaps_in_hour,\n        SUM(total_amt) AS volume_in_hour,\n        SUM(\n            avg_price_usd_hour_excludes * CASE\n                WHEN C.asset_ID IS NULL THEN vol_weight\n                ELSE current_hour_weight\n            END\n        ) price\n    FROM\n        (\n            SELECT\n                block_hour,\n                block_date,\n                asset_id,\n                dex,\n                avg_price_usd_hour_excludes,\n                min_price_usd_hour,\n                max_price_usd_hour,\n                volatility_measure,\n                swaps_in_hour,\n                total_amt,\n                swaps_in_hour * 1.00 / SUM(swaps_in_hour) over(\n                    PARTITION BY block_hour,\n                    asset_id\n                ) current_hour_weight\n            FROM\n                final_dex\n        ) A\n        LEFT JOIN weights b\n        ON A.asset_ID = b.asset_id\n        AND A.dex = b.dex\n        AND DATEADD(\n            'day',\n            -1,\n            A.block_date\n        ) = b.block_date\n        LEFT JOIN ignore_weights C\n        ON A.asset_ID = C.asset_id\n        AND A.block_hour = C.block_hour\n    GROUP BY\n        A.block_hour,\n        A.asset_id,\n        C.asset_ID\n),\nfill_in_the_blanks_temp AS (\n    SELECT\n        A.hour AS block_hour,\n        b.asset_id,\n        C.price,\n        C.min_price_usd_hour,\n        C.max_price_usd_hour,\n        C.volatility_measure,\n        C.swaps_in_hour,\n        C.volume_in_hour\n    FROM\n        (\n            SELECT\n                HOUR\n            FROM\n                flipside_prod_db.silver.hours A\n                JOIN swap_range b\n                ON A.hour BETWEEN b.min_date\n                AND max_date\n        ) A\n        CROSS JOIN (\n            SELECT\n                DISTINCT asset_id\n            FROM\n                FINAL\n        ) b\n        LEFT JOIN (\n            SELECT\n                *\n            FROM\n                FINAL\n        ) C\n        ON A.hour = C.block_hour\n        AND b.asset_ID = C.asset_ID\n)\nSELECT\n    block_hour,\n    A.asset_id,\n    LAST_VALUE(\n        price ignore nulls\n    ) over(\n        PARTITION BY A.asset_id\n        ORDER BY\n            block_hour ASC rows unbounded preceding\n    ) AS price_usd,\n    min_price_usd_hour,\n    max_price_usd_hour,\n    volatility_measure,\n    swaps_in_hour,\n    volume_in_hour * price AS volume_usd_in_hour,\n    concat_ws(\n        '-',\n        block_hour,\n        A.asset_id\n    ) _unique_key\nFROM\n    fill_in_the_blanks_temp A\n    JOIN ALGORAND_DEV.silver.asset\n    b\n    ON A.asset_id = b.asset_id qualify(LAST_VALUE(price ignore nulls) over(PARTITION BY A.asset_id\nORDER BY\n    block_hour ASC rows unbounded preceding)) IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.price_swap"}, "model.algorand_models.silver__nft_sales_rand_gallery": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH group_tx AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        COALESCE(\n            asset_sender,\n            sender\n        ) AS asset_sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type IN (\n            'axfer',\n            'pay'\n        )\n        AND receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE' {# AND asset_sender != 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE' #}\n        AND tx_group_ID != '//bQaOEaOkBwSub8XBEk86t4wWdb6F/7fePO4fIXyho='\n        AND tx_group_id IS NOT NULL\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\nGROUP BY\n    block_id,\n    tx_group_id,\n    COALESCE(\n        asset_sender,\n        sender\n    ),\n    _INSERTED_TIMESTAMP\nHAVING\n    COUNT(\n        DISTINCT asset_id\n    ) <= 2\n),\nFINAL AS (\n    SELECT\n        t.block_id AS block_id,\n        t.tx_group_id AS tx_group_id,\n        t.asset_sender AS purchaser,\n        MAX(\n            asset_id\n        ) AS nft_asset_id,\n        SUM(\n            CASE\n                WHEN asset_id <> 0\n                AND t.asset_sender = COALESCE(\n                    snd.asset_receiver,\n                    snd.receiver\n                )\n                AND asset_amount > 0 THEN asset_amount\n                WHEN asset_id <> 0\n                AND t.asset_sender = COALESCE(\n                    asset_receiver,\n                    snd.receiver\n                )\n                AND COALESCE(\n                    asset_amount,\n                    0\n                ) = 0 THEN tx_message :aca :: DECIMAL\n                ELSE 0\n            END\n        ) AS number_of_nfts,\n        SUM(\n            CASE\n                WHEN asset_id = 0 THEN amount\n                ELSE 0\n            END\n        ) AS total_sales_amount,\n        SUM(\n            CASE\n                WHEN asset_id = 0\n                AND receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE' THEN amount\n                ELSE 0\n            END\n        ) AS marketplace_fee,\n        t._INSERTED_TIMESTAMP\n    FROM\n        group_tx t\n        JOIN {{ ref('silver__transaction') }}\n        snd\n        ON t.tx_group_id = snd.tx_group_id\n        AND (\n            t.asset_sender = COALESCE(\n                snd.asset_receiver,\n                snd.receiver\n            )\n            OR t.asset_sender = COALESCE(\n                snd.asset_sender,\n                snd.sender\n            )\n        )\n    WHERE\n        tx_type IN (\n            'axfer',\n            'pay'\n        )\n    GROUP BY\n        t.block_id,\n        t.tx_group_id,\n        t.asset_sender,\n        t._INSERTED_TIMESTAMP\n    HAVING\n        total_sales_amount <> marketplace_fee\n)\nSELECT\n    block_id,\n    A.tx_group_id,\n    purchaser,\n    A.nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        A.tx_group_id :: STRING,\n        A.nft_asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    FINAL A\n    JOIN {{ ref('silver__asset') }}\n    ast\n    ON A.nft_asset_id = ast.asset_id\nWHERE\n    number_of_nfts > 0", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_rand_gallery"], "unique_id": "model.algorand_models.silver__nft_sales_rand_gallery", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_rand_gallery.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.sql", "name": "silver__nft_sales_rand_gallery", "alias": "nft_sales_rand_gallery", "checksum": {"name": "sha256", "checksum": "1a5b7ed9a21926572fd6d4e7d17789fb3cd2fcbc1241fe72b75e7670456bf257"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_rand_gallery.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.831653, "compiled_sql": "\n\nWITH group_tx AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        COALESCE(\n            asset_sender,\n            sender\n        ) AS asset_sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type IN (\n            'axfer',\n            'pay'\n        )\n        AND receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE' \n        AND tx_group_ID != '//bQaOEaOkBwSub8XBEk86t4wWdb6F/7fePO4fIXyho='\n        AND tx_group_id IS NOT NULL\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_rand_gallery\n) - INTERVAL '4 HOURS'\n\nGROUP BY\n    block_id,\n    tx_group_id,\n    COALESCE(\n        asset_sender,\n        sender\n    ),\n    _INSERTED_TIMESTAMP\nHAVING\n    COUNT(\n        DISTINCT asset_id\n    ) <= 2\n),\nFINAL AS (\n    SELECT\n        t.block_id AS block_id,\n        t.tx_group_id AS tx_group_id,\n        t.asset_sender AS purchaser,\n        MAX(\n            asset_id\n        ) AS nft_asset_id,\n        SUM(\n            CASE\n                WHEN asset_id <> 0\n                AND t.asset_sender = COALESCE(\n                    snd.asset_receiver,\n                    snd.receiver\n                )\n                AND asset_amount > 0 THEN asset_amount\n                WHEN asset_id <> 0\n                AND t.asset_sender = COALESCE(\n                    asset_receiver,\n                    snd.receiver\n                )\n                AND COALESCE(\n                    asset_amount,\n                    0\n                ) = 0 THEN tx_message :aca :: DECIMAL\n                ELSE 0\n            END\n        ) AS number_of_nfts,\n        SUM(\n            CASE\n                WHEN asset_id = 0 THEN amount\n                ELSE 0\n            END\n        ) AS total_sales_amount,\n        SUM(\n            CASE\n                WHEN asset_id = 0\n                AND receiver = 'RANDGVRRYGVKI3WSDG6OGTZQ7MHDLIN5RYKJBABL46K5RQVHUFV3NY5DUE' THEN amount\n                ELSE 0\n            END\n        ) AS marketplace_fee,\n        t._INSERTED_TIMESTAMP\n    FROM\n        group_tx t\n        JOIN ALGORAND_DEV.silver.transaction\n        snd\n        ON t.tx_group_id = snd.tx_group_id\n        AND (\n            t.asset_sender = COALESCE(\n                snd.asset_receiver,\n                snd.receiver\n            )\n            OR t.asset_sender = COALESCE(\n                snd.asset_sender,\n                snd.sender\n            )\n        )\n    WHERE\n        tx_type IN (\n            'axfer',\n            'pay'\n        )\n    GROUP BY\n        t.block_id,\n        t.tx_group_id,\n        t.asset_sender,\n        t._INSERTED_TIMESTAMP\n    HAVING\n        total_sales_amount <> marketplace_fee\n)\nSELECT\n    block_id,\n    A.tx_group_id,\n    purchaser,\n    A.nft_asset_id,\n    CASE\n        WHEN decimals > 0 THEN number_of_nfts :: FLOAT / pow(\n            10,\n            decimals\n        )\n        WHEN NULLIF(\n            decimals,\n            0\n        ) IS NULL THEN number_of_nfts :: FLOAT\n    END AS number_of_nfts,\n    total_sales_amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        A.tx_group_id :: STRING,\n        A.nft_asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    FINAL A\n    JOIN ALGORAND_DEV.silver.asset\n    ast\n    ON A.nft_asset_id = ast.asset_id\nWHERE\n    number_of_nfts > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_rand_gallery"}, "model.algorand_models.silver__application": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'app_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nSELECT\n    INDEX AS app_id,\n    algorand_decode_hex_addr(\n        creator :: text\n    ) AS creator_address,\n    deleted AS app_closed,\n    closed_at AS closed_at,\n    created_at AS created_at,\n    params,\n    _inserted_timestamp\nFROM\n    {{ ref('bronze__application') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.bronze__application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "app_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__application"], "unique_id": "model.algorand_models.silver__application", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__application.sql", "original_file_path": "models/silver/silver__application.sql", "name": "silver__application", "alias": "application", "checksum": {"name": "sha256", "checksum": "fed41a26a575164c0d55b90eeb2a323bf183d3d29f7c6585dfe5ae0262475c8a"}, "tags": [], "refs": [["bronze__application"]], "sources": [], "metrics": [], "description": "", "columns": {"APP_ID": {"name": "APP_ID", "description": "ID of the application", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARAMS": {"name": "PARAMS", "description": "Parameters related to the app", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_CLOSED": {"name": "APP_CLOSED", "description": "Whether or not the app is currently deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "Wallet creator account address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp that the app was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Block timestamp that the app was deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__application.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "app_id", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.822678, "compiled_sql": "\n\nSELECT\n    INDEX AS app_id,\n    algorand_decode_hex_addr(\n        creator :: text\n    ) AS creator_address,\n    deleted AS app_closed,\n    closed_at AS closed_at,\n    created_at AS created_at,\n    params,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.bronze.application\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.application\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.application"}, "model.algorand_models.silver__asset_config": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'asset_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nSELECT\n    asset_id,\n    tx_message :txn :apar :an :: STRING AS asset_name,\n    tx_message :txn :apar :t :: NUMBER AS asset_amount,\n    CASE\n        WHEN tx_message :txn :apar :dc :: NUMBER IS NULL THEN 0\n        ELSE tx_message :txn :apar :dc :: NUMBER\n    END AS decimals,\n    MAX(_inserted_timestamp) _inserted_timestamp\nFROM\n    {{ ref('silver__transaction') }}\nWHERE\n    tx_type = 'acfg'\n    AND tx_message :txn :apar :an :: STRING IS NOT NULL\n    AND tx_message :txn :apar :t :: NUMBER IS NOT NULL\n    AND tx_message :txn :apar IS NOT NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n)\n{% endif %}\nGROUP BY\n    asset_id,\n    tx_message :txn :apar :an :: STRING,\n    tx_message :txn :apar :t :: NUMBER,\n    CASE\n        WHEN tx_message :txn :apar :dc :: NUMBER IS NULL THEN 0\n        ELSE tx_message :txn :apar :dc :: NUMBER\n    END qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    MAX(_inserted_timestamp) DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "asset_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__asset_config"], "unique_id": "model.algorand_models.silver__asset_config", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__asset_config.sql", "original_file_path": "models/silver/silver__asset_config.sql", "name": "silver__asset_config", "alias": "asset_config", "checksum": {"name": "sha256", "checksum": "9cde7b8c7798a23d3b9e4ad748a7ac7145e86de72035a51e1f11221f32794787"}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__asset_config.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "asset_id", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.987083, "compiled_sql": "\n\nSELECT\n    asset_id,\n    tx_message :txn :apar :an :: STRING AS asset_name,\n    tx_message :txn :apar :t :: NUMBER AS asset_amount,\n    CASE\n        WHEN tx_message :txn :apar :dc :: NUMBER IS NULL THEN 0\n        ELSE tx_message :txn :apar :dc :: NUMBER\n    END AS decimals,\n    MAX(_inserted_timestamp) _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.transaction\nWHERE\n    tx_type = 'acfg'\n    AND tx_message :txn :apar :an :: STRING IS NOT NULL\n    AND tx_message :txn :apar :t :: NUMBER IS NOT NULL\n    AND tx_message :txn :apar IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.asset_config\n    )\n)\n\nGROUP BY\n    asset_id,\n    tx_message :txn :apar :an :: STRING,\n    tx_message :txn :apar :t :: NUMBER,\n    CASE\n        WHEN tx_message :txn :apar :dc :: NUMBER IS NULL THEN 0\n        ELSE tx_message :txn :apar :dc :: NUMBER\n    END qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    MAX(_inserted_timestamp) DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.asset_config"}, "model.algorand_models.silver__swaps_tinyman_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH tx_app_call AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'appl'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'pay'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        {{ ref('silver__transaction') }}\n        pt\n        JOIN {{ ref('silver__asset') }} A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntinymanapp AS(\n    SELECT\n        algorand_decode_b64_addr(\n            tx_message :txn :apat [0] :: STRING\n        ) AS swapper,\n        tx_group_id AS tx_group_id,\n        _INSERTED_TIMESTAMP,\n        block_id,\n        tx_id,\n        intra AS app_intra,\n        app_id\n    FROM\n        tx_app_call\n    WHERE\n        (\n            app_id = 350338509\n            OR app_id = 552635992\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) = 'swap'\n),\nsender_pay AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        0 AS from_asset_id,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_pay pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.sender = ta.swapper\n        AND pt.intra > ta.app_intra\n),\nsender_asset AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        asset_id AS from_asset_id,\n        CASE\n            WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END AS swap_from_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_a_tfer pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.sender = ta.swapper\n        AND pt.intra > ta.app_intra\n),\nreceiver_pay AS(\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS pool_address,\n        'ALGO' AS to_asset_name,\n        0 AS to_asset_id,\n        ZEROIFNULL(amount) :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_to_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_pay pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.receiver = ta.swapper\n        AND pt.intra > app_intra\n),\nreceiver_asset AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS pool_address,\n        asset_name AS to_asset_name,\n        asset_id AS to_asset_id,\n        CASE\n            WHEN decimals > 0 THEN ZEROIFNULL(\n                asset_amount :: FLOAT / pow(\n                    10,\n                    decimals\n                )\n            )\n            ELSE ZEROIFNULL(\n                asset_amount\n            )\n        END AS swap_to_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_a_tfer pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.asset_receiver = ta.swapper\n        AND pt.intra > app_intra\n),\nall_sender AS (\n    SELECT\n        *\n    FROM\n        sender_pay\n    UNION\n    SELECT\n        *\n    FROM\n        sender_asset\n),\nall_receiver AS(\n    SELECT\n        *\n    FROM\n        receiver_pay\n    UNION\n    SELECT\n        *\n    FROM\n        receiver_asset\n)\nSELECT\n    ta.block_id AS block_id,\n    app_intra AS intra,\n    ta.tx_group_id AS tx_group_id,\n    app_id,\n    als.swapper,\n    als.from_asset_id AS swap_from_asset_id,\n    als.swap_from_amount :: FLOAT AS swap_from_amount,\n    ars.pool_address AS pool_address,\n    ars.to_asset_id :: FLOAT AS swap_to_asset_id,\n    ars.swap_to_amount AS swap_to_amount,\n    concat_ws(\n        '-',\n        ta.block_id :: STRING,\n        app_intra :: STRING\n    ) AS _unique_key,\n    ta._INSERTED_TIMESTAMP\nFROM\n    tinymanapp ta\n    JOIN all_sender als\n    ON ta.tx_group_id = als.tx_group_id\n    JOIN all_receiver ars\n    ON ta.tx_group_id = ars.tx_group_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_tinyman_dex"], "unique_id": "model.algorand_models.silver__swaps_tinyman_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_tinyman_dex.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.sql", "name": "silver__swaps_tinyman_dex", "alias": "swaps_tinyman_dex", "checksum": {"name": "sha256", "checksum": "bc8f83305b3abbaf8af7f5d11c19a54d611a9f321f279b597e8d51494946089d"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__transaction"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_tinyman_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512712.0123599, "compiled_sql": "\n\nWITH tx_app_call AS (\n\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'appl'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_tinyman_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_pay AS (\n    SELECT\n        *\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'pay'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_tinyman_dex\n) - INTERVAL '48 HOURS'\n\n),\ntx_a_tfer AS (\n    SELECT\n        pt.*,\n        A.asset_name,\n        A.decimals\n    FROM\n        ALGORAND_DEV.silver.transaction\n        pt\n        JOIN ALGORAND_DEV.silver.asset A\n        ON pt.asset_id = A.asset_id\n    WHERE\n        tx_type = 'axfer'\n\n\nAND pt._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_tinyman_dex\n) - INTERVAL '48 HOURS'\n\n),\ntinymanapp AS(\n    SELECT\n        algorand_decode_b64_addr(\n            tx_message :txn :apat [0] :: STRING\n        ) AS swapper,\n        tx_group_id AS tx_group_id,\n        _INSERTED_TIMESTAMP,\n        block_id,\n        tx_id,\n        intra AS app_intra,\n        app_id\n    FROM\n        tx_app_call\n    WHERE\n        (\n            app_id = 350338509\n            OR app_id = 552635992\n        )\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0] :: STRING\n        ) = 'swap'\n),\nsender_pay AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS swapper,\n        'ALGO' AS from_asset_name,\n        0 AS from_asset_id,\n        amount :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_from_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_pay pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.sender = ta.swapper\n        AND pt.intra > ta.app_intra\n),\nsender_asset AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS swapper,\n        asset_name AS from_asset_name,\n        asset_id AS from_asset_id,\n        CASE\n            WHEN decimals > 0 THEN asset_amount :: FLOAT / pow(\n                10,\n                decimals\n            )\n            ELSE asset_amount :: FLOAT\n        END AS swap_from_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_a_tfer pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.sender = ta.swapper\n        AND pt.intra > ta.app_intra\n),\nreceiver_pay AS(\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS pool_address,\n        'ALGO' AS to_asset_name,\n        0 AS to_asset_id,\n        ZEROIFNULL(amount) :: FLOAT / pow(\n            10,\n            6\n        ) AS swap_to_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_pay pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.receiver = ta.swapper\n        AND pt.intra > app_intra\n),\nreceiver_asset AS (\n    SELECT\n        pt.tx_group_id,\n        pt.sender AS pool_address,\n        asset_name AS to_asset_name,\n        asset_id AS to_asset_id,\n        CASE\n            WHEN decimals > 0 THEN ZEROIFNULL(\n                asset_amount :: FLOAT / pow(\n                    10,\n                    decimals\n                )\n            )\n            ELSE ZEROIFNULL(\n                asset_amount\n            )\n        END AS swap_to_amount\n    FROM\n        tinymanapp ta\n        JOIN tx_a_tfer pt\n        ON pt.tx_group_id = ta.tx_group_id\n        AND pt.asset_receiver = ta.swapper\n        AND pt.intra > app_intra\n),\nall_sender AS (\n    SELECT\n        *\n    FROM\n        sender_pay\n    UNION\n    SELECT\n        *\n    FROM\n        sender_asset\n),\nall_receiver AS(\n    SELECT\n        *\n    FROM\n        receiver_pay\n    UNION\n    SELECT\n        *\n    FROM\n        receiver_asset\n)\nSELECT\n    ta.block_id AS block_id,\n    app_intra AS intra,\n    ta.tx_group_id AS tx_group_id,\n    app_id,\n    als.swapper,\n    als.from_asset_id AS swap_from_asset_id,\n    als.swap_from_amount :: FLOAT AS swap_from_amount,\n    ars.pool_address AS pool_address,\n    ars.to_asset_id :: FLOAT AS swap_to_asset_id,\n    ars.swap_to_amount AS swap_to_amount,\n    concat_ws(\n        '-',\n        ta.block_id :: STRING,\n        app_intra :: STRING\n    ) AS _unique_key,\n    ta._INSERTED_TIMESTAMP\nFROM\n    tinymanapp ta\n    JOIN all_sender als\n    ON ta.tx_group_id = als.tx_group_id\n    JOIN all_receiver ars\n    ON ta.tx_group_id = ars.tx_group_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_tinyman_dex"}, "model.algorand_models.silver__swaps_fxdx_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n    SELECT\n        sender,\n        tx_group_id,\n        tx_message,\n        tx_type,\n        app_id,\n        intra,\n        block_id,\n        asset_id,\n        COALESCE(\n            receiver,\n            asset_receiver\n        ) AS receiver,\n        COALESCE(\n            asset_amount,\n            amount\n        ) AS amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        block_id >= 22226314\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '24 HOURS'\n{% endif %}\n),\napp_call_base AS (\n    SELECT\n        DISTINCT intra,\n        block_id,\n        sender,\n        tx_group_id,\n        app_id,\n        f.value AS sub_app_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        base,\n        TABLE(FLATTEN(tx_message: txn :apfa)) f\n    WHERE\n        tx_type = 'appl'\n        AND app_id = '808867994'\n        AND tx_message :txn :apaa [0] = 'c3dhcA==' --swap\n        AND tx_group_id IS NOT NULL\n),\nsubapps AS (\n    SELECT\n        DISTINCT A.tx_group_id,\n        silver.algorand_decode_b64_addr(\n            f.value\n        ) pool_address,\n        TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0]\n        ) TYPE,\n        tx_message :txn :apas [0] asset_id,\n        b.sub_app_id,\n        A.intra\n    FROM\n        base A,\n        app_call_base b,\n        TABLE(FLATTEN(tx_message: txn :apat)) f\n    WHERE\n        A.tx_group_id = b.tx_group_id\n        AND A.app_id = b.sub_app_id\n        AND tx_type = 'appl'\n        AND b.sender <> silver.algorand_decode_b64_addr(\n            f.value\n        )\n),\nfiltered AS (\n    SELECT\n        DISTINCT b.tx_group_id,\n        A.asset_id,\n        A.sender,\n        A.receiver\n    FROM\n        base A\n        JOIN subapps b\n        ON A.tx_group_id = b.tx_group_id\n        AND (\n            (\n                A.sender = b.pool_address\n                AND b.type = 'swapOut'\n            )\n            OR (\n                A.receiver = b.pool_address\n                AND b.type = 'swapIn'\n            )\n        )\n    WHERE\n        A.tx_type IN (\n            'pay',\n            'axfer'\n        )\n),\nall_rows AS (\n    SELECT\n        DISTINCT A.intra,\n        b.tx_group_id,\n        A.asset_id,\n        A.sender,\n        A.receiver,\n        A.amount\n    FROM\n        base A\n        JOIN (\n            SELECT\n                DISTINCT A.sender addy,\n                A.tx_group_id\n            FROM\n                filtered A\n                LEFT JOIN app_call_base b\n                ON A.tx_group_id = b.tx_group_id\n                AND A.sender = b.sender\n            WHERE\n                b.sender IS NULL\n            UNION\n            SELECT\n                DISTINCT A.receiver,\n                A.tx_group_id\n            FROM\n                filtered A\n                LEFT JOIN app_call_base b\n                ON A.tx_group_id = b.tx_group_id\n                AND A.receiver = b.sender\n            WHERE\n                b.sender IS NULL\n        ) b\n        ON A.tx_group_id = b.tx_group_id\n        AND (\n            A.sender = b.addy\n            OR A.receiver = b.addy\n        )\n    WHERE\n        A.tx_type IN (\n            'pay',\n            'axfer'\n        )\n),\nrankings AS (\n    SELECT\n        ROW_NUMBER() over(\n            PARTITION BY tx_group_id\n            ORDER BY\n                intra\n        ) swap_in_rank,\n        ROW_NUMBER() over(\n            PARTITION BY tx_group_id\n            ORDER BY\n                intra DESC\n        ) swap_out_rank,*\n    FROM\n        all_rows\n),\nfin AS (\n    SELECT\n        tx_group_id,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            amount :: variant\n        ) AS j_amount_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            amount :: variant\n        ) AS j_amount_out,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            asset_id :: variant\n        ) AS j_asset_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            asset_id :: variant\n        ) AS j_asset_out,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            receiver :: variant\n        ) AS j_RECEIVER_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            sender :: variant\n        ) AS j_sender_out,\n        j_amount_in :\"1\" AS swap_from_amount,\n        j_asset_in :\"1\" AS swap_from_asset_id,\n        j_amount_out :\"1\" AS swap_to_amount,\n        j_asset_out :\"1\" AS swap_to_asset_id,\n        CASE\n            WHEN j_amount_in :\"1\" = j_amount_in :\"2\" THEN j_RECEIVER_in :\"2\"\n            WHEN j_amount_out :\"1\" = j_amount_out :\"2\" THEN j_sender_out :\"2\"\n            ELSE j_sender_out :\"1\"\n        END :: STRING AS pool_address,\n        CASE\n            WHEN j_amount_in :\"1\" = j_amount_in :\"2\"\n            AND j_asset_in :\"1\" NOT IN (\n                31566704,\n                312769\n            ) THEN j_RECEIVER_in :\"1\"\n            WHEN j_amount_out :\"1\" = j_amount_out :\"2\"\n            AND j_asset_out :\"1\" NOT IN (\n                31566704,\n                312769\n            ) THEN j_sender_out :\"1\"\n        END :: STRING AS wrapped_pool,\n        CASE\n            WHEN wrapped_pool IS NOT NULL\n            AND j_sender_out :\"1\" <> j_RECEIVER_in :\"1\" THEN j_asset_in :\"2\"\n        END AS wrapped_asset_id\n    FROM\n        rankings\n    GROUP BY\n        tx_group_id\n)\nSELECT\n    b.block_id,\n    b.intra,\n    A.tx_group_id,\n    b.app_id,\n    b.sender AS swapper,\n    A.swap_from_asset_id,\n    A.swap_from_amount,\n    A.pool_address,\n    A.swap_to_asset_id,\n    A.swap_to_amount,\n    A.wrapped_asset_id,\n    A.wrapped_pool,\n    concat_ws(\n        '-',\n        b.block_id :: STRING,\n        b.intra :: STRING\n    ) AS _unique_key,\n    b._inserted_timestamp\nFROM\n    fin A\n    JOIN(\n        SELECT\n            DISTINCT block_id,\n            intra,\n            tx_group_id,\n            app_id,\n            sender,\n            _inserted_timestamp\n        FROM\n            app_call_base\n    ) b\n    ON A.tx_group_id = b.tx_group_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swaps_fxdx_dex"], "unique_id": "model.algorand_models.silver__swaps_fxdx_dex", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swaps_fxdx_dex.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.sql", "name": "silver__swaps_fxdx_dex", "alias": "swaps_fxdx_dex", "checksum": {"name": "sha256", "checksum": "695e19bf0e504cd8599fb90f93087051e8f36f95f35ee93b714afa8b666c9876"}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intra": {"name": "intra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_group_id": {"name": "tx_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_asset_id": {"name": "swap_from_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_from_amount": {"name": "swap_from_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_asset_id": {"name": "swap_to_asset_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swap_to_amount": {"name": "swap_to_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swaps_fxdx_dex.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge"}, "created_at": 1667512711.996654, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        sender,\n        tx_group_id,\n        tx_message,\n        tx_type,\n        app_id,\n        intra,\n        block_id,\n        asset_id,\n        COALESCE(\n            receiver,\n            asset_receiver\n        ) AS receiver,\n        COALESCE(\n            asset_amount,\n            amount\n        ) AS amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        block_id >= 22226314\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.swaps_fxdx_dex\n) - INTERVAL '24 HOURS'\n\n),\napp_call_base AS (\n    SELECT\n        DISTINCT intra,\n        block_id,\n        sender,\n        tx_group_id,\n        app_id,\n        f.value AS sub_app_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        base,\n        TABLE(FLATTEN(tx_message: txn :apfa)) f\n    WHERE\n        tx_type = 'appl'\n        AND app_id = '808867994'\n        AND tx_message :txn :apaa [0] = 'c3dhcA==' --swap\n        AND tx_group_id IS NOT NULL\n),\nsubapps AS (\n    SELECT\n        DISTINCT A.tx_group_id,\n        silver.algorand_decode_b64_addr(\n            f.value\n        ) pool_address,\n        TRY_BASE64_DECODE_STRING(\n            tx_message :txn :apaa [0]\n        ) TYPE,\n        tx_message :txn :apas [0] asset_id,\n        b.sub_app_id,\n        A.intra\n    FROM\n        base A,\n        app_call_base b,\n        TABLE(FLATTEN(tx_message: txn :apat)) f\n    WHERE\n        A.tx_group_id = b.tx_group_id\n        AND A.app_id = b.sub_app_id\n        AND tx_type = 'appl'\n        AND b.sender <> silver.algorand_decode_b64_addr(\n            f.value\n        )\n),\nfiltered AS (\n    SELECT\n        DISTINCT b.tx_group_id,\n        A.asset_id,\n        A.sender,\n        A.receiver\n    FROM\n        base A\n        JOIN subapps b\n        ON A.tx_group_id = b.tx_group_id\n        AND (\n            (\n                A.sender = b.pool_address\n                AND b.type = 'swapOut'\n            )\n            OR (\n                A.receiver = b.pool_address\n                AND b.type = 'swapIn'\n            )\n        )\n    WHERE\n        A.tx_type IN (\n            'pay',\n            'axfer'\n        )\n),\nall_rows AS (\n    SELECT\n        DISTINCT A.intra,\n        b.tx_group_id,\n        A.asset_id,\n        A.sender,\n        A.receiver,\n        A.amount\n    FROM\n        base A\n        JOIN (\n            SELECT\n                DISTINCT A.sender addy,\n                A.tx_group_id\n            FROM\n                filtered A\n                LEFT JOIN app_call_base b\n                ON A.tx_group_id = b.tx_group_id\n                AND A.sender = b.sender\n            WHERE\n                b.sender IS NULL\n            UNION\n            SELECT\n                DISTINCT A.receiver,\n                A.tx_group_id\n            FROM\n                filtered A\n                LEFT JOIN app_call_base b\n                ON A.tx_group_id = b.tx_group_id\n                AND A.receiver = b.sender\n            WHERE\n                b.sender IS NULL\n        ) b\n        ON A.tx_group_id = b.tx_group_id\n        AND (\n            A.sender = b.addy\n            OR A.receiver = b.addy\n        )\n    WHERE\n        A.tx_type IN (\n            'pay',\n            'axfer'\n        )\n),\nrankings AS (\n    SELECT\n        ROW_NUMBER() over(\n            PARTITION BY tx_group_id\n            ORDER BY\n                intra\n        ) swap_in_rank,\n        ROW_NUMBER() over(\n            PARTITION BY tx_group_id\n            ORDER BY\n                intra DESC\n        ) swap_out_rank,*\n    FROM\n        all_rows\n),\nfin AS (\n    SELECT\n        tx_group_id,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            amount :: variant\n        ) AS j_amount_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            amount :: variant\n        ) AS j_amount_out,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            asset_id :: variant\n        ) AS j_asset_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            asset_id :: variant\n        ) AS j_asset_out,\n        OBJECT_AGG(\n            swap_in_rank :: STRING,\n            receiver :: variant\n        ) AS j_RECEIVER_in,\n        OBJECT_AGG(\n            swap_out_rank :: STRING,\n            sender :: variant\n        ) AS j_sender_out,\n        j_amount_in :\"1\" AS swap_from_amount,\n        j_asset_in :\"1\" AS swap_from_asset_id,\n        j_amount_out :\"1\" AS swap_to_amount,\n        j_asset_out :\"1\" AS swap_to_asset_id,\n        CASE\n            WHEN j_amount_in :\"1\" = j_amount_in :\"2\" THEN j_RECEIVER_in :\"2\"\n            WHEN j_amount_out :\"1\" = j_amount_out :\"2\" THEN j_sender_out :\"2\"\n            ELSE j_sender_out :\"1\"\n        END :: STRING AS pool_address,\n        CASE\n            WHEN j_amount_in :\"1\" = j_amount_in :\"2\"\n            AND j_asset_in :\"1\" NOT IN (\n                31566704,\n                312769\n            ) THEN j_RECEIVER_in :\"1\"\n            WHEN j_amount_out :\"1\" = j_amount_out :\"2\"\n            AND j_asset_out :\"1\" NOT IN (\n                31566704,\n                312769\n            ) THEN j_sender_out :\"1\"\n        END :: STRING AS wrapped_pool,\n        CASE\n            WHEN wrapped_pool IS NOT NULL\n            AND j_sender_out :\"1\" <> j_RECEIVER_in :\"1\" THEN j_asset_in :\"2\"\n        END AS wrapped_asset_id\n    FROM\n        rankings\n    GROUP BY\n        tx_group_id\n)\nSELECT\n    b.block_id,\n    b.intra,\n    A.tx_group_id,\n    b.app_id,\n    b.sender AS swapper,\n    A.swap_from_asset_id,\n    A.swap_from_amount,\n    A.pool_address,\n    A.swap_to_asset_id,\n    A.swap_to_amount,\n    A.wrapped_asset_id,\n    A.wrapped_pool,\n    concat_ws(\n        '-',\n        b.block_id :: STRING,\n        b.intra :: STRING\n    ) AS _unique_key,\n    b._inserted_timestamp\nFROM\n    fin A\n    JOIN(\n        SELECT\n            DISTINCT block_id,\n            intra,\n            tx_group_id,\n            app_id,\n            sender,\n            _inserted_timestamp\n        FROM\n            app_call_base\n    ) b\n    ON A.tx_group_id = b.tx_group_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swaps_fxdx_dex"}, "model.algorand_models.silver__swap": {"raw_sql": "{{ config(\n    materialized = 'view',\n    unique_key = '_unique_key'\n) }}\n\nSELECT\n    'tinyman' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_tinyman_dex') }}\nUNION ALL\nSELECT\n    'algofi' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_algofi_dex') }}\nUNION ALL\nSELECT\n    'pactfi' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_pactfi_dex') }}\nUNION ALL\nSELECT\n    'wagmiswap' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_wagmiswap_dex') }}\nUNION ALL\nSELECT\n    'humbleswap' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_humble_swap_dex') }}\nUNION ALL\nSELECT\n    'fxdx' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps_fxdx_dex') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__swap"], "unique_id": "model.algorand_models.silver__swap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__swap.sql", "original_file_path": "models/silver/silver__swap.sql", "name": "silver__swap", "alias": "swap", "checksum": {"name": "sha256", "checksum": "e47e92df0b90c480fafa9d2d5c9a7a0243606be0a84c10e9d962085b72997f5c"}, "tags": [], "refs": [["silver__swaps_tinyman_dex"], ["silver__swaps_algofi_dex"], ["silver__swaps_pactfi_dex"], ["silver__swaps_wagmiswap_dex"], ["silver__swaps_humble_swap_dex"], ["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "view containing swaps from algofi, tinyman, pactfi, and wagmiswap dexes", "columns": {"SWAP_PROGRAM": {"name": "SWAP_PROGRAM", "description": "The DEX or program used to make the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_ID": {"name": "APP_ID", "description": "ID of the application", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_ASSET_ID": {"name": "SWAP_FROM_ASSET_ID", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_AMOUNT": {"name": "SWAP_FROM_AMOUNT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "Address of the pool the swap is coming from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_ASSET_ID": {"name": "SWAP_TO_ASSET_ID", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_AMOUNT": {"name": "SWAP_TO_AMOUNT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__swap.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__swap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "unique_key": "_unique_key"}, "created_at": 1667512711.99399, "compiled_sql": "\n\nSELECT\n    'tinyman' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_tinyman_dex\nUNION ALL\nSELECT\n    'algofi' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_algofi_dex\nUNION ALL\nSELECT\n    'pactfi' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_pactfi_dex\nUNION ALL\nSELECT\n    'wagmiswap' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_wagmiswap_dex\nUNION ALL\nSELECT\n    'humbleswap' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_humble_swap_dex\nUNION ALL\nSELECT\n    'fxdx' AS swap_program,\n    block_id,\n    intra,\n    tx_group_id,\n    app_id,\n    swapper,\n    swap_from_asset_id,\n    swap_from_amount,\n    pool_address,\n    swap_to_asset_id,\n    swap_to_amount,\n    _unique_key,\n    _inserted_timestamp\nFROM\n    ALGORAND_DEV.silver.swaps_fxdx_dex", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.swap"}, "model.algorand_models.silver__price_pool_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['block_hour']\n) }}\n\nWITH lps AS (\n\n    SELECT\n        address\n    FROM\n        {{ ref('silver__pool_addresses') }} C\n    WHERE\n        C.label = 'tinyman'\n        AND label_subtype = 'pool'\n        AND (\n            C.address_name LIKE '%-ALGO %'\n            OR C.address_name LIKE '%ALGO-%'\n        )\n        AND C.address_name NOT ILIKE '%algo fam%'\n        AND C.address_name NOT ILIKE '%smart algo%'\n),\nhourly_prices_with_gaps AS (\n    SELECT\n        HOUR,\n        AVG(price) price\n    FROM\n        (\n            SELECT\n                p.symbol,\n                DATE_TRUNC(\n                    'hour',\n                    recorded_at\n                ) AS HOUR,\n                price\n            FROM\n                {{ source(\n                    'shared',\n                    'prices_v2'\n                ) }}\n                p\n            WHERE\n                asset_id IN ('algorand', '4030')\n\n{% if is_incremental() %}\nAND recorded_at :: DATE >= CURRENT_DATE - 3\n{% else %}\n    AND recorded_at >= '2022-01-01'\n{% endif %}\n\nqualify(ROW_NUMBER() over(PARTITION BY DATE_TRUNC('hour', recorded_at), provider\nORDER BY\n    recorded_at DESC)) = 1\n) x\nGROUP BY\n    HOUR\n),\nhourly_prices AS (\n    SELECT\n        DATE AS HOUR,\n        LAST_VALUE(\n            price ignore nulls\n        ) over(\n            ORDER BY\n                DATE ASC rows unbounded preceding\n        ) AS price\n    FROM\n        (\n            SELECT\n                DISTINCT DATE\n            FROM\n                {{ ref('silver__hourly_pool_balances') }}\n\n{% if is_incremental() %}\nWHERE\n    DATE :: DATE >= CURRENT_DATE - 3\n{% endif %}\n) A\nLEFT JOIN hourly_prices_with_gaps b\nON A.date = b.hour\n),\nexclude AS (\n    SELECT\n        DISTINCT address\n    FROM\n        {{ ref('silver__hourly_pool_balances') }} A\n        JOIN {{ ref('silver__asset') }}\n        d\n        ON A.asset_id = d.asset_ID\n    WHERE\n        COALESCE(\n            asset_url,\n            ''\n        ) = 'https://app.silodefi.com'\n),\nbalances AS (\n    SELECT\n        A.address,\n        A.date,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            balance :: variant\n        ) AS j,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            A.asset_id :: variant\n        ) AS j_2,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            d.asset_name :: variant\n        ) AS j_3,\n        j :algo AS algo_bal,\n        j :other AS other_bal,\n        j_2 :other AS other_asset_id,\n        j_3 :other :: STRING AS other_asset_name\n    FROM\n        {{ ref('silver__hourly_pool_balances') }} A\n        JOIN lps b\n        ON A.address = b.address\n        LEFT JOIN {{ ref('silver__asset') }}\n        d\n        ON A.asset_id = d.asset_ID\n        LEFT JOIN exclude ex\n        ON A.address = ex.address\n    WHERE\n        (\n            (LOWER(asset_name) NOT LIKE '%pool%'\n            AND LOWER(asset_name) NOT LIKE '%lp%')\n            OR A.asset_Id = 0)\n            AND ex.address IS NULL\n\n{% if is_incremental() %}\nAND DATE :: DATE >= CURRENT_DATE - 3\n{% endif %}\nGROUP BY\n    A.address,\n    A.date\n)\nSELECT\n    A.date AS block_hour,\n    other_asset_ID AS asset_id,\n    other_asset_name AS asset_name,\n    CASE\n        WHEN other_bal = 0 THEN 0\n        ELSE (\n            algo_bal * price\n        ) / other_bal\n    END AS price_usd,\n    algo_bal AS algo_balance,\n    other_bal AS non_algo_balance,\n    e.address_name pool_name,\n    A.address pool_address,\n    concat_ws(\n        '-',\n        block_hour,\n        asset_id\n    ) AS _unique_key,\n    price AS _algo_price\nFROM\n    balances A\n    JOIN hourly_prices C\n    ON A.date = C.hour\n    LEFT JOIN {{ ref('silver__pool_addresses') }}\n    e\n    ON A.address = e.address\nWHERE\n    other_asset_ID IS NOT NULL\nUNION ALL\nSELECT\n    HOUR AS block_hour,\n    0 AS asset_id,\n    'ALGO' AS asset_name,\n    price AS price_usd,\n    NULL algo_balance,\n    NULL non_algo_balance,\n    NULL pool_name,\n    NULL pool_address,\n    concat_ws(\n        '-',\n        HOUR,\n        0\n    ) unique_key,\n    price AS _algo_price\nFROM\n    hourly_prices", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.algorand_models.shared.prices_v2", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__asset", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__asset", "model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_hour"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__price_pool_balances"], "unique_id": "model.algorand_models.silver__price_pool_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__price_pool_balances.sql", "original_file_path": "models/silver/silver__price_pool_balances.sql", "name": "silver__price_pool_balances", "alias": "price_pool_balances", "checksum": {"name": "sha256", "checksum": "05510c54d73b4e0f3daddde9f8eee289f1839f51a8285b4702e8d0376d18da1e"}, "tags": [], "refs": [["silver__pool_addresses"], ["silver__hourly_pool_balances"], ["silver__hourly_pool_balances"], ["silver__asset"], ["silver__hourly_pool_balances"], ["silver__asset"], ["silver__pool_addresses"]], "sources": [["shared", "prices_v2"]], "metrics": [], "description": "", "columns": {"BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "The other asset in the pool that is paired with ALGO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "The other asset in the pool that is paired with ALGO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The price of the asset in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALGO_BALANCE": {"name": "ALGO_BALANCE", "description": "The amount of ALGOs in the pool at the end of the block_hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ALGO_BALANCE": {"name": "NON_ALGO_BALANCE", "description": "The amount of other asset in the pool at the end of the block_hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ALGO_PRICE": {"name": "_ALGO_PRICE", "description": "The address of the LP pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__price_pool_balances.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_hour"]}, "created_at": 1667512712.027621, "compiled_sql": "\n\nWITH lps AS (\n\n    SELECT\n        address\n    FROM\n        ALGORAND_DEV.silver.pool_addresses C\n    WHERE\n        C.label = 'tinyman'\n        AND label_subtype = 'pool'\n        AND (\n            C.address_name LIKE '%-ALGO %'\n            OR C.address_name LIKE '%ALGO-%'\n        )\n        AND C.address_name NOT ILIKE '%algo fam%'\n        AND C.address_name NOT ILIKE '%smart algo%'\n),\nhourly_prices_with_gaps AS (\n    SELECT\n        HOUR,\n        AVG(price) price\n    FROM\n        (\n            SELECT\n                p.symbol,\n                DATE_TRUNC(\n                    'hour',\n                    recorded_at\n                ) AS HOUR,\n                price\n            FROM\n                flipside_prod_db.silver.prices_v2\n                p\n            WHERE\n                asset_id IN ('algorand', '4030')\n\n\nAND recorded_at :: DATE >= CURRENT_DATE - 3\n\n\nqualify(ROW_NUMBER() over(PARTITION BY DATE_TRUNC('hour', recorded_at), provider\nORDER BY\n    recorded_at DESC)) = 1\n) x\nGROUP BY\n    HOUR\n),\nhourly_prices AS (\n    SELECT\n        DATE AS HOUR,\n        LAST_VALUE(\n            price ignore nulls\n        ) over(\n            ORDER BY\n                DATE ASC rows unbounded preceding\n        ) AS price\n    FROM\n        (\n            SELECT\n                DISTINCT DATE\n            FROM\n                ALGORAND_DEV.silver.hourly_pool_balances\n\n\nWHERE\n    DATE :: DATE >= CURRENT_DATE - 3\n\n) A\nLEFT JOIN hourly_prices_with_gaps b\nON A.date = b.hour\n),\nexclude AS (\n    SELECT\n        DISTINCT address\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances A\n        JOIN ALGORAND_DEV.silver.asset\n        d\n        ON A.asset_id = d.asset_ID\n    WHERE\n        COALESCE(\n            asset_url,\n            ''\n        ) = 'https://app.silodefi.com'\n),\nbalances AS (\n    SELECT\n        A.address,\n        A.date,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            balance :: variant\n        ) AS j,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            A.asset_id :: variant\n        ) AS j_2,\n        OBJECT_AGG(\n            CASE\n                WHEN A.asset_id = 0 THEN 'algo'\n                ELSE 'other'\n            END,\n            d.asset_name :: variant\n        ) AS j_3,\n        j :algo AS algo_bal,\n        j :other AS other_bal,\n        j_2 :other AS other_asset_id,\n        j_3 :other :: STRING AS other_asset_name\n    FROM\n        ALGORAND_DEV.silver.hourly_pool_balances A\n        JOIN lps b\n        ON A.address = b.address\n        LEFT JOIN ALGORAND_DEV.silver.asset\n        d\n        ON A.asset_id = d.asset_ID\n        LEFT JOIN exclude ex\n        ON A.address = ex.address\n    WHERE\n        (\n            (LOWER(asset_name) NOT LIKE '%pool%'\n            AND LOWER(asset_name) NOT LIKE '%lp%')\n            OR A.asset_Id = 0)\n            AND ex.address IS NULL\n\n\nAND DATE :: DATE >= CURRENT_DATE - 3\n\nGROUP BY\n    A.address,\n    A.date\n)\nSELECT\n    A.date AS block_hour,\n    other_asset_ID AS asset_id,\n    other_asset_name AS asset_name,\n    CASE\n        WHEN other_bal = 0 THEN 0\n        ELSE (\n            algo_bal * price\n        ) / other_bal\n    END AS price_usd,\n    algo_bal AS algo_balance,\n    other_bal AS non_algo_balance,\n    e.address_name pool_name,\n    A.address pool_address,\n    concat_ws(\n        '-',\n        block_hour,\n        asset_id\n    ) AS _unique_key,\n    price AS _algo_price\nFROM\n    balances A\n    JOIN hourly_prices C\n    ON A.date = C.hour\n    LEFT JOIN ALGORAND_DEV.silver.pool_addresses\n    e\n    ON A.address = e.address\nWHERE\n    other_asset_ID IS NOT NULL\nUNION ALL\nSELECT\n    HOUR AS block_hour,\n    0 AS asset_id,\n    'ALGO' AS asset_name,\n    price AS price_usd,\n    NULL algo_balance,\n    NULL non_algo_balance,\n    NULL pool_name,\n    NULL pool_address,\n    concat_ws(\n        '-',\n        HOUR,\n        0\n    ) unique_key,\n    price AS _algo_price\nFROM\n    hourly_prices", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.price_pool_balances"}, "model.algorand_models.silver__transaction_close": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_unique_key\",\n    incremental_strategy = 'merge',\n    cluster_by = ['_INSERTED_TIMESTAMP::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        tx_group_id,\n        tx_id,\n        block_id,\n        intra,\n        inner_tx,\n        COALESCE(\n            tx_message :ca :: INT,\n            tx_message :aca :: INT\n        ) amount,\n        COALESCE(\n            tx_message :txn :close :: STRING,\n            tx_message :txn :aclose :: STRING\n        ) account,\n        COALESCE(\n            tx_message :txn :xaid :: INT,\n            0\n        ) asset_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        COALESCE(\n            tx_message :txn :close :: STRING,\n            tx_message :txn :aclose :: STRING\n        ) IS NOT NULL\n        AND COALESCE(\n            tx_message :ca :: INT,\n            tx_message :aca :: INT\n        ) > 0\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nmid AS (\n    SELECT\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        algorand_decode_b64_addr(account) account,\n        asset_id,\n        SUM(amount) amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A\n    GROUP BY\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        account,\n        asset_id,\n        _INSERTED_TIMESTAMP\n)\nSELECT\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    account,\n    asset_id,\n    amount,\n    concat_ws(\n        '-',\n        block_id,\n        intra,\n        account,\n        asset_ID\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    mid", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_INSERTED_TIMESTAMP::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__transaction_close"], "unique_id": "model.algorand_models.silver__transaction_close", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__transaction_close.sql", "original_file_path": "models/silver/silver__transaction_close.sql", "name": "silver__transaction_close", "alias": "transaction_close", "checksum": {"name": "sha256", "checksum": "e220b876636984305eacc3be79a2e48ba2b0dcf39193f7cbd721b15d2ca1e8b0"}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT": {"name": "ACCOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__transaction_close.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_INSERTED_TIMESTAMP::DATE"]}, "created_at": 1667512711.9621692, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        tx_group_id,\n        tx_id,\n        block_id,\n        intra,\n        inner_tx,\n        COALESCE(\n            tx_message :ca :: INT,\n            tx_message :aca :: INT\n        ) amount,\n        COALESCE(\n            tx_message :txn :close :: STRING,\n            tx_message :txn :aclose :: STRING\n        ) account,\n        COALESCE(\n            tx_message :txn :xaid :: INT,\n            0\n        ) asset_id,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        COALESCE(\n            tx_message :txn :close :: STRING,\n            tx_message :txn :aclose :: STRING\n        ) IS NOT NULL\n        AND COALESCE(\n            tx_message :ca :: INT,\n            tx_message :aca :: INT\n        ) > 0\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.transaction_close\n)\n\n),\nmid AS (\n    SELECT\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        algorand_decode_b64_addr(account) account,\n        asset_id,\n        SUM(amount) amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        base A\n    GROUP BY\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        account,\n        asset_id,\n        _INSERTED_TIMESTAMP\n)\nSELECT\n    block_id,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    account,\n    asset_id,\n    amount,\n    concat_ws(\n        '-',\n        block_id,\n        intra,\n        account,\n        asset_ID\n    ) AS _unique_key,\n    _INSERTED_TIMESTAMP\nFROM\n    mid", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.transaction_close"}, "model.algorand_models.silver__nft_sales_shufl": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH base_tx AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        app_id,\n        sender,\n        tx_message,\n        amount,\n        asset_amount,\n        asset_id,\n        tx_type,\n        COALESCE(\n            asset_receiver,\n            receiver\n        ) AS asset_receiver,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        block_id > 21940893\n        AND tx_type IN (\n            'appl',\n            'axfer',\n            'pay'\n        )\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\npurchases AS (\n    --this is purchases and delists\n    SELECT\n        block_id,\n        A.tx_group_id,\n        A.app_id,\n        A.sender AS purchaser,\n        _INSERTED_TIMESTAMP\n    FROM\n        base_tx A,\n        LATERAL FLATTEN(\n            input => A.tx_message :dt :gd\n        ) b,\n        LATERAL FLATTEN(\n            input => b.value\n        ) C\n    WHERE\n        tx_type = 'appl'\n        AND TRY_BASE64_DECODE_STRING(\n            b.key\n        ) = 'global_list_status'\n        AND C.key = 'ui'\n        AND C.value :: STRING = 2 {# AND app_id <> 833100004 #}\n),\npurchase_amount AS (\n    SELECT\n        -- only true purchases will have a payment transaction\n        A.tx_group_id,\n        SUM(\n            A.amount\n        ) amount\n    FROM\n        base_tx A\n        JOIN purchases b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.sender = b.purchaser\n    WHERE\n        tx_type = 'pay'\n    GROUP BY\n        A.tx_group_id\n),\nnft_id AS (\n    SELECT\n        A.tx_group_id,\n        A.asset_id,\n        A.asset_amount\n    FROM\n        base_tx A\n        JOIN purchases b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.asset_receiver = b.purchaser\n    WHERE\n        tx_type = 'axfer'\n        AND A.asset_amount > 0\n)\nSELECT\n    A.block_id,\n    A.tx_group_id,\n    A.purchaser,\n    A.app_id,\n    C.asset_id AS nft_asset_id,\n    CASE\n        WHEN d.decimals > 0 THEN C.asset_amount :: FLOAT / pow(\n            10,\n            d.decimals\n        )\n        WHEN NULLIF(\n            d.decimals,\n            0\n        ) IS NULL THEN C.asset_amount :: FLOAT\n    END AS number_of_nfts,\n    b.amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        A.block_id :: STRING,\n        A.tx_group_id :: STRING,\n        C.asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    purchases A\n    JOIN purchase_amount b\n    ON A.tx_group_id = b.tx_group_id\n    JOIN nft_id C\n    ON A.tx_group_id = C.tx_group_id\n    LEFT JOIN {{ ref('silver__asset') }}\n    d\n    ON C.asset_id = d.asset_id {# WHERE\n    COALESCE(\n        C.asset_id,\n        0\n    ) <> 833083428 #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_shufl"], "unique_id": "model.algorand_models.silver__nft_sales_shufl", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_shufl.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.sql", "name": "silver__nft_sales_shufl", "alias": "nft_sales_shufl", "checksum": {"name": "sha256", "checksum": "6409d820ace2e05af995ee1f80fc14afa07d62f8b5d159a0e77b376e779c5cbc"}, "tags": [], "refs": [["silver__transaction"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_shufl.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.9537, "compiled_sql": "\n\nWITH base_tx AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        app_id,\n        sender,\n        tx_message,\n        amount,\n        asset_amount,\n        asset_id,\n        tx_type,\n        COALESCE(\n            asset_receiver,\n            receiver\n        ) AS asset_receiver,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        block_id > 21940893\n        AND tx_type IN (\n            'appl',\n            'axfer',\n            'pay'\n        )\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_shufl\n) - INTERVAL '4 HOURS'\n\n),\npurchases AS (\n    --this is purchases and delists\n    SELECT\n        block_id,\n        A.tx_group_id,\n        A.app_id,\n        A.sender AS purchaser,\n        _INSERTED_TIMESTAMP\n    FROM\n        base_tx A,\n        LATERAL FLATTEN(\n            input => A.tx_message :dt :gd\n        ) b,\n        LATERAL FLATTEN(\n            input => b.value\n        ) C\n    WHERE\n        tx_type = 'appl'\n        AND TRY_BASE64_DECODE_STRING(\n            b.key\n        ) = 'global_list_status'\n        AND C.key = 'ui'\n        AND C.value :: STRING = 2 \n),\npurchase_amount AS (\n    SELECT\n        -- only true purchases will have a payment transaction\n        A.tx_group_id,\n        SUM(\n            A.amount\n        ) amount\n    FROM\n        base_tx A\n        JOIN purchases b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.sender = b.purchaser\n    WHERE\n        tx_type = 'pay'\n    GROUP BY\n        A.tx_group_id\n),\nnft_id AS (\n    SELECT\n        A.tx_group_id,\n        A.asset_id,\n        A.asset_amount\n    FROM\n        base_tx A\n        JOIN purchases b\n        ON A.tx_group_id = b.tx_group_id\n        AND A.asset_receiver = b.purchaser\n    WHERE\n        tx_type = 'axfer'\n        AND A.asset_amount > 0\n)\nSELECT\n    A.block_id,\n    A.tx_group_id,\n    A.purchaser,\n    A.app_id,\n    C.asset_id AS nft_asset_id,\n    CASE\n        WHEN d.decimals > 0 THEN C.asset_amount :: FLOAT / pow(\n            10,\n            d.decimals\n        )\n        WHEN NULLIF(\n            d.decimals,\n            0\n        ) IS NULL THEN C.asset_amount :: FLOAT\n    END AS number_of_nfts,\n    b.amount :: FLOAT / pow(\n        10,\n        6\n    ) AS total_sales_amount,\n    concat_ws(\n        '-',\n        A.block_id :: STRING,\n        A.tx_group_id :: STRING,\n        C.asset_id :: STRING\n    ) AS _unique_key,\n    A._INSERTED_TIMESTAMP\nFROM\n    purchases A\n    JOIN purchase_amount b\n    ON A.tx_group_id = b.tx_group_id\n    JOIN nft_id C\n    ON A.tx_group_id = C.tx_group_id\n    LEFT JOIN ALGORAND_DEV.silver.asset\n    d\n    ON C.asset_id = d.asset_id ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_shufl"}, "model.algorand_models.silver__get_tx": {"raw_sql": "{{ config(\n  materialized = 'view',\n  post_hook = \"call silver.sp_bulk_get_tx()\"\n) }}\n\nWITH tx AS (\n\n  SELECT\n    tx_sender AS account_id,\n    tx_id\n  FROM\n    {{ ref(\"core__fact_transaction\") }}\n  WHERE\n    block_timestamp :: DATE > '2022-07-27' qualify (ROW_NUMBER() over (PARTITION BY tx_id\n  ORDER BY\n    tx_sender)) = 1\n)\nSELECT\n  account_id,\n  tx_id\nFROM\n  tx\nEXCEPT\nSELECT\n  account_id,\n  tx_id\nFROM\n  {{ ref(\"silver__indexer_tx\") }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__fact_transaction", "model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [{"sql": "call silver.sp_bulk_get_tx()", "transaction": true, "index": null}], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__get_tx"], "unique_id": "model.algorand_models.silver__get_tx", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__get_tx.sql", "original_file_path": "models/silver/silver__get_tx.sql", "name": "silver__get_tx", "alias": "get_tx", "checksum": {"name": "sha256", "checksum": "8134669c2954cd9fe41ceaa34fdf38f174991f03735693c023a8bc12b23f4ff9"}, "tags": [], "refs": [["core__fact_transaction"], ["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__get_tx.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "post-hook": ["call silver.sp_bulk_get_tx()"]}, "created_at": 1667512710.937811, "compiled_sql": "\n\nWITH tx AS (\n\n  SELECT\n    tx_sender AS account_id,\n    tx_id\n  FROM\n    ALGORAND_DEV.core.fact_transaction\n  WHERE\n    block_timestamp :: DATE > '2022-07-27' qualify (ROW_NUMBER() over (PARTITION BY tx_id\n  ORDER BY\n    tx_sender)) = 1\n)\nSELECT\n  account_id,\n  tx_id\nFROM\n  tx\nEXCEPT\nSELECT\n  account_id,\n  tx_id\nFROM\n  ALGORAND_DEV.silver.indexer_tx", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.get_tx"}, "model.algorand_models.silver__nft_sales_ab2_gallery": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH ab2_sales AS(\n\n    SELECT\n        DISTINCT block_id,\n        tx_group_id,\n        sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type = 'appl'\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :note :: STRING\n        ) = 'ab2.gallery'\n\n{% if is_incremental() %}\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nnft_transfer AS(\n    SELECT\n        ab2.block_id,\n        ab2.tx_group_id,\n        ab2.sender AS buyer,\n        nft.asset_amount AS number_of_assets,\n        ast.asset_id,\n        ab2._INSERTED_TIMESTAMP,\n        decimals\n    FROM\n        ab2_sales ab2\n        JOIN {{ ref('silver__transaction') }}\n        nft\n        ON ab2.tx_group_id = nft.tx_group_id\n        AND ab2.sender = nft.asset_receiver\n        JOIN {{ ref('silver__asset') }}\n        ast\n        ON nft.asset_id = ast.asset_id\n    WHERE\n        tx_type = 'axfer'\n        AND asset_amount > 0\n\n{% if is_incremental() %}\nAND ab2._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n)\nSELECT\n    nft.block_id,\n    nft.tx_group_id,\n    nft.buyer AS purchaser,\n    nft.asset_id AS nft_asset_id,\n    SUM(\n        amount :: FLOAT / pow(\n            10,\n            6\n        )\n    ) AS total_sales_amount,\n    CASE\n        WHEN nft.decimals > 0 THEN number_of_assets :: FLOAT / pow(\n            10,\n            nft.decimals\n        )\n        WHEN NULLIF(\n            nft.decimals,\n            0\n        ) IS NULL THEN number_of_assets :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        nft.block_id :: STRING,\n        nft.tx_group_id :: STRING,\n        nft.asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    nft_transfer nft\n    JOIN {{ ref('silver__transaction') }}\n    pay\n    ON nft.tx_group_id = pay.tx_group_id\n    AND nft.buyer = pay.sender\nWHERE\n    tx_type = 'pay'\nGROUP BY\n    nft.block_id,\n    nft.tx_group_id,\n    purchaser,\n    nft.asset_id,\n    number_of_nfts,\n    _unique_key,\n    nft._INSERTED_TIMESTAMP", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_ab2_gallery"], "unique_id": "model.algorand_models.silver__nft_sales_ab2_gallery", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_ab2_gallery.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.sql", "name": "silver__nft_sales_ab2_gallery", "alias": "nft_sales_ab2_gallery", "checksum": {"name": "sha256", "checksum": "98d5adf9b0735c6148a4c0387ca1354a44d368527ea72b104378706ba65886a6"}, "tags": [], "refs": [["silver__transaction"], ["silver__transaction"], ["silver__asset"], ["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_ab2_gallery.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667512711.978948, "compiled_sql": "\n\nWITH ab2_sales AS(\n\n    SELECT\n        DISTINCT block_id,\n        tx_group_id,\n        sender,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type = 'appl'\n        AND TRY_BASE64_DECODE_STRING(\n            tx_message :txn :note :: STRING\n        ) = 'ab2.gallery'\n\n\nAND _INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_ab2_gallery\n) - INTERVAL '4 HOURS'\n\n),\nnft_transfer AS(\n    SELECT\n        ab2.block_id,\n        ab2.tx_group_id,\n        ab2.sender AS buyer,\n        nft.asset_amount AS number_of_assets,\n        ast.asset_id,\n        ab2._INSERTED_TIMESTAMP,\n        decimals\n    FROM\n        ab2_sales ab2\n        JOIN ALGORAND_DEV.silver.transaction\n        nft\n        ON ab2.tx_group_id = nft.tx_group_id\n        AND ab2.sender = nft.asset_receiver\n        JOIN ALGORAND_DEV.silver.asset\n        ast\n        ON nft.asset_id = ast.asset_id\n    WHERE\n        tx_type = 'axfer'\n        AND asset_amount > 0\n\n\nAND ab2._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_ab2_gallery\n) - INTERVAL '4 HOURS'\n\n)\nSELECT\n    nft.block_id,\n    nft.tx_group_id,\n    nft.buyer AS purchaser,\n    nft.asset_id AS nft_asset_id,\n    SUM(\n        amount :: FLOAT / pow(\n            10,\n            6\n        )\n    ) AS total_sales_amount,\n    CASE\n        WHEN nft.decimals > 0 THEN number_of_assets :: FLOAT / pow(\n            10,\n            nft.decimals\n        )\n        WHEN NULLIF(\n            nft.decimals,\n            0\n        ) IS NULL THEN number_of_assets :: FLOAT\n    END AS number_of_nfts,\n    concat_ws(\n        '-',\n        nft.block_id :: STRING,\n        nft.tx_group_id :: STRING,\n        nft.asset_id :: STRING\n    ) AS _unique_key,\n    nft._INSERTED_TIMESTAMP\nFROM\n    nft_transfer nft\n    JOIN ALGORAND_DEV.silver.transaction\n    pay\n    ON nft.tx_group_id = pay.tx_group_id\n    AND nft.buyer = pay.sender\nWHERE\n    tx_type = 'pay'\nGROUP BY\n    nft.block_id,\n    nft.tx_group_id,\n    purchaser,\n    nft.asset_id,\n    number_of_nfts,\n    _unique_key,\n    nft._INSERTED_TIMESTAMP", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_ab2_gallery"}, "test.algorand_models.silver__prices_swap__block_hour_date_gap": {"raw_sql": "{{ date_gaps(ref('silver__price_swap'), [\"asset_id\"], \"block_hour\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.date_gaps"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver__prices_swap__block_hour_date_gap"], "unique_id": "test.algorand_models.silver__prices_swap__block_hour_date_gap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver__prices_swap__block_hour_date_gap.sql", "original_file_path": "tests/silver__prices_swap__block_hour_date_gap.sql", "name": "silver__prices_swap__block_hour_date_gap", "alias": "prices_swap", "checksum": {"name": "sha256", "checksum": "0fa1a82ed841ee7e2d9202dd7217dc84096be84fe44537bbddb73516c588b3e7"}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/tests/silver__prices_swap__block_hour_date_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512710.953074, "compiled_sql": "WITH source AS (\n        SELECT\n            asset_id,\n            block_hour,\n            LAG(\n                block_hour,\n                1\n            ) over (\n                PARTITION BY asset_id\n                ORDER BY\n                    block_hour ASC\n            ) AS prev_block_hour\n        FROM\n            ALGORAND_DEV.silver.price_swap\n    )\nSELECT\n    asset_id,\n    prev_block_hour,\n    block_hour,\n    DATEDIFF(\n        days,\n        prev_block_hour,\n        block_hour\n    ) - 1 AS gap\nFROM\n    source\n    \nWHERE\n    DATEDIFF(\n        days,\n        prev_block_hour,\n        block_hour\n    ) > 1 \n    \nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.algorand_models.silver__block__block_id-assert_no_gap": {"raw_sql": "{{ sequence_gaps_buffered_look_back(ref('silver__block'), [], \"block_id\", \"_inserted_timestamp\", \"15 HOURS\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.sequence_gaps_buffered_look_back"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver__block__block_id-assert_no_gap"], "unique_id": "test.algorand_models.silver__block__block_id-assert_no_gap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver__block__block_id-assert_no_gap.sql", "original_file_path": "tests/silver__block__block_id-assert_no_gap.sql", "name": "silver__block__block_id-assert_no_gap", "alias": "block", "checksum": {"name": "sha256", "checksum": "603b69868187af9b2c9c5331803eb67083c62ff175a0e4e348f92dff0b161c0c"}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/tests/silver__block__block_id-assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512710.958029, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            block_id,\n            LAG(\n                block_id,\n                1\n            ) over (\n                \n                ORDER BY\n                    block_id ASC\n            ) AS prev_block_id,\n            LAG(\n                _inserted_timestamp,\n                1\n            ) over (\n                \n                ORDER BY\n                    block_id ASC\n            ) AS _inserted_timestamp\n        FROM\n            ALGORAND_DEV.silver.block\n    )\nSELECT\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nAND \n    _inserted_timestamp < (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.block\n    ) - INTERVAL '15 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.algorand_models.silver__transaction__intra-assert_no_gap": {"raw_sql": "{{ sequence_gaps_buffered_look_back(ref('silver__transaction'), [\"block_id\"], \"intra\", \"_inserted_timestamp\", \"15 HOURS\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.sequence_gaps_buffered_look_back"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver__transaction__intra-assert_no_gap"], "unique_id": "test.algorand_models.silver__transaction__intra-assert_no_gap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver__transaction__intra-assert_no_gap.sql", "original_file_path": "tests/silver__transaction__intra-assert_no_gap.sql", "name": "silver__transaction__intra-assert_no_gap", "alias": "transaction", "checksum": {"name": "sha256", "checksum": "2ba75a78c172404a5f752983f0a3318cc212f2f0cb9b024d7713dfbd39c0e8a6"}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/tests/silver__transaction__intra-assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512710.962352, "compiled_sql": "WITH source AS (\n        SELECT\n            block_id,\n            intra,\n            LAG(\n                intra,\n                1\n            ) over (\n                PARTITION BY block_id\n                ORDER BY\n                    intra ASC\n            ) AS prev_intra,\n            LAG(\n                _inserted_timestamp,\n                1\n            ) over (\n                PARTITION BY block_id\n                ORDER BY\n                    intra ASC\n            ) AS _inserted_timestamp\n        FROM\n            ALGORAND_DEV.silver.transaction\n    )\nSELECT\n    block_id,\n    prev_intra,\n    intra,\n    intra - prev_intra\n    - 1 AS gap\nFROM\n    source\nWHERE\n    intra - prev_intra <> 1\nAND \n    _inserted_timestamp < (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.silver.transaction\n    ) - INTERVAL '15 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "operation.algorand_models.algorand_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-0", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-0"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512710.997283, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.algorand_models.algorand_models-on-run-start-1": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-1", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-1"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.000332, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.algorand_models.algorand_models-on-run-start-2": {"raw_sql": "{{ create_algorand_decode_b64_addr() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_algorand_decode_b64_addr"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-2", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-2"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-2.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-2", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.0069351, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.algorand_models.algorand_models-on-run-start-3": {"raw_sql": "{{ create_algorand_decode_hex_addr() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_algorand_decode_hex_addr"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-3", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-3"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-3.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-3", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-3.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.009753, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 3}, "operation.algorand_models.algorand_models-on-run-start-4": {"raw_sql": "{{ create_algorand_udf_bulk_get_tx_info() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_algorand_udf_bulk_get_tx_info"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-4", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-4"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-4.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-4", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-4.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.0125608, "compiled_sql": "\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_tx() returns text api_integration = aws_algorand_api AS \n        'https://vfc3eyv16g.execute-api.us-east-1.amazonaws.com/dev/bulk_get_tx_info'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 4}, "operation.algorand_models.algorand_models-on-run-start-5": {"raw_sql": "{{ create_algorand_sp_bulk_get_contract_info() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.algorand_models.create_algorand_sp_bulk_get_contract_info"], "nodes": ["model.algorand_models.silver__get_tx"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "algorand_models-on-run-start-5", "fqn": ["algorand_models", "hooks", "algorand_models-on-run-start-5"], "unique_id": "operation.algorand_models.algorand_models-on-run-start-5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "hooks/algorand_models-on-run-start-5.sql", "original_file_path": "./dbt_project.yml", "name": "algorand_models-on-run-start-5", "alias": "", "checksum": {"name": "sha256", "checksum": "89fa1e99f9ed5ecfefc0c8a6188cc72408d9148833ae9c4a1d362be5094bf5e9"}, "tags": ["on-run-start"], "refs": [["silver__get_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/./dbt_project.yml/hooks/algorand_models-on-run-start-5.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.015021, "compiled_sql": "\n  \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 5}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"raw_sql": "{{ dbt_constraints.create_constraints() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "dbt_constraints-on-run-end-0", "alias": "", "checksum": {"name": "sha256", "checksum": "322fdaf41d183a13b7417bf8f47935d83bfdf07242073cf29b8c8789010746fb"}, "tags": ["on-run-end"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1667512711.0362, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.algorand_models.not_null_core__ez_price_pool_balances_BLOCK_HOUR.65a4ec01d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_BLOCK_HOUR"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_BLOCK_HOUR.65a4ec01d8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_BLOCK_HOUR.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_BLOCK_HOUR", "alias": "ez_price_pool_balances_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.119831, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HOUR\nfrom ALGORAND_DEV.core.ez_price_pool_balances\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1.3c6fd823f7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_010c3e5ec25dc9f40022a3c148c1df97\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_010c3e5ec25dc9f40022a3c148c1df97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1.3c6fd823f7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_010c3e5ec25dc9f40022a3c148c1df97.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1", "alias": "ez_price_pool_balances_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/dbt_expectations_expect_row_va_010c3e5ec25dc9f40022a3c148c1df97.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_010c3e5ec25dc9f40022a3c148c1df97"}, "created_at": 1667512711.120667, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.ez_price_pool_balances\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_ID.5a0cecfca4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_ID.5a0cecfca4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_ASSET_ID.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_ASSET_ID", "alias": "ez_price_pool_balances_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.131236, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_price_pool_balances\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_NAME.e93f9d7baa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_NAME", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_ASSET_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_NAME.e93f9d7baa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_ASSET_NAME.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_ASSET_NAME", "alias": "ez_price_pool_balances_ASSET_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_ASSET_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.132139, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_NAME\nfrom ALGORAND_DEV.core.ez_price_pool_balances\nwhere ASSET_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_NAME", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_PRICE_USD.689b0f64d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_PRICE_USD"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_PRICE_USD.689b0f64d6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_PRICE_USD.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_PRICE_USD", "alias": "ez_price_pool_balances_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.1328971, "compiled_sql": "\n    \n    \n\n\n\nselect PRICE_USD\nfrom ALGORAND_DEV.core.ez_price_pool_balances\nwhere PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_ALGO_BALANCE.130ef67b2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ALGO_BALANCE", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_ALGO_BALANCE"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_ALGO_BALANCE.130ef67b2f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_ALGO_BALANCE.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_ALGO_BALANCE", "alias": "ez_price_pool_balances_ALGO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_ALGO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512711.1338189, "compiled_sql": "\n    \n    \n\n\n\nselect ALGO_BALANCE\nfrom (select * from ALGORAND_DEV.core.ez_price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere ALGO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ALGO_BALANCE", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.44bd5b86c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ALGO_BALANCE", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.44bd5b86c2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE", "alias": "ez_price_pool_balances_NON_ALGO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512711.134877, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ALGO_BALANCE\nfrom (select * from ALGORAND_DEV.core.ez_price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere NON_ALGO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ALGO_BALANCE", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances_POOL_ADDRESS.61c9eb9923": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances_POOL_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances_POOL_ADDRESS.61c9eb9923", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances_POOL_ADDRESS.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances_POOL_ADDRESS", "alias": "ez_price_pool_balances_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512711.135799, "compiled_sql": "\n    \n    \n\n\n\nselect POOL_ADDRESS\nfrom (select * from ALGORAND_DEV.core.ez_price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_price_pool_balances__ALGO_PRICE.f3167e2732": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ALGO_PRICE", "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_pool_balances__ALGO_PRICE"], "unique_id": "test.algorand_models.not_null_core__ez_price_pool_balances__ALGO_PRICE.f3167e2732", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_pool_balances__ALGO_PRICE.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "not_null_core__ez_price_pool_balances__ALGO_PRICE", "alias": "ez_price_pool_balances", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/not_null_core__ez_price_pool_balances__ALGO_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.1365938, "compiled_sql": "\n    \n    \n\n\n\nselect _ALGO_PRICE\nfrom ALGORAND_DEV.core.ez_price_pool_balances\nwhere _ALGO_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_ALGO_PRICE", "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id.4f2d2b0e2d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_81483aeafb1b3e108add16a1b50006a4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_hour", "asset_id"], "model": "{{ get_where_subquery(ref('core__ez_price_pool_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_81483aeafb1b3e108add16a1b50006a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id.4f2d2b0e2d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_81483aeafb1b3e108add16a1b50006a4.sql", "original_file_path": "models/core/core__ez_price_pool_balances.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id", "alias": "ez_price_pool_balances_block_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_pool_balances.yml/dbt_utils_unique_combination_o_81483aeafb1b3e108add16a1b50006a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_81483aeafb1b3e108add16a1b50006a4"}, "created_at": 1667512711.137368, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_hour, asset_id\n    from ALGORAND_DEV.core.ez_price_pool_balances\n    group by block_hour, asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_price_pool_balances"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.a62c68390e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.a62c68390e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP", "alias": "ez_transaction_asset_freeze_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.3784478, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_ID.27fc8f0cb1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_ID.27fc8f0cb1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_BLOCK_ID", "alias": "ez_transaction_asset_freeze_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.379272, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INTRA.2278cbbd31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INTRA.2278cbbd31", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_INTRA", "alias": "ez_transaction_asset_freeze_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.3801641, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_ID.3932262287": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_ID.3932262287", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_TX_ID", "alias": "ez_transaction_asset_freeze_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.380933, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INNER_TX.a635918c75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INNER_TX.a635918c75", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_INNER_TX", "alias": "ez_transaction_asset_freeze_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.3821151, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_SENDER.019c272168": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_SENDER.019c272168", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_TX_SENDER", "alias": "ez_transaction_asset_freeze_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.3829482, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_FEE.6d31e3f39f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_FEE.6d31e3f39f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_FEE.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_FEE", "alias": "ez_transaction_asset_freeze_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.384174, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_asset_freeze where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ID.21ae7a0602": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ID.21ae7a0602", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_ASSET_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_ASSET_ID", "alias": "ez_transaction_asset_freeze_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.385047, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.0a461165fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.0a461165fa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS", "alias": "ez_transaction_asset_freeze_ASSET_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.3858418, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ADDRESS\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere ASSET_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ADDRESS", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE.d8cf8c4979": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE.d8cf8c4979", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_TX_TYPE", "alias": "ez_transaction_asset_freeze_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.386772, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.5abc0fc1a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.5abc0fc1a3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME", "alias": "ez_transaction_asset_freeze_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.387564, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.20077bd4f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.20077bd4f5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_TX_MESSAGE", "alias": "ez_transaction_asset_freeze_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.388351, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_asset_freeze_EXTRA.9621b2f384": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_freeze_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_freeze_EXTRA.9621b2f384", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_freeze_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "not_null_core__ez_transaction_asset_freeze_EXTRA", "alias": "ez_transaction_asset_freeze_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/not_null_core__ez_transaction_asset_freeze_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.389159, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_freeze\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA.a1833e16f8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_356661d722ed3f434a7453cb857da96d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_freeze')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_freeze"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_356661d722ed3f434a7453cb857da96d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA.a1833e16f8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_356661d722ed3f434a7453cb857da96d.sql", "original_file_path": "models/core/core__ez_transaction_asset_freeze.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA", "alias": "ez_transaction_asset_freeze_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_freeze"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_freeze.yml/dbt_utils_unique_combination_o_356661d722ed3f434a7453cb857da96d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_356661d722ed3f434a7453cb857da96d"}, "created_at": 1667512711.390096, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_asset_freeze\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_asset_freeze"}, "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.94c35fbf2d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.94c35fbf2d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP", "alias": "ez_transaction_application_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.415742, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1.0ce9eebbe0": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3bdbb3acb37b5aacc7f1ab7b842419cf\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3bdbb3acb37b5aacc7f1ab7b842419cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1.0ce9eebbe0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_3bdbb3acb37b5aacc7f1ab7b842419cf.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1", "alias": "ez_transaction_application_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/dbt_expectations_expect_row_va_3bdbb3acb37b5aacc7f1ab7b842419cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3bdbb3acb37b5aacc7f1ab7b842419cf"}, "created_at": 1667512711.416647, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.ez_transaction_application_call\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_DATE.cf26c9d438": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_DATE", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_BLOCK_DATE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_DATE.cf26c9d438", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_BLOCK_DATE.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_BLOCK_DATE", "alias": "ez_transaction_application_call_BLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_BLOCK_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.419523, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_DATE\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere BLOCK_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_DATE", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_ID.6d9b55a668": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_ID.6d9b55a668", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_BLOCK_ID", "alias": "ez_transaction_application_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.420328, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_INTRA.d256c01e4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_INTRA.d256c01e4f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_INTRA", "alias": "ez_transaction_application_call_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.421126, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_TX_ID.3616c17fc3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_TX_ID.3616c17fc3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_TX_ID", "alias": "ez_transaction_application_call_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.422169, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_INNER_TX.f95bd93a9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_INNER_TX.f95bd93a9f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_INNER_TX", "alias": "ez_transaction_application_call_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.422986, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_TX_SENDER.d2bc5a1cce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_TX_SENDER.d2bc5a1cce", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_TX_SENDER", "alias": "ez_transaction_application_call_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.4238021, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_FEE.9b521a0379": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_FEE.9b521a0379", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_FEE.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_FEE", "alias": "ez_transaction_application_call_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.4248939, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_application_call where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_APP_ID.a6a5913a77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_APP_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_APP_ID.a6a5913a77", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_APP_ID.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_APP_ID", "alias": "ez_transaction_application_call_APP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_APP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.4259489, "compiled_sql": "\n    \n    \n\n\n\nselect APP_ID\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere APP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_ID", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE.7e9703e869": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE.7e9703e869", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_TX_TYPE", "alias": "ez_transaction_application_call_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.426782, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE_NAME.b30d6e4b04": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE_NAME.b30d6e4b04", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_TX_TYPE_NAME", "alias": "ez_transaction_application_call_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.427567, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_TX_MESSAGE.9973fee51d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_TX_MESSAGE.9973fee51d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_TX_MESSAGE", "alias": "ez_transaction_application_call_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.428511, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_application_call_EXTRA.ba946720e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_application_call_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_application_call_EXTRA.ba946720e6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_application_call_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "not_null_core__ez_transaction_application_call_EXTRA", "alias": "ez_transaction_application_call_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/not_null_core__ez_transaction_application_call_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.429309, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_application_call\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA.18235d8ccb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a795889e88cfc9ebd956c509e555f76e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_application_call')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_application_call"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a795889e88cfc9ebd956c509e555f76e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA.18235d8ccb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_a795889e88cfc9ebd956c509e555f76e.sql", "original_file_path": "models/core/core__ez_transaction_application_call.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA", "alias": "ez_transaction_application_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_application_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_application_call.yml/dbt_utils_unique_combination_o_a795889e88cfc9ebd956c509e555f76e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a795889e88cfc9ebd956c509e555f76e"}, "created_at": 1667512711.4300969, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_application_call\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_application_call"}, "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.627c5b210d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.627c5b210d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP", "alias": "ez_transaction_payment_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.43581, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_ID.b9a991457b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_ID.b9a991457b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_BLOCK_ID", "alias": "ez_transaction_payment_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.43661, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_INTRA.d559a2d263": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_INTRA.d559a2d263", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_INTRA", "alias": "ez_transaction_payment_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.4374862, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_TX_ID.ec0e28e5c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_TX_ID.ec0e28e5c2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_TX_ID", "alias": "ez_transaction_payment_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.438366, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_INNER_TX.3a03467a9b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_INNER_TX.3a03467a9b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_INNER_TX", "alias": "ez_transaction_payment_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.439232, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_TX_SENDER.c08e3a40fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_TX_SENDER.c08e3a40fe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_TX_SENDER", "alias": "ez_transaction_payment_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.440074, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_FEE.5081637300": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_FEE.5081637300", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_FEE.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_FEE", "alias": "ez_transaction_payment_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.441321, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_payment where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_ASSET_ID.545b42d135": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_ASSET_ID.545b42d135", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_ASSET_ID.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_ASSET_ID", "alias": "ez_transaction_payment_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.442243, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE.a804c933c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE.a804c933c4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_TX_TYPE", "alias": "ez_transaction_payment_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.443022, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE_NAME.75fffa9544": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE_NAME.75fffa9544", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_TX_TYPE_NAME", "alias": "ez_transaction_payment_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.443788, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_TX_MESSAGE.383c86dc2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_TX_MESSAGE.383c86dc2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_TX_MESSAGE", "alias": "ez_transaction_payment_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.4447281, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__ez_transaction_payment_EXTRA.129fdd057a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_payment_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_payment_EXTRA.129fdd057a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_payment_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "not_null_core__ez_transaction_payment_EXTRA", "alias": "ez_transaction_payment_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/not_null_core__ez_transaction_payment_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.445469, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_payment\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA.0cb7216682": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c550a4b9866f5ad3e7d297a846455849\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_payment')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_payment"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c550a4b9866f5ad3e7d297a846455849", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA.0cb7216682", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_c550a4b9866f5ad3e7d297a846455849.sql", "original_file_path": "models/core/core__ez_transaction_payment.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA", "alias": "ez_transaction_payment_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_payment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_payment.yml/dbt_utils_unique_combination_o_c550a4b9866f5ad3e7d297a846455849.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c550a4b9866f5ad3e7d297a846455849"}, "created_at": 1667512711.4462159, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_payment\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_payment"}, "test.algorand_models.not_null_core__dim_label_BLOCKCHAIN.5bd95a5803": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_BLOCKCHAIN"], "unique_id": "test.algorand_models.not_null_core__dim_label_BLOCKCHAIN.5bd95a5803", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_BLOCKCHAIN.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_BLOCKCHAIN", "alias": "dim_label_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.450263, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom ALGORAND_DEV.core.dim_label\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_CREATOR.a858abbf25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_CREATOR"], "unique_id": "test.algorand_models.not_null_core__dim_label_CREATOR.a858abbf25", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_CREATOR.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_CREATOR", "alias": "dim_label_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.4510632, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom ALGORAND_DEV.core.dim_label\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_LABEL_TYPE.758edac4ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_LABEL_TYPE"], "unique_id": "test.algorand_models.not_null_core__dim_label_LABEL_TYPE.758edac4ce", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_LABEL_TYPE.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_LABEL_TYPE", "alias": "dim_label_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.451871, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_TYPE\nfrom ALGORAND_DEV.core.dim_label\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_label"}, "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.640c0c4f19": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b8c809631e397c1b20b026ddaaca795\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b8c809631e397c1b20b026ddaaca795", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.640c0c4f19", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_3b8c809631e397c1b20b026ddaaca795.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "dim_label_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/dbt_expectations_expect_column_3b8c809631e397c1b20b026ddaaca795.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3b8c809631e397c1b20b026ddaaca795"}, "created_at": 1667512711.452867, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from ALGORAND_DEV.core.dim_label\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_LABEL_SUBTYPE.140d145fa6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_LABEL_SUBTYPE"], "unique_id": "test.algorand_models.not_null_core__dim_label_LABEL_SUBTYPE.140d145fa6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_LABEL_SUBTYPE.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_LABEL_SUBTYPE", "alias": "dim_label_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.45859, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_SUBTYPE\nfrom ALGORAND_DEV.core.dim_label\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_LABEL.dc39ed6300": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_LABEL"], "unique_id": "test.algorand_models.not_null_core__dim_label_LABEL.dc39ed6300", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_LABEL.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_LABEL", "alias": "dim_label_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.459405, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL\nfrom ALGORAND_DEV.core.dim_label\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_ADDRESS_NAME.33b678595b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_ADDRESS_NAME"], "unique_id": "test.algorand_models.not_null_core__dim_label_ADDRESS_NAME.33b678595b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_ADDRESS_NAME.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_ADDRESS_NAME", "alias": "dim_label_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_ADDRESS_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.460305, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom ALGORAND_DEV.core.dim_label\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__dim_label_ADDRESS.a141e9c919": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_label_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__dim_label_ADDRESS.a141e9c919", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_label_ADDRESS.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "not_null_core__dim_label_ADDRESS", "alias": "dim_label_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/not_null_core__dim_label_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.461061, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.dim_label\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_label"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58.bcab1cbb59": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCKCHAIN = 'algorand'\",alias=\"dbt_expectations_expect_column_74d8f9f7e18837a1aaabac57230dd9a8\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_74d8f9f7e18837a1aaabac57230dd9a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'algorand'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58.bcab1cbb59", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_74d8f9f7e18837a1aaabac57230dd9a8.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58", "alias": "dim_label_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/dbt_expectations_expect_column_74d8f9f7e18837a1aaabac57230dd9a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCKCHAIN = 'algorand'", "alias": "dbt_expectations_expect_column_74d8f9f7e18837a1aaabac57230dd9a8"}, "created_at": 1667512711.462016, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        ADDRESS\n    ) = 58 as expression\n\n\n    from (select * from ALGORAND_DEV.core.dim_label where BLOCKCHAIN = 'algorand') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_label"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS.9871cdad51": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ed62a9d81ea8c5ac26c206d5f178666e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_label')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_label"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ed62a9d81ea8c5ac26c206d5f178666e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS.9871cdad51", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_ed62a9d81ea8c5ac26c206d5f178666e.sql", "original_file_path": "models/core/core__dim_label.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "dim_label_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_label"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_label.yml/dbt_utils_unique_combination_o_ed62a9d81ea8c5ac26c206d5f178666e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ed62a9d81ea8c5ac26c206d5f178666e"}, "created_at": 1667512711.464244, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from ALGORAND_DEV.core.dim_label\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_label"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.96a5309d26": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.96a5309d26", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP", "alias": "ez_transaction_asset_transfer_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.516727, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_ID.ae05f3e428": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_ID.ae05f3e428", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_BLOCK_ID", "alias": "ez_transaction_asset_transfer_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.517531, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INTRA.14b27eb0ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INTRA.14b27eb0ce", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_INTRA", "alias": "ez_transaction_asset_transfer_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.5184681, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_ID.faa56917a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_ID.faa56917a7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_TX_ID", "alias": "ez_transaction_asset_transfer_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.519454, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INNER_TX.669908444f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INNER_TX.669908444f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_INNER_TX", "alias": "ez_transaction_asset_transfer_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.520323, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_SENDER.59fbcd6150": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_SENDER.59fbcd6150", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_TX_SENDER", "alias": "ez_transaction_asset_transfer_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.5213041, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_FEE.712f6ed3e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_FEE.712f6ed3e2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_FEE.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_FEE", "alias": "ez_transaction_asset_transfer_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.5223591, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_asset_transfer where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_ASSET_ID.685f8a3e48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_ASSET_ID.685f8a3e48", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_ASSET_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_ASSET_ID", "alias": "ez_transaction_asset_transfer_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.5231638, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.27575a6ef8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.27575a6ef8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME", "alias": "ez_transaction_asset_transfer_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.523921, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.f1f23cc5c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.f1f23cc5c8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_TX_MESSAGE", "alias": "ez_transaction_asset_transfer_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.524857, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_transfer_EXTRA.1dca57af7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_transfer_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_transfer_EXTRA.1dca57af7a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_transfer_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "not_null_core__ez_transaction_asset_transfer_EXTRA", "alias": "ez_transaction_asset_transfer_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/not_null_core__ez_transaction_asset_transfer_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.525619, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_transfer\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA.a9d7b14e3e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ec6a2e041d00aeadda1b44c82c0c7f14\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_transfer')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_transfer"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ec6a2e041d00aeadda1b44c82c0c7f14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA.a9d7b14e3e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_ec6a2e041d00aeadda1b44c82c0c7f14.sql", "original_file_path": "models/core/core__ez_transaction_asset_transfer.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA", "alias": "ez_transaction_asset_transfer_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_transfer.yml/dbt_utils_unique_combination_o_ec6a2e041d00aeadda1b44c82c0c7f14.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ec6a2e041d00aeadda1b44c82c0c7f14"}, "created_at": 1667512711.526367, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_asset_transfer\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_asset_transfer"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.624e3c4758": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_638054c159b9e656ee1d84e2b22eb291\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_BALANCE_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_638054c159b9e656ee1d84e2b22eb291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.624e3c4758", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_638054c159b9e656ee1d84e2b22eb291.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID", "alias": "fact_daily_balances_FACT_DAILY_BALANCE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_expectations_expect_column_638054c159b9e656ee1d84e2b22eb291.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_638054c159b9e656ee1d84e2b22eb291"}, "created_at": 1667512711.57932, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_DAILY_BALANCE_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_DAILY_BALANCE_ID", "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS.9cd8d844e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0567706883b7715eef2d07d62808c214\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0567706883b7715eef2d07d62808c214", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS.9cd8d844e3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_0567706883b7715eef2d07d62808c214.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS", "alias": "fact_daily_balances_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_expectations_expect_column_0567706883b7715eef2d07d62808c214.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0567706883b7715eef2d07d62808c214"}, "created_at": 1667512711.581107, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE.afc6a97495": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52878fe0116991c8b15b87d42b61c5be\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52878fe0116991c8b15b87d42b61c5be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE.afc6a97495", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_52878fe0116991c8b15b87d42b61c5be.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE", "alias": "fact_daily_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_expectations_expect_column_52878fe0116991c8b15b87d42b61c5be.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_52878fe0116991c8b15b87d42b61c5be"}, "created_at": 1667512711.5829859, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DATE' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE.f710557cee": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b7ac370183521725a82eb3caac01b3c2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BALANCE", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b7ac370183521725a82eb3caac01b3c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE.f710557cee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_b7ac370183521725a82eb3caac01b3c2.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE", "alias": "fact_daily_balances_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_expectations_expect_column_b7ac370183521725a82eb3caac01b3c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b7ac370183521725a82eb3caac01b3c2"}, "created_at": 1667512711.5850081, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BALANCE' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.6941e91d8d": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_27a886ced71ac5d96bfd7f71ee7a8104\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_BALANCE_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_27a886ced71ac5d96bfd7f71ee7a8104", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.6941e91d8d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_27a886ced71ac5d96bfd7f71ee7a8104.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID", "alias": "fact_daily_balances_FACT_DAILY_BALANCE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_constraints_primary_key_co_27a886ced71ac5d96bfd7f71ee7a8104.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_27a886ced71ac5d96bfd7f71ee7a8104"}, "created_at": 1667512711.587326, "compiled_sql": "with validation_errors as (\n    select\n        FACT_DAILY_BALANCE_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_daily_balances\n    group by FACT_DAILY_BALANCE_ID\n    having count(*) > 1\n        or FACT_DAILY_BALANCE_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_275a1bbd82201098a8a4edc9570dd94e\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_balances')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_daily_balances"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_275a1bbd82201098a8a4edc9570dd94e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_275a1bbd82201098a8a4edc9570dd94e.sql", "original_file_path": "models/core/core__fact_daily_balances.yml", "name": "dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_daily_balances_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_daily_balances.yml/dbt_constraints_foreign_key_co_275a1bbd82201098a8a4edc9570dd94e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_275a1bbd82201098a8a4edc9570dd94e"}, "created_at": 1667512711.58942, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_daily_balances\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_daily_balances"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.92762c6312": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.92762c6312", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP", "alias": "ez_transaction_key_registration_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6248891, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_ID.19f0a15e9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_ID.19f0a15e9e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_BLOCK_ID", "alias": "ez_transaction_key_registration_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.625823, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_INTRA.7b65e7ec41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_INTRA.7b65e7ec41", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_INTRA", "alias": "ez_transaction_key_registration_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.626692, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_ID.879155e33a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_ID.879155e33a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_TX_ID", "alias": "ez_transaction_key_registration_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6275132, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_INNER_TX.9352a97397": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_INNER_TX.9352a97397", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_INNER_TX", "alias": "ez_transaction_key_registration_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.628483, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_SENDER.093ce5da35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_SENDER.093ce5da35", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_TX_SENDER", "alias": "ez_transaction_key_registration_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.629251, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_FEE.1ae7e72b6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_FEE.1ae7e72b6c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_FEE.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_FEE", "alias": "ez_transaction_key_registration_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.630233, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_key_registration where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE.96ff0f746f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE.96ff0f746f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_TX_TYPE", "alias": "ez_transaction_key_registration_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6311512, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.94428a1165": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.94428a1165", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_TX_TYPE_NAME", "alias": "ez_transaction_key_registration_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6318998, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_MESSAGE.48a1737633": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_MESSAGE.48a1737633", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_TX_MESSAGE", "alias": "ez_transaction_key_registration_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.632643, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transaction_key_registration_EXTRA.bfcdc9f6ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_key_registration_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_key_registration_EXTRA.bfcdc9f6ec", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_key_registration_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "not_null_core__ez_transaction_key_registration_EXTRA", "alias": "ez_transaction_key_registration_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/not_null_core__ez_transaction_key_registration_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.633396, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_key_registration\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA.eb90862a91": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c5ac7c2234e86444fe26760c50ab3365\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_key_registration')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_key_registration"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c5ac7c2234e86444fe26760c50ab3365", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA.eb90862a91", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_c5ac7c2234e86444fe26760c50ab3365.sql", "original_file_path": "models/core/core__ez_transaction_key_registration.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA", "alias": "ez_transaction_key_registration_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_key_registration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_key_registration.yml/dbt_utils_unique_combination_o_c5ac7c2234e86444fe26760c50ab3365.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c5ac7c2234e86444fe26760c50ab3365"}, "created_at": 1667512711.634271, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_key_registration\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_key_registration"}, "test.algorand_models.not_null_core__ez_transfer_BLOCK_TIMESTAMP.ef2a7d36ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_BLOCK_TIMESTAMP.ef2a7d36ac", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_BLOCK_TIMESTAMP", "alias": "ez_transfer_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.639829, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transfer\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1.8a5535a280": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9a33bdd1c0771030b8684bbfbe6532b4\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9a33bdd1c0771030b8684bbfbe6532b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1.8a5535a280", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_9a33bdd1c0771030b8684bbfbe6532b4.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1", "alias": "ez_transfer_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/dbt_expectations_expect_row_va_9a33bdd1c0771030b8684bbfbe6532b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9a33bdd1c0771030b8684bbfbe6532b4"}, "created_at": 1667512711.6408582, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.ez_transfer\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_BLOCK_ID.930114da3a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_BLOCK_ID.930114da3a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_BLOCK_ID", "alias": "ez_transfer_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6439419, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transfer\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_INTRA.d96a3944c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_INTRA.d96a3944c2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_INTRA.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_INTRA", "alias": "ez_transfer_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6447098, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transfer\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_TX_ID.aa1eb10d50": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_TX_ID.aa1eb10d50", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_TX_ID.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_TX_ID", "alias": "ez_transfer_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.645878, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transfer\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_INNER_TX.42db758402": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_INNER_TX.42db758402", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_INNER_TX.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_INNER_TX", "alias": "ez_transfer_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.646647, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transfer\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_TX_SENDER.19693fb239": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_TX_SENDER.19693fb239", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_TX_SENDER", "alias": "ez_transfer_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.64739, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transfer\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_ASSET_SENDER.0c1f69edfb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_ASSET_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_ASSET_SENDER.0c1f69edfb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_ASSET_SENDER.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_ASSET_SENDER", "alias": "ez_transfer_ASSET_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_ASSET_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.64813, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_SENDER\nfrom ALGORAND_DEV.core.ez_transfer\nwhere ASSET_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_SENDER", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER.77711f5f81": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e83925cda00c2fd6e97bbec6174daff3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e83925cda00c2fd6e97bbec6174daff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER.77711f5f81", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_e83925cda00c2fd6e97bbec6174daff3.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER", "alias": "ez_transfer_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/dbt_expectations_expect_column_e83925cda00c2fd6e97bbec6174daff3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e83925cda00c2fd6e97bbec6174daff3"}, "created_at": 1667512711.648999, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RECEIVER' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIVER", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_ASSET_ID.cb2d007069": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_ASSET_ID.cb2d007069", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_ASSET_ID.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_ASSET_ID", "alias": "ez_transfer_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.650839, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_transfer\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_AMOUNT.50f4d0465d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_AMOUNT"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_AMOUNT.50f4d0465d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_AMOUNT.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_AMOUNT", "alias": "ez_transfer_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6518688, "compiled_sql": "\n    \n    \n\n\n\nselect AMOUNT\nfrom ALGORAND_DEV.core.ez_transfer\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_FEE.0f9ecf7bb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_FEE.0f9ecf7bb9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_FEE.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_FEE", "alias": "ez_transfer_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.652777, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom ALGORAND_DEV.core.ez_transfer\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_TX_TYPE.be39a785a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_TX_TYPE.be39a785a6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_TX_TYPE", "alias": "ez_transfer_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6536288, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transfer\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_TX_TYPE_NAME.5724af2df7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_TX_TYPE_NAME.5724af2df7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_TX_TYPE_NAME", "alias": "ez_transfer_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.65443, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transfer\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_TX_MESSAGE.3220458a5c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_TX_MESSAGE.3220458a5c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_TX_MESSAGE", "alias": "ez_transfer_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.655405, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transfer\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transfer_EXTRA.d69b2648eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transfer_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transfer_EXTRA.d69b2648eb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transfer_EXTRA.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "not_null_core__ez_transfer_EXTRA", "alias": "ez_transfer_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/not_null_core__ez_transfer_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.656186, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transfer\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA.cef2fce936": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_846cb74b1bb9d0ba8bca60c3d7cd5034\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transfer')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transfer"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_846cb74b1bb9d0ba8bca60c3d7cd5034", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA.cef2fce936", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_846cb74b1bb9d0ba8bca60c3d7cd5034.sql", "original_file_path": "models/core/core__ez_transfer.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA", "alias": "ez_transfer_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transfer.yml/dbt_utils_unique_combination_o_846cb74b1bb9d0ba8bca60c3d7cd5034.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_846cb74b1bb9d0ba8bca60c3d7cd5034"}, "created_at": 1667512711.656957, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transfer\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transfer"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP.952529712f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__ez_transaction__a0046b58849a99f45fbb55768fd4d832\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": "not_null_core__ez_transaction__a0046b58849a99f45fbb55768fd4d832", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP.952529712f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction__a0046b58849a99f45fbb55768fd4d832.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP", "alias": "ez_transaction_asset_configuration_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction__a0046b58849a99f45fbb55768fd4d832.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_core__ez_transaction__a0046b58849a99f45fbb55768fd4d832"}, "created_at": 1667512711.66237, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_ID.a0db6509e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_ID.a0db6509e2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_BLOCK_ID", "alias": "ez_transaction_asset_configuration_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.663181, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INTRA.eb034641c6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_INTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INTRA.eb034641c6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_INTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_INTRA", "alias": "ez_transaction_asset_configuration_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6640608, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_ID.d0a3dc1632": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_TX_ID"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_ID.d0a3dc1632", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_TX_ID.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_TX_ID", "alias": "ez_transaction_asset_configuration_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6649039, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INNER_TX.dbe256feb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INNER_TX.dbe256feb6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_INNER_TX.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_INNER_TX", "alias": "ez_transaction_asset_configuration_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.6658182, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_SENDER.fc0593c12a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_SENDER.fc0593c12a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_TX_SENDER.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_TX_SENDER", "alias": "ez_transaction_asset_configuration_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.666663, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_FEE.25dda7b42f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inner_tx = 'true'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "inner_tx = 'true'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_FEE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_FEE.25dda7b42f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_FEE.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_FEE", "alias": "ez_transaction_asset_configuration_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "inner_tx = 'true'"}, "created_at": 1667512711.6678772, "compiled_sql": "\n    \n    \n\n\n\nselect FEE\nfrom (select * from ALGORAND_DEV.core.ez_transaction_asset_configuration where inner_tx = 'true') dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE.d9cac02343": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_TX_TYPE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE.d9cac02343", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_TX_TYPE.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_TX_TYPE", "alias": "ez_transaction_asset_configuration_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.668718, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.eb74c254f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE_NAME", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.eb74c254f8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME", "alias": "ez_transaction_asset_configuration_TX_TYPE_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.669491, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE_NAME\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere TX_TYPE_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE_NAME", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.140f0d3e10": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_MESSAGE", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_TX_MESSAGE"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.140f0d3e10", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_TX_MESSAGE", "alias": "ez_transaction_asset_configuration_TX_MESSAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.670389, "compiled_sql": "\n    \n    \n\n\n\nselect TX_MESSAGE\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere TX_MESSAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_MESSAGE", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_transaction_asset_configuration_EXTRA.a2cf14d230": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA", "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_transaction_asset_configuration_EXTRA"], "unique_id": "test.algorand_models.not_null_core__ez_transaction_asset_configuration_EXTRA.a2cf14d230", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_transaction_asset_configuration_EXTRA.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "not_null_core__ez_transaction_asset_configuration_EXTRA", "alias": "ez_transaction_asset_configuration_EXTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/not_null_core__ez_transaction_asset_configuration_EXTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.671137, "compiled_sql": "\n    \n    \n\n\n\nselect EXTRA\nfrom ALGORAND_DEV.core.ez_transaction_asset_configuration\nwhere EXTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA", "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA.2f6e96a0ed": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2d05308cf871f4b6a7bdc374d1683c77\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('core__ez_transaction_asset_configuration')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_transaction_asset_configuration"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2d05308cf871f4b6a7bdc374d1683c77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA.2f6e96a0ed", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_2d05308cf871f4b6a7bdc374d1683c77.sql", "original_file_path": "models/core/core__ez_transaction_asset_configuration.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA", "alias": "ez_transaction_asset_configuration_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transaction_asset_configuration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_transaction_asset_configuration.yml/dbt_utils_unique_combination_o_2d05308cf871f4b6a7bdc374d1683c77.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2d05308cf871f4b6a7bdc374d1683c77"}, "created_at": 1667512711.6718879, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.core.ez_transaction_asset_configuration\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_transaction_asset_configuration"}, "test.algorand_models.not_null_core__ez_price_swap_BLOCK_HOUR.27a724c596": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__ez_price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_swap_BLOCK_HOUR"], "unique_id": "test.algorand_models.not_null_core__ez_price_swap_BLOCK_HOUR.27a724c596", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_swap_BLOCK_HOUR.sql", "original_file_path": "models/core/core__ez_price_swap.yml", "name": "not_null_core__ez_price_swap_BLOCK_HOUR", "alias": "ez_price_swap_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.yml/not_null_core__ez_price_swap_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.675812, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HOUR\nfrom ALGORAND_DEV.core.ez_price_swap\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__ez_price_swap"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1.e1a5eac5b1": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e307462e4640a80ae597ba678637bc71\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__ez_price_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e307462e4640a80ae597ba678637bc71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1.e1a5eac5b1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_e307462e4640a80ae597ba678637bc71.sql", "original_file_path": "models/core/core__ez_price_swap.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1", "alias": "ez_price_swap_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.yml/dbt_expectations_expect_row_va_e307462e4640a80ae597ba678637bc71.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e307462e4640a80ae597ba678637bc71"}, "created_at": 1667512711.676744, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.ez_price_swap\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__ez_price_swap"}, "test.algorand_models.not_null_core__ez_price_swap_ASSET_ID.832f2300ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__ez_price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_swap_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__ez_price_swap_ASSET_ID.832f2300ae", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_swap_ASSET_ID.sql", "original_file_path": "models/core/core__ez_price_swap.yml", "name": "not_null_core__ez_price_swap_ASSET_ID", "alias": "ez_price_swap_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.yml/not_null_core__ez_price_swap_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.679915, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.ez_price_swap\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__ez_price_swap"}, "test.algorand_models.not_null_core__ez_price_swap_PRICE_USD.1d04499bd5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('core__ez_price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__ez_price_swap_PRICE_USD"], "unique_id": "test.algorand_models.not_null_core__ez_price_swap_PRICE_USD.1d04499bd5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__ez_price_swap_PRICE_USD.sql", "original_file_path": "models/core/core__ez_price_swap.yml", "name": "not_null_core__ez_price_swap_PRICE_USD", "alias": "ez_price_swap_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.yml/not_null_core__ez_price_swap_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.680702, "compiled_sql": "\n    \n    \n\n\n\nselect PRICE_USD\nfrom ALGORAND_DEV.core.ez_price_swap\nwhere PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.core__ez_price_swap"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id.4130f5bb19": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9a7a943cd7d059cf49aa0dd5a6b83abb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_hour", "asset_id"], "model": "{{ get_where_subquery(ref('core__ez_price_swap')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__ez_price_swap"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9a7a943cd7d059cf49aa0dd5a6b83abb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["algorand_models", "core", "dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id.4130f5bb19", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_9a7a943cd7d059cf49aa0dd5a6b83abb.sql", "original_file_path": "models/core/core__ez_price_swap.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id", "alias": "ez_price_swap_block_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__ez_price_swap.yml/dbt_utils_unique_combination_o_9a7a943cd7d059cf49aa0dd5a6b83abb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9a7a943cd7d059cf49aa0dd5a6b83abb"}, "created_at": 1667512711.6814709, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_hour, asset_id\n    from ALGORAND_DEV.core.ez_price_swap\n    group by block_hour, asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_price_swap"}, "test.algorand_models.not_null_silver__account_asset_ADDRESS.b67595512f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_asset_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__account_asset_ADDRESS.b67595512f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_asset_ADDRESS.sql", "original_file_path": "models/silver/silver__account_asset.yml", "name": "not_null_silver__account_asset_ADDRESS", "alias": "account_asset_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.yml/not_null_silver__account_asset_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.729134, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.account_asset\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__account_asset"}, "test.algorand_models.not_null_silver__account_asset_ASSET_ID.8d8aa00446": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_asset_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__account_asset_ASSET_ID.8d8aa00446", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_asset_ASSET_ID.sql", "original_file_path": "models/silver/silver__account_asset.yml", "name": "not_null_silver__account_asset_ASSET_ID", "alias": "account_asset_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.yml/not_null_silver__account_asset_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.729928, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.account_asset\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__account_asset"}, "test.algorand_models.not_null_silver__account_asset_AMOUNT.01f350b758": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_asset_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__account_asset_AMOUNT.01f350b758", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_asset_AMOUNT.sql", "original_file_path": "models/silver/silver__account_asset.yml", "name": "not_null_silver__account_asset_AMOUNT", "alias": "account_asset_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.yml/not_null_silver__account_asset_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7308202, "compiled_sql": "\n    \n    \n\n\n\nselect AMOUNT\nfrom ALGORAND_DEV.silver.account_asset\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.silver__account_asset"}, "test.algorand_models.not_null_silver__account_asset_CREATED_AT.7085dd0081": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT", "model": "{{ get_where_subquery(ref('silver__account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_asset_CREATED_AT"], "unique_id": "test.algorand_models.not_null_silver__account_asset_CREATED_AT.7085dd0081", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_asset_CREATED_AT.sql", "original_file_path": "models/silver/silver__account_asset.yml", "name": "not_null_silver__account_asset_CREATED_AT", "alias": "account_asset_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.yml/not_null_silver__account_asset_CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7315788, "compiled_sql": "\n    \n    \n\n\n\nselect CREATED_AT\nfrom ALGORAND_DEV.silver.account_asset\nwhere CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT", "file_key_name": "models.silver__account_asset"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID.ec717582cd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_be4cedd890ad8b7c4ec90d2dcd300d3d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "ASSET_ID"], "model": "{{ get_where_subquery(ref('silver__account_asset')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account_asset"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_be4cedd890ad8b7c4ec90d2dcd300d3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID.ec717582cd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_be4cedd890ad8b7c4ec90d2dcd300d3d.sql", "original_file_path": "models/silver/silver__account_asset.yml", "name": "dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID", "alias": "account_asset_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account_asset.yml/dbt_utils_unique_combination_o_be4cedd890ad8b7c4ec90d2dcd300d3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_be4cedd890ad8b7c4ec90d2dcd300d3d"}, "created_at": 1667512711.732338, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, ASSET_ID\n    from ALGORAND_DEV.silver.account_asset\n    group by ADDRESS, ASSET_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__account_asset"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_BLOCK_ID.83c4d84d2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_BLOCK_ID.83c4d84d2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_BLOCK_ID", "alias": "swaps_humble_swap_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.736512, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_intra.9037966b0a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_intra.9037966b0a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_intra", "alias": "swaps_humble_swap_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7373078, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_tx_group_id.473522018c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_tx_group_id.473522018c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_tx_group_id", "alias": "swaps_humble_swap_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.73807, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_app_id.65856a04b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "app_id", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_app_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_app_id.65856a04b6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_app_id.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_app_id", "alias": "swaps_humble_swap_dex_app_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_app_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7389371, "compiled_sql": "\n    \n    \n\n\n\nselect app_id\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere app_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "app_id", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swapper.dfebe8bf0c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swapper.dfebe8bf0c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_swapper", "alias": "swaps_humble_swap_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.739699, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58.23a2be55f0": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_76f8f46d3504376da31da49063280083\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_76f8f46d3504376da31da49063280083", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58.23a2be55f0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_76f8f46d3504376da31da49063280083.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58", "alias": "swaps_humble_swap_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/dbt_expectations_expect_column_76f8f46d3504376da31da49063280083.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_76f8f46d3504376da31da49063280083"}, "created_at": 1667512711.740451, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_humble_swap_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.854390378d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.854390378d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_swap_from_asset_id", "alias": "swaps_humble_swap_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.742532, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_amount.2201d6aa4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_amount.2201d6aa4c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_swap_from_amount", "alias": "swaps_humble_swap_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.743289, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_pool_address.b464b1cd22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_pool_address.b464b1cd22", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_pool_address", "alias": "swaps_humble_swap_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.744046, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58.028cc94f2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4acfadc305d1a9ae27cf3b3a4bb9d5b\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4acfadc305d1a9ae27cf3b3a4bb9d5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58.028cc94f2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_e4acfadc305d1a9ae27cf3b3a4bb9d5b.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58", "alias": "swaps_humble_swap_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/dbt_expectations_expect_column_e4acfadc305d1a9ae27cf3b3a4bb9d5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4acfadc305d1a9ae27cf3b3a4bb9d5b"}, "created_at": 1667512711.744929, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_humble_swap_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.143b912223": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.143b912223", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_swap_to_asset_id", "alias": "swaps_humble_swap_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7469828, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_amount.0dd26e28d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_humble_swap_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_amount.0dd26e28d8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_humble_swap_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "not_null_silver__swaps_humble_swap_dex_swap_to_amount", "alias": "swaps_humble_swap_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/not_null_silver__swaps_humble_swap_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.747751, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_humble_swap_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra.6de7c5970b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c261a7543a348b7438280dc69d83fbfa\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_humble_swap_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_humble_swap_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c261a7543a348b7438280dc69d83fbfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra.6de7c5970b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_c261a7543a348b7438280dc69d83fbfa.sql", "original_file_path": "models/silver/silver__swaps_humble_swap_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra", "alias": "swaps_humble_swap_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_humble_swap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_humble_swap_dex.yml/dbt_utils_unique_combination_o_c261a7543a348b7438280dc69d83fbfa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c261a7543a348b7438280dc69d83fbfa"}, "created_at": 1667512711.748511, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_humble_swap_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_humble_swap_dex"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS.08dbd9f043": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d2caa4fa6083bf917b7aec597c9c8bbe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d2caa4fa6083bf917b7aec597c9c8bbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS.08dbd9f043", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_d2caa4fa6083bf917b7aec597c9c8bbe.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS", "alias": "daily_balances_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/dbt_expectations_expect_column_d2caa4fa6083bf917b7aec597c9c8bbe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d2caa4fa6083bf917b7aec597c9c8bbe"}, "created_at": 1667512711.7516859, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.not_null_silver__daily_balances_ADDRESS.2502493350": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__daily_balances_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__daily_balances_ADDRESS.2502493350", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__daily_balances_ADDRESS.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "not_null_silver__daily_balances_ADDRESS", "alias": "daily_balances_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/not_null_silver__daily_balances_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7535648, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.daily_balances\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE.f372e00094": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85fd1361f86663a0c7a2dde692961df5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_85fd1361f86663a0c7a2dde692961df5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE.f372e00094", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_85fd1361f86663a0c7a2dde692961df5.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE", "alias": "daily_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/dbt_expectations_expect_column_85fd1361f86663a0c7a2dde692961df5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_85fd1361f86663a0c7a2dde692961df5"}, "created_at": 1667512711.754324, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DATE' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.not_null_silver__daily_balances_DATE.85b329c0c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__daily_balances_DATE"], "unique_id": "test.algorand_models.not_null_silver__daily_balances_DATE.85b329c0c5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__daily_balances_DATE.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "not_null_silver__daily_balances_DATE", "alias": "daily_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/not_null_silver__daily_balances_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.756222, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom ALGORAND_DEV.silver.daily_balances\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1.15ad81f7fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4b74763ce13b2f497f2fb7aecd43f747\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DATE", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4b74763ce13b2f497f2fb7aecd43f747", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1.15ad81f7fc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_4b74763ce13b2f497f2fb7aecd43f747.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1", "alias": "daily_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/dbt_expectations_expect_row_va_4b74763ce13b2f497f2fb7aecd43f747.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4b74763ce13b2f497f2fb7aecd43f747"}, "created_at": 1667512711.7569978, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DATE as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.silver.daily_balances\n    where\n        -- to exclude erroneous future dates\n        cast(DATE as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE.dc2067bdbd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e858d1e2f99ed8918dfa9ab8c2345a34\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BALANCE", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e858d1e2f99ed8918dfa9ab8c2345a34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE.dc2067bdbd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_e858d1e2f99ed8918dfa9ab8c2345a34.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE", "alias": "daily_balances_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/dbt_expectations_expect_column_e858d1e2f99ed8918dfa9ab8c2345a34.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e858d1e2f99ed8918dfa9ab8c2345a34"}, "created_at": 1667512711.759656, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BALANCE' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.not_null_silver__daily_balances_BALANCE.a2177bc39f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE", "model": "{{ get_where_subquery(ref('silver__daily_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__daily_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__daily_balances_BALANCE"], "unique_id": "test.algorand_models.not_null_silver__daily_balances_BALANCE.a2177bc39f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__daily_balances_BALANCE.sql", "original_file_path": "models/silver/silver__daily_balances.yml", "name": "not_null_silver__daily_balances_BALANCE", "alias": "daily_balances_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__daily_balances.yml/not_null_silver__daily_balances_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.761523, "compiled_sql": "\n    \n    \n\n\n\nselect BALANCE\nfrom ALGORAND_DEV.silver.daily_balances\nwhere BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.silver__daily_balances"}, "test.algorand_models.not_null_silver__indexer_tx_TX_ID.a94096f4f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__indexer_tx')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__indexer_tx_TX_ID"], "unique_id": "test.algorand_models.not_null_silver__indexer_tx_TX_ID.a94096f4f5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__indexer_tx_TX_ID.sql", "original_file_path": "models/silver/silver__indexer_tx.yml", "name": "not_null_silver__indexer_tx_TX_ID", "alias": "indexer_tx_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.yml/not_null_silver__indexer_tx_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.763478, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.silver.indexer_tx\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__indexer_tx"}, "test.algorand_models.not_null_silver__indexer_tx_ACCOUNT_ID.66a8a1eb08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_ID", "model": "{{ get_where_subquery(ref('silver__indexer_tx')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__indexer_tx_ACCOUNT_ID"], "unique_id": "test.algorand_models.not_null_silver__indexer_tx_ACCOUNT_ID.66a8a1eb08", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__indexer_tx_ACCOUNT_ID.sql", "original_file_path": "models/silver/silver__indexer_tx.yml", "name": "not_null_silver__indexer_tx_ACCOUNT_ID", "alias": "indexer_tx_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.yml/not_null_silver__indexer_tx_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.764267, "compiled_sql": "\n    \n    \n\n\n\nselect ACCOUNT_ID\nfrom ALGORAND_DEV.silver.indexer_tx\nwhere ACCOUNT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_ID", "file_key_name": "models.silver__indexer_tx"}, "test.algorand_models.not_null_silver__indexer_tx_BLOCK_ID.30c7db10d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__indexer_tx')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__indexer_tx_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__indexer_tx_BLOCK_ID.30c7db10d4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__indexer_tx_BLOCK_ID.sql", "original_file_path": "models/silver/silver__indexer_tx.yml", "name": "not_null_silver__indexer_tx_BLOCK_ID", "alias": "indexer_tx_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.yml/not_null_silver__indexer_tx_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7650108, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.indexer_tx\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__indexer_tx"}, "test.algorand_models.not_null_silver__indexer_tx__INSERTED_TIMESTAMP.b6b6dc7476": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__indexer_tx')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__indexer_tx__INSERTED_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_silver__indexer_tx__INSERTED_TIMESTAMP.b6b6dc7476", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__indexer_tx__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__indexer_tx.yml", "name": "not_null_silver__indexer_tx__INSERTED_TIMESTAMP", "alias": "indexer_tx", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.yml/not_null_silver__indexer_tx__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.765878, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom ALGORAND_DEV.silver.indexer_tx\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__indexer_tx"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id.d7a3a79f7c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8299162d174264db85350eb8d493e4fc\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id"], "model": "{{ get_where_subquery(ref('silver__indexer_tx')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__indexer_tx"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8299162d174264db85350eb8d493e4fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id.d7a3a79f7c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_8299162d174264db85350eb8d493e4fc.sql", "original_file_path": "models/silver/silver__indexer_tx.yml", "name": "dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id", "alias": "indexer_tx_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__indexer_tx"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__indexer_tx.yml/dbt_utils_unique_combination_o_8299162d174264db85350eb8d493e4fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8299162d174264db85350eb8d493e4fc"}, "created_at": 1667512711.766635, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        tx_id\n    from ALGORAND_DEV.silver.indexer_tx\n    group by tx_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__indexer_tx"}, "test.algorand_models.not_null_silver__block_BLOCK_ID.a83167397e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__block_BLOCK_ID.a83167397e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_BLOCK_ID.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_BLOCK_ID", "alias": "block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.770349, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.block\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__block"}, "test.algorand_models.unique_silver__block_BLOCK_ID.01de2ad4fc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_silver", "fqn": ["algorand_models", "silver", "unique_silver__block_BLOCK_ID"], "unique_id": "test.algorand_models.unique_silver__block_BLOCK_ID.01de2ad4fc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_silver__block_BLOCK_ID.sql", "original_file_path": "models/silver/silver__block.yml", "name": "unique_silver__block_BLOCK_ID", "alias": "block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/unique_silver__block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.771135, "compiled_sql": "\n    \n    \n\nselect\n    BLOCK_ID as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.silver.block\nwhere BLOCK_ID is not null\ngroup by BLOCK_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_BLOCK_TIMESTAMP.7583c96190": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_silver__block_BLOCK_TIMESTAMP.7583c96190", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_BLOCK_TIMESTAMP", "alias": "block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.772015, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom ALGORAND_DEV.silver.block\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1.f44d7c8cee": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a39bd8c8ad46ad04757d7ea8da93bc6a\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a39bd8c8ad46ad04757d7ea8da93bc6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1.f44d7c8cee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_a39bd8c8ad46ad04757d7ea8da93bc6a.sql", "original_file_path": "models/silver/silver__block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1", "alias": "block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/dbt_expectations_expect_row_va_a39bd8c8ad46ad04757d7ea8da93bc6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a39bd8c8ad46ad04757d7ea8da93bc6a"}, "created_at": 1667512711.772783, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.silver.block\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_BLOCK_DATE.c1926ed12a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_DATE", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_BLOCK_DATE"], "unique_id": "test.algorand_models.not_null_silver__block_BLOCK_DATE.c1926ed12a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_BLOCK_DATE.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_BLOCK_DATE", "alias": "block_BLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_BLOCK_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.775396, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_DATE\nfrom ALGORAND_DEV.silver.block\nwhere BLOCK_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_DATE", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_REWARDS_LEVEL.0a8d0a67f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS_LEVEL", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_REWARDS_LEVEL"], "unique_id": "test.algorand_models.not_null_silver__block_REWARDS_LEVEL.0a8d0a67f5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_REWARDS_LEVEL.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_REWARDS_LEVEL", "alias": "block_REWARDS_LEVEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_REWARDS_LEVEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.776277, "compiled_sql": "\n    \n    \n\n\n\nselect REWARDS_LEVEL\nfrom ALGORAND_DEV.silver.block\nwhere REWARDS_LEVEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REWARDS_LEVEL", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_NETWORK.6166f81c40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_NETWORK"], "unique_id": "test.algorand_models.not_null_silver__block_NETWORK.6166f81c40", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_NETWORK.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_NETWORK", "alias": "block_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.77703, "compiled_sql": "\n    \n    \n\n\n\nselect NETWORK\nfrom ALGORAND_DEV.silver.block\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_GENESIS_HASH.6d511c76e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GENESIS_HASH", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_GENESIS_HASH"], "unique_id": "test.algorand_models.not_null_silver__block_GENESIS_HASH.6d511c76e5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_GENESIS_HASH.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_GENESIS_HASH", "alias": "block_GENESIS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_GENESIS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.777767, "compiled_sql": "\n    \n    \n\n\n\nselect GENESIS_HASH\nfrom ALGORAND_DEV.silver.block\nwhere GENESIS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GENESIS_HASH", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__block_PREV_BLOCK_HASH.6728550630": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__block_PREV_BLOCK_HASH"], "unique_id": "test.algorand_models.not_null_silver__block_PREV_BLOCK_HASH.6728550630", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__block_PREV_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__block.yml", "name": "not_null_silver__block_PREV_BLOCK_HASH", "alias": "block_PREV_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/not_null_silver__block_PREV_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_ID <> 0"}, "created_at": 1667512711.778669, "compiled_sql": "\n    \n    \n\n\n\nselect PREV_BLOCK_HASH\nfrom (select * from ALGORAND_DEV.silver.block where BLOCK_ID <> 0) dbt_subquery\nwhere PREV_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_BLOCK_HASH", "file_key_name": "models.silver__block"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.2b0f250b3e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TXN_ROOT", "model": "{{ get_where_subquery(ref('silver__block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.2b0f250b3e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.sql", "original_file_path": "models/silver/silver__block.yml", "name": "dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT", "alias": "block_TXN_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__block.yml/dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.779549, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TXN_ROOT' as \n    varchar\n) as column_name,\n            15 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_ROOT", "file_key_name": "models.silver__block"}, "test.algorand_models.not_null_silver__nft_sales_octorand_BLOCK_ID.ef8c73a020": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_BLOCK_ID.ef8c73a020", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_BLOCK_ID", "alias": "nft_sales_octorand_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.78277, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__nft_sales_octorand_TX_GROUP_ID.d7a0c0b8cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_TX_GROUP_ID.d7a0c0b8cd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_TX_GROUP_ID", "alias": "nft_sales_octorand_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.783564, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__nft_sales_octorand_PURCHASER.f812ed492a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_PURCHASER.f812ed492a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_PURCHASER", "alias": "nft_sales_octorand_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.784311, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__nft_sales_octorand_NFT_ASSET_ID.d630b4b99e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_NFT_ASSET_ID.d630b4b99e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_NFT_ASSET_ID", "alias": "nft_sales_octorand_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.785175, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.3095bef650": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.3095bef650", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT", "alias": "nft_sales_octorand_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.785913, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.e21a706379": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.e21a706379", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS", "alias": "nft_sales_octorand_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7866502, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_octorand\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id.bbd3ab6c2e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_73b770b4dbd517917ff87a3e50b6d3de\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_octorand')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_octorand"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_73b770b4dbd517917ff87a3e50b6d3de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id.bbd3ab6c2e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_73b770b4dbd517917ff87a3e50b6d3de.sql", "original_file_path": "models/silver/silver__nft_sales_octorand.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_octorand_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_octorand"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_octorand.yml/dbt_utils_unique_combination_o_73b770b4dbd517917ff87a3e50b6d3de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_73b770b4dbd517917ff87a3e50b6d3de"}, "created_at": 1667512711.7875211, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_octorand\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_octorand"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_BLOCK_ID.e7a45d5997": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_BLOCK_ID.e7a45d5997", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_BLOCK_ID", "alias": "swaps_pactfi_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.79163, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_intra.5506b0f43c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_intra.5506b0f43c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_intra", "alias": "swaps_pactfi_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.792418, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_tx_group_id.62967a4eff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_tx_group_id.62967a4eff", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_tx_group_id", "alias": "swaps_pactfi_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.793282, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_swapper.393df11234": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_swapper.393df11234", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_swapper", "alias": "swaps_pactfi_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512711.7941911, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom (select * from ALGORAND_DEV.silver.swaps_pactfi_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58.6a3cbd4b8d": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_88ab46369cc256aab6d7d083d6b16365\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_88ab46369cc256aab6d7d083d6b16365", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58.6a3cbd4b8d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_88ab46369cc256aab6d7d083d6b16365.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58", "alias": "swaps_pactfi_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/dbt_expectations_expect_column_88ab46369cc256aab6d7d083d6b16365.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_88ab46369cc256aab6d7d083d6b16365"}, "created_at": 1667512711.794952, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_pactfi_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_asset_id.2dc309f64f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_asset_id.2dc309f64f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_swap_from_asset_id", "alias": "swaps_pactfi_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512711.7971451, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom (select * from ALGORAND_DEV.silver.swaps_pactfi_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_amount.19a7b3a19f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_amount.19a7b3a19f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_swap_from_amount", "alias": "swaps_pactfi_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512711.798079, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom (select * from ALGORAND_DEV.silver.swaps_pactfi_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_pool_address.ecd7ff2842": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_pool_address.ecd7ff2842", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_pool_address", "alias": "swaps_pactfi_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.7989912, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58.d85e6df9cf": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7bc34c05a6bcf357cb71b2b30eec007e\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7bc34c05a6bcf357cb71b2b30eec007e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58.d85e6df9cf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_7bc34c05a6bcf357cb71b2b30eec007e.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58", "alias": "swaps_pactfi_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/dbt_expectations_expect_column_7bc34c05a6bcf357cb71b2b30eec007e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7bc34c05a6bcf357cb71b2b30eec007e"}, "created_at": 1667512711.799752, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_pactfi_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_asset_id.524cb829ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_asset_id.524cb829ba", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_swap_to_asset_id", "alias": "swaps_pactfi_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.801766, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_amount.45d1647f55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_pactfi_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_amount.45d1647f55", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_pactfi_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "not_null_silver__swaps_pactfi_dex_swap_to_amount", "alias": "swaps_pactfi_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/not_null_silver__swaps_pactfi_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.802525, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_pactfi_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra.8ccc491a92": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f92bda23b511a08b63d3ec14948b73fa\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_pactfi_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_pactfi_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f92bda23b511a08b63d3ec14948b73fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra.8ccc491a92", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_f92bda23b511a08b63d3ec14948b73fa.sql", "original_file_path": "models/silver/silver__swaps_pactfi_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra", "alias": "swaps_pactfi_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_pactfi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_pactfi_dex.yml/dbt_utils_unique_combination_o_f92bda23b511a08b63d3ec14948b73fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f92bda23b511a08b63d3ec14948b73fa"}, "created_at": 1667512711.803285, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_pactfi_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_pactfi_dex"}, "test.algorand_models.not_null_silver__transaction_BLOCK_ID.73847273f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_BLOCK_ID.73847273f7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "not_null_silver__transaction_BLOCK_ID", "alias": "transaction_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/not_null_silver__transaction_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8067641, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.transaction\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transaction"}, "test.algorand_models.not_null_silver__transaction_INTRA.23b710b3ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_INTRA"], "unique_id": "test.algorand_models.not_null_silver__transaction_INTRA.23b710b3ad", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_INTRA.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "not_null_silver__transaction_INTRA", "alias": "transaction_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/not_null_silver__transaction_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8075461, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.silver.transaction\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.silver__transaction"}, "test.algorand_models.not_null_silver__transaction_TX_ID.9e8d1f1573": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_TX_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_TX_ID.9e8d1f1573", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_TX_ID.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "not_null_silver__transaction_TX_ID", "alias": "transaction_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/not_null_silver__transaction_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.808307, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.silver.transaction\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__transaction"}, "test.algorand_models.not_null_silver__transaction_INNER_TX.c48b59c073": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_INNER_TX"], "unique_id": "test.algorand_models.not_null_silver__transaction_INNER_TX.c48b59c073", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_INNER_TX.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "not_null_silver__transaction_INNER_TX", "alias": "transaction_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/not_null_silver__transaction_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.809057, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.silver.transaction\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.silver__transaction"}, "test.algorand_models.not_null_silver__transaction_TX_TYPE.cfe523843a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_TX_TYPE"], "unique_id": "test.algorand_models.not_null_silver__transaction_TX_TYPE.cfe523843a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_TX_TYPE.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "not_null_silver__transaction_TX_TYPE", "alias": "transaction_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/not_null_silver__transaction_TX_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.809925, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TYPE\nfrom ALGORAND_DEV.silver.transaction\nwhere TX_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TYPE", "file_key_name": "models.silver__transaction"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA.f4b59b8edf": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bc98213d280d4d75f9d88ec231373622\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('silver__transaction')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bc98213d280d4d75f9d88ec231373622", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA.f4b59b8edf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_bc98213d280d4d75f9d88ec231373622.sql", "original_file_path": "models/silver/silver__transaction.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA", "alias": "transaction_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction.yml/dbt_utils_unique_combination_o_bc98213d280d4d75f9d88ec231373622.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bc98213d280d4d75f9d88ec231373622"}, "created_at": 1667512711.810682, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA\n    from ALGORAND_DEV.silver.transaction\n    group by BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transaction"}, "test.algorand_models.not_null_silver__price_swap_BLOCK_HOUR.6349e4ca1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('silver__price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_swap_BLOCK_HOUR"], "unique_id": "test.algorand_models.not_null_silver__price_swap_BLOCK_HOUR.6349e4ca1c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_swap_BLOCK_HOUR.sql", "original_file_path": "models/silver/silver__price_swap.yml", "name": "not_null_silver__price_swap_BLOCK_HOUR", "alias": "price_swap_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.yml/not_null_silver__price_swap_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.814284, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HOUR\nfrom ALGORAND_DEV.silver.price_swap\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.silver__price_swap"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1.682631679a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3eebe8b6f828c3b023e0cbe67f3655dc\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('silver__price_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3eebe8b6f828c3b023e0cbe67f3655dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1.682631679a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_3eebe8b6f828c3b023e0cbe67f3655dc.sql", "original_file_path": "models/silver/silver__price_swap.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1", "alias": "price_swap_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.yml/dbt_expectations_expect_row_va_3eebe8b6f828c3b023e0cbe67f3655dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3eebe8b6f828c3b023e0cbe67f3655dc"}, "created_at": 1667512711.815439, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.silver.price_swap\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.silver__price_swap"}, "test.algorand_models.not_null_silver__price_swap_ASSET_ID.b7bb14bef1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_swap_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__price_swap_ASSET_ID.b7bb14bef1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_swap_ASSET_ID.sql", "original_file_path": "models/silver/silver__price_swap.yml", "name": "not_null_silver__price_swap_ASSET_ID", "alias": "price_swap_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.yml/not_null_silver__price_swap_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.818008, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.price_swap\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__price_swap"}, "test.algorand_models.not_null_silver__price_swap_PRICE_USD.8aa1fa2d31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver__price_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_swap_PRICE_USD"], "unique_id": "test.algorand_models.not_null_silver__price_swap_PRICE_USD.8aa1fa2d31", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_swap_PRICE_USD.sql", "original_file_path": "models/silver/silver__price_swap.yml", "name": "not_null_silver__price_swap_PRICE_USD", "alias": "price_swap_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.yml/not_null_silver__price_swap_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.818762, "compiled_sql": "\n    \n    \n\n\n\nselect PRICE_USD\nfrom ALGORAND_DEV.silver.price_swap\nwhere PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver__price_swap"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id.92926e4bfc": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a8da5dce212ef2a1b9ab1695851eb270\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_hour", "asset_id"], "model": "{{ get_where_subquery(ref('silver__price_swap')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_swap"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a8da5dce212ef2a1b9ab1695851eb270", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id.92926e4bfc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_a8da5dce212ef2a1b9ab1695851eb270.sql", "original_file_path": "models/silver/silver__price_swap.yml", "name": "dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id", "alias": "price_swap_block_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_swap.yml/dbt_utils_unique_combination_o_a8da5dce212ef2a1b9ab1695851eb270.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a8da5dce212ef2a1b9ab1695851eb270"}, "created_at": 1667512711.819517, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_hour, asset_id\n    from ALGORAND_DEV.silver.price_swap\n    group by block_hour, asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__price_swap"}, "test.algorand_models.not_null_silver__application_APP_ID.08ff7e7ae1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_ID", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__application_APP_ID"], "unique_id": "test.algorand_models.not_null_silver__application_APP_ID.08ff7e7ae1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__application_APP_ID.sql", "original_file_path": "models/silver/silver__application.yml", "name": "not_null_silver__application_APP_ID", "alias": "application_APP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/not_null_silver__application_APP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.823058, "compiled_sql": "\n    \n    \n\n\n\nselect APP_ID\nfrom ALGORAND_DEV.silver.application\nwhere APP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_ID", "file_key_name": "models.silver__application"}, "test.algorand_models.unique_silver__application_APP_ID.f820ae939f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "APP_ID", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_silver", "fqn": ["algorand_models", "silver", "unique_silver__application_APP_ID"], "unique_id": "test.algorand_models.unique_silver__application_APP_ID.f820ae939f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_silver__application_APP_ID.sql", "original_file_path": "models/silver/silver__application.yml", "name": "unique_silver__application_APP_ID", "alias": "application_APP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/unique_silver__application_APP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.823851, "compiled_sql": "\n    \n    \n\nselect\n    APP_ID as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.silver.application\nwhere APP_ID is not null\ngroup by APP_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_ID", "file_key_name": "models.silver__application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_PARAMS.1c9bd89cee": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f2474741a4284256a8e3d6cb1ff078b7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PARAMS", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f2474741a4284256a8e3d6cb1ff078b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__application_PARAMS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_PARAMS.1c9bd89cee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_f2474741a4284256a8e3d6cb1ff078b7.sql", "original_file_path": "models/silver/silver__application.yml", "name": "dbt_expectations_expect_column_to_exist_silver__application_PARAMS", "alias": "application_PARAMS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/dbt_expectations_expect_column_f2474741a4284256a8e3d6cb1ff078b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f2474741a4284256a8e3d6cb1ff078b7"}, "created_at": 1667512711.8246112, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PARAMS' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PARAMS", "file_key_name": "models.silver__application"}, "test.algorand_models.not_null_silver__application_APP_CLOSED.6fe9e79b99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_CLOSED", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__application_APP_CLOSED"], "unique_id": "test.algorand_models.not_null_silver__application_APP_CLOSED.6fe9e79b99", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__application_APP_CLOSED.sql", "original_file_path": "models/silver/silver__application.yml", "name": "not_null_silver__application_APP_CLOSED", "alias": "application_APP_CLOSED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/not_null_silver__application_APP_CLOSED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8265018, "compiled_sql": "\n    \n    \n\n\n\nselect APP_CLOSED\nfrom ALGORAND_DEV.silver.application\nwhere APP_CLOSED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_CLOSED", "file_key_name": "models.silver__application"}, "test.algorand_models.not_null_silver__application_CREATOR_ADDRESS.04da7d360f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__application_CREATOR_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__application_CREATOR_ADDRESS.04da7d360f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__application_CREATOR_ADDRESS.sql", "original_file_path": "models/silver/silver__application.yml", "name": "not_null_silver__application_CREATOR_ADDRESS", "alias": "application_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/not_null_silver__application_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8272681, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR_ADDRESS\nfrom ALGORAND_DEV.silver.application\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__application"}, "test.algorand_models.not_null_silver__application_CREATED_AT.bb24db5ca8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__application_CREATED_AT"], "unique_id": "test.algorand_models.not_null_silver__application_CREATED_AT.bb24db5ca8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__application_CREATED_AT.sql", "original_file_path": "models/silver/silver__application.yml", "name": "not_null_silver__application_CREATED_AT", "alias": "application_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/not_null_silver__application_CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.828015, "compiled_sql": "\n    \n    \n\n\n\nselect CREATED_AT\nfrom ALGORAND_DEV.silver.application\nwhere CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT", "file_key_name": "models.silver__application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT.c58fb3849d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4e1d87f843d2522c22a1bb8e806336f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CLOSED_AT", "model": "{{ get_where_subquery(ref('silver__application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4e1d87f843d2522c22a1bb8e806336f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT.c58fb3849d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_a4e1d87f843d2522c22a1bb8e806336f.sql", "original_file_path": "models/silver/silver__application.yml", "name": "dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT", "alias": "application_CLOSED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__application.yml/dbt_expectations_expect_column_a4e1d87f843d2522c22a1bb8e806336f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a4e1d87f843d2522c22a1bb8e806336f"}, "created_at": 1667512711.828907, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CLOSED_AT' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSED_AT", "file_key_name": "models.silver__application"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_BLOCK_ID.c5b61b87d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_BLOCK_ID.c5b61b87d4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_BLOCK_ID", "alias": "nft_sales_rand_gallery_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.832028, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.a326ed7248": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.a326ed7248", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID", "alias": "nft_sales_rand_gallery_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.832811, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_PURCHASER.306d4a35eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_PURCHASER.306d4a35eb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_PURCHASER", "alias": "nft_sales_rand_gallery_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8335621, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.76b7258306": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.76b7258306", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID", "alias": "nft_sales_rand_gallery_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.834421, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.19e7255ea0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.19e7255ea0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT", "alias": "nft_sales_rand_gallery_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8351629, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.2d9c0c44df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.2d9c0c44df", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS", "alias": "nft_sales_rand_gallery_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.835906, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_rand_gallery\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id.f14d68fdfa": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_79d35eae8cb69431c598f66b1150e0b3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_rand_gallery')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_rand_gallery"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_79d35eae8cb69431c598f66b1150e0b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id.f14d68fdfa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_79d35eae8cb69431c598f66b1150e0b3.sql", "original_file_path": "models/silver/silver__nft_sales_rand_gallery.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_rand_gallery_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_rand_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_rand_gallery.yml/dbt_utils_unique_combination_o_79d35eae8cb69431c598f66b1150e0b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_79d35eae8cb69431c598f66b1150e0b3"}, "created_at": 1667512711.836778, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_rand_gallery\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_rand_gallery"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.b4cbd7d657": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.b4cbd7d657", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_BLOCK_ID", "alias": "swaps_wagmiswap_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.840891, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_intra.3d9c52b43b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_intra.3d9c52b43b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_intra", "alias": "swaps_wagmiswap_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8416882, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_tx_group_id.e7e94ff81a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_tx_group_id.e7e94ff81a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_tx_group_id", "alias": "swaps_wagmiswap_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.842548, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swapper.6ae46af8a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swapper.6ae46af8a3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_swapper", "alias": "swaps_wagmiswap_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.843298, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58.dc85bcb0f6": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c0a48dd9472faf46390e85eee52e991c\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c0a48dd9472faf46390e85eee52e991c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58.dc85bcb0f6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_c0a48dd9472faf46390e85eee52e991c.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58", "alias": "swaps_wagmiswap_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/dbt_expectations_expect_column_c0a48dd9472faf46390e85eee52e991c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c0a48dd9472faf46390e85eee52e991c"}, "created_at": 1667512711.844044, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_wagmiswap_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.67b2dff21e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.67b2dff21e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id", "alias": "swaps_wagmiswap_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.846101, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_amount.e884b5a4e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_amount.e884b5a4e3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_swap_from_amount", "alias": "swaps_wagmiswap_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.846857, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_pool_address.63760c77a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_pool_address.63760c77a3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_pool_address", "alias": "swaps_wagmiswap_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.847948, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58.fc9934fcfd": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_072e277facbe3817151e1dbb5c707464\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_072e277facbe3817151e1dbb5c707464", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58.fc9934fcfd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_072e277facbe3817151e1dbb5c707464.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58", "alias": "swaps_wagmiswap_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/dbt_expectations_expect_column_072e277facbe3817151e1dbb5c707464.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_072e277facbe3817151e1dbb5c707464"}, "created_at": 1667512711.848723, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_wagmiswap_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.6fa1945ee9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.6fa1945ee9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id", "alias": "swaps_wagmiswap_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.850743, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_amount.d10ba0bda6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_wagmiswap_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_amount.d10ba0bda6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_wagmiswap_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "not_null_silver__swaps_wagmiswap_dex_swap_to_amount", "alias": "swaps_wagmiswap_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/not_null_silver__swaps_wagmiswap_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.851506, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_wagmiswap_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra.fdd99e35bb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7012c960d107c7c56696bd356be31466\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_wagmiswap_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_wagmiswap_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7012c960d107c7c56696bd356be31466", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra.fdd99e35bb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_7012c960d107c7c56696bd356be31466.sql", "original_file_path": "models/silver/silver__swaps_wagmiswap_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra", "alias": "swaps_wagmiswap_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_wagmiswap_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_wagmiswap_dex.yml/dbt_utils_unique_combination_o_7012c960d107c7c56696bd356be31466.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7012c960d107c7c56696bd356be31466"}, "created_at": 1667512711.85226, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_wagmiswap_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_wagmiswap_dex"}, "test.algorand_models.not_null_silver__transaction_reward_BLOCK_ID.859a62bbbb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_reward_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_reward_BLOCK_ID.859a62bbbb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_reward_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "not_null_silver__transaction_reward_BLOCK_ID", "alias": "transaction_reward_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/not_null_silver__transaction_reward_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.855497, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.transaction_reward\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.not_null_silver__transaction_reward_INTRA.cd79743d98": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_reward_INTRA"], "unique_id": "test.algorand_models.not_null_silver__transaction_reward_INTRA.cd79743d98", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_reward_INTRA.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "not_null_silver__transaction_reward_INTRA", "alias": "transaction_reward_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/not_null_silver__transaction_reward_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.856408, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.silver.transaction_reward\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.not_null_silver__transaction_reward_TX_ID.8194087f63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_reward_TX_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_reward_TX_ID.8194087f63", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_reward_TX_ID.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "not_null_silver__transaction_reward_TX_ID", "alias": "transaction_reward_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/not_null_silver__transaction_reward_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.857163, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.silver.transaction_reward\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.not_null_silver__transaction_reward_ACCOUNT.1863bbe76a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT", "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_reward_ACCOUNT"], "unique_id": "test.algorand_models.not_null_silver__transaction_reward_ACCOUNT.1863bbe76a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_reward_ACCOUNT.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "not_null_silver__transaction_reward_ACCOUNT", "alias": "transaction_reward_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/not_null_silver__transaction_reward_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.857915, "compiled_sql": "\n    \n    \n\n\n\nselect ACCOUNT\nfrom ALGORAND_DEV.silver.transaction_reward\nwhere ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT", "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.not_null_silver__transaction_reward_AMOUNT.24f4563f6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_reward_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__transaction_reward_AMOUNT.24f4563f6b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_reward_AMOUNT.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "not_null_silver__transaction_reward_AMOUNT", "alias": "transaction_reward_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/not_null_silver__transaction_reward_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.858788, "compiled_sql": "\n    \n    \n\n\n\nselect AMOUNT\nfrom ALGORAND_DEV.silver.transaction_reward\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT.0090e98c54": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3747eaafa73562cd83ff1c54bab883e7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA", "ACCOUNT"], "model": "{{ get_where_subquery(ref('silver__transaction_reward')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_reward"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3747eaafa73562cd83ff1c54bab883e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT.0090e98c54", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_3747eaafa73562cd83ff1c54bab883e7.sql", "original_file_path": "models/silver/silver__transaction_reward.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT", "alias": "transaction_reward_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_reward.yml/dbt_utils_unique_combination_o_3747eaafa73562cd83ff1c54bab883e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3747eaafa73562cd83ff1c54bab883e7"}, "created_at": 1667512711.859552, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA, ACCOUNT\n    from ALGORAND_DEV.silver.transaction_reward\n    group by BLOCK_ID, INTRA, ACCOUNT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transaction_reward"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_BLOCK_ID.98dd0bdc0a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_BLOCK_ID.98dd0bdc0a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_BLOCK_ID", "alias": "swaps_algofi_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.863633, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_intra.98d93ae8b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_intra.98d93ae8b7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_intra", "alias": "swaps_algofi_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8645482, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_tx_group_id.3d5dd1ff0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_tx_group_id.3d5dd1ff0d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_tx_group_id", "alias": "swaps_algofi_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.865312, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_swapper.421346ea97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_swapper.421346ea97", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_swapper", "alias": "swaps_algofi_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.866069, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58.a6ac153861": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d86cd0e4c8a61a6f83e6149871e9ca4d\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d86cd0e4c8a61a6f83e6149871e9ca4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58.a6ac153861", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_d86cd0e4c8a61a6f83e6149871e9ca4d.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58", "alias": "swaps_algofi_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/dbt_expectations_expect_column_d86cd0e4c8a61a6f83e6149871e9ca4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d86cd0e4c8a61a6f83e6149871e9ca4d"}, "created_at": 1667512711.866818, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_algofi_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_asset_id.c1a6419420": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_asset_id.c1a6419420", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_swap_from_asset_id", "alias": "swaps_algofi_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.86886, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_amount.3d25d19044": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_amount.3d25d19044", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_swap_from_amount", "alias": "swaps_algofi_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.869616, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_pool_address.67d3750512": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_pool_address.67d3750512", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_pool_address", "alias": "swaps_algofi_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8704839, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58.93df58b5bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7161a257c9532cc52bc389ad5e557333\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7161a257c9532cc52bc389ad5e557333", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58.93df58b5bd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_7161a257c9532cc52bc389ad5e557333.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58", "alias": "swaps_algofi_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/dbt_expectations_expect_column_7161a257c9532cc52bc389ad5e557333.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7161a257c9532cc52bc389ad5e557333"}, "created_at": 1667512711.871233, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_algofi_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_asset_id.dbe640dcb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_asset_id.dbe640dcb6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_swap_to_asset_id", "alias": "swaps_algofi_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8732648, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_amount.44952a511b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_algofi_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_amount.44952a511b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_algofi_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "not_null_silver__swaps_algofi_dex_swap_to_amount", "alias": "swaps_algofi_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/not_null_silver__swaps_algofi_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.87402, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_algofi_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra.f354df7981": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a17e6970c0b226d1b7920048e29de957\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_algofi_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_algofi_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a17e6970c0b226d1b7920048e29de957", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra.f354df7981", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_a17e6970c0b226d1b7920048e29de957.sql", "original_file_path": "models/silver/silver__swaps_algofi_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra", "alias": "swaps_algofi_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_algofi_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_algofi_dex.yml/dbt_utils_unique_combination_o_a17e6970c0b226d1b7920048e29de957.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a17e6970c0b226d1b7920048e29de957"}, "created_at": 1667512711.8747678, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_algofi_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_algofi_dex"}, "test.algorand_models.not_null_silver__pool_addresses_BLOCKCHAIN.8fd4ef2a99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_BLOCKCHAIN"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_BLOCKCHAIN.8fd4ef2a99", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_BLOCKCHAIN", "alias": "pool_addresses_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8784618, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_CREATOR.0ff3d70081": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_CREATOR"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_CREATOR.0ff3d70081", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_CREATOR.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_CREATOR", "alias": "pool_addresses_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.879251, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_LABEL_TYPE.d90a726e77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_LABEL_TYPE"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_LABEL_TYPE.d90a726e77", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_LABEL_TYPE.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_LABEL_TYPE", "alias": "pool_addresses_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.88, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_TYPE\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.4f780a52a1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b087e1bcf912b14fcab26ec848e9021f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b087e1bcf912b14fcab26ec848e9021f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.4f780a52a1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_b087e1bcf912b14fcab26ec848e9021f.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "pool_addresses_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/dbt_expectations_expect_column_b087e1bcf912b14fcab26ec848e9021f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b087e1bcf912b14fcab26ec848e9021f"}, "created_at": 1667512711.8811572, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from ALGORAND_DEV.silver.pool_addresses\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_LABEL_SUBTYPE.6aebecdf34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_LABEL_SUBTYPE"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_LABEL_SUBTYPE.6aebecdf34", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_LABEL_SUBTYPE.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_LABEL_SUBTYPE", "alias": "pool_addresses_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.884646, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_SUBTYPE\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_LABEL.5c3688625f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_LABEL"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_LABEL.5c3688625f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_LABEL.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_LABEL", "alias": "pool_addresses_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.885407, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_ADDRESS_NAME.8c7c022029": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_ADDRESS_NAME"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_ADDRESS_NAME.8c7c022029", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_ADDRESS_NAME.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_ADDRESS_NAME", "alias": "pool_addresses_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_ADDRESS_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8862772, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__pool_addresses_ADDRESS.d99ec0b796": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__pool_addresses_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__pool_addresses_ADDRESS.d99ec0b796", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__pool_addresses_ADDRESS.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "not_null_silver__pool_addresses_ADDRESS", "alias": "pool_addresses_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/not_null_silver__pool_addresses_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8870232, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.pool_addresses\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58.d5b2c4aaed": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCKCHAIN = 'algorand'\",alias=\"dbt_expectations_expect_column_e76545e4fad9b11c1a5429888e5c5412\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e76545e4fad9b11c1a5429888e5c5412", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'algorand'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58.d5b2c4aaed", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_e76545e4fad9b11c1a5429888e5c5412.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58", "alias": "pool_addresses_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/dbt_expectations_expect_column_e76545e4fad9b11c1a5429888e5c5412.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCKCHAIN = 'algorand'", "alias": "dbt_expectations_expect_column_e76545e4fad9b11c1a5429888e5c5412"}, "created_at": 1667512711.8879309, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        ADDRESS\n    ) = 58 as expression\n\n\n    from (select * from ALGORAND_DEV.silver.pool_addresses where BLOCKCHAIN = 'algorand') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS.31edac2886": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_81db2f13ae97a2db59a568c06be919e6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver__pool_addresses')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__pool_addresses"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_81db2f13ae97a2db59a568c06be919e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS.31edac2886", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_81db2f13ae97a2db59a568c06be919e6.sql", "original_file_path": "models/silver/silver__pool_addresses.yml", "name": "dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "pool_addresses_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_addresses"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__pool_addresses.yml/dbt_utils_unique_combination_o_81db2f13ae97a2db59a568c06be919e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_81db2f13ae97a2db59a568c06be919e6"}, "created_at": 1667512711.890017, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from ALGORAND_DEV.silver.pool_addresses\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__pool_addresses"}, "test.algorand_models.not_null_silver__asset_ASSET_ID.e971a1fdb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__asset_ASSET_ID.e971a1fdb2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_ASSET_ID.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "not_null_silver__asset_ASSET_ID", "alias": "asset_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/not_null_silver__asset_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8954382, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.asset\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__asset"}, "test.algorand_models.unique_silver__asset_ASSET_ID.0836fe2d9c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_silver", "fqn": ["algorand_models", "silver", "unique_silver__asset_ASSET_ID"], "unique_id": "test.algorand_models.unique_silver__asset_ASSET_ID.0836fe2d9c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_silver__asset_ASSET_ID.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "unique_silver__asset_ASSET_ID", "alias": "asset_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/unique_silver__asset_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.89632, "compiled_sql": "\n    \n    \n\nselect\n    ASSET_ID as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.silver.asset\nwhere ASSET_ID is not null\ngroup by ASSET_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY.bb6db25b12": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df6e6dc2e7497b5f862f0bed4e7a02f1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df6e6dc2e7497b5f862f0bed4e7a02f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY.bb6db25b12", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_df6e6dc2e7497b5f862f0bed4e7a02f1.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY", "alias": "asset_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/dbt_expectations_expect_column_df6e6dc2e7497b5f862f0bed4e7a02f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_df6e6dc2e7497b5f862f0bed4e7a02f1"}, "created_at": 1667512711.897216, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.silver__asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.33c56fa891": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ASSET_URL", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.33c56fa891", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL", "alias": "asset_ASSET_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.8990889, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ASSET_URL' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_URL", "file_key_name": "models.silver__asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.f605f51959": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.f605f51959", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS", "alias": "asset_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.900854, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DECIMALS' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.silver__asset"}, "test.algorand_models.not_null_silver__asset_ASSET_DELETED.f24d24907a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_DELETED", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_ASSET_DELETED"], "unique_id": "test.algorand_models.not_null_silver__asset_ASSET_DELETED.f24d24907a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_ASSET_DELETED.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "not_null_silver__asset_ASSET_DELETED", "alias": "asset_ASSET_DELETED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/not_null_silver__asset_ASSET_DELETED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.902624, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_DELETED\nfrom ALGORAND_DEV.silver.asset\nwhere ASSET_DELETED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_DELETED", "file_key_name": "models.silver__asset"}, "test.algorand_models.not_null_silver__asset_CREATOR_ADDRESS.dc8aa21238": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_CREATOR_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__asset_CREATOR_ADDRESS.dc8aa21238", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_CREATOR_ADDRESS.sql", "original_file_path": "models/silver/silver__asset.yml", "name": "not_null_silver__asset_CREATOR_ADDRESS", "alias": "asset_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset.yml/not_null_silver__asset_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9033768, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR_ADDRESS\nfrom ALGORAND_DEV.silver.asset\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__asset"}, "test.algorand_models.not_null_silver__hourly_pool_balances_ADDRESS.a2de2c4657": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__hourly_pool_balances_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__hourly_pool_balances_ADDRESS.a2de2c4657", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__hourly_pool_balances_ADDRESS.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "not_null_silver__hourly_pool_balances_ADDRESS", "alias": "hourly_pool_balances_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/not_null_silver__hourly_pool_balances_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.905128, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.hourly_pool_balances\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.not_null_silver__hourly_pool_balances_DATE.709c6a9e62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__hourly_pool_balances_DATE"], "unique_id": "test.algorand_models.not_null_silver__hourly_pool_balances_DATE.709c6a9e62", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__hourly_pool_balances_DATE.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "not_null_silver__hourly_pool_balances_DATE", "alias": "hourly_pool_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/not_null_silver__hourly_pool_balances_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.906112, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom ALGORAND_DEV.silver.hourly_pool_balances\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1.f554545e46": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_45285b7a5c7064e2e36da1a348febf68\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DATE", "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_45285b7a5c7064e2e36da1a348febf68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1.f554545e46", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_45285b7a5c7064e2e36da1a348febf68.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1", "alias": "hourly_pool_balances_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/dbt_expectations_expect_row_va_45285b7a5c7064e2e36da1a348febf68.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_45285b7a5c7064e2e36da1a348febf68"}, "created_at": 1667512711.90688, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DATE as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.silver.hourly_pool_balances\n    where\n        -- to exclude erroneous future dates\n        cast(DATE as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.not_null_silver__hourly_pool_balances_ASSET_ID.dfce0aa5dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__hourly_pool_balances_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__hourly_pool_balances_ASSET_ID.dfce0aa5dc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__hourly_pool_balances_ASSET_ID.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "not_null_silver__hourly_pool_balances_ASSET_ID", "alias": "hourly_pool_balances_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/not_null_silver__hourly_pool_balances_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9096231, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.hourly_pool_balances\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.not_null_silver__hourly_pool_balances_BALANCE.a6c2070cca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE", "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__hourly_pool_balances_BALANCE"], "unique_id": "test.algorand_models.not_null_silver__hourly_pool_balances_BALANCE.a6c2070cca", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__hourly_pool_balances_BALANCE.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "not_null_silver__hourly_pool_balances_BALANCE", "alias": "hourly_pool_balances_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/not_null_silver__hourly_pool_balances_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9105139, "compiled_sql": "\n    \n    \n\n\n\nselect BALANCE\nfrom ALGORAND_DEV.silver.hourly_pool_balances\nwhere BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID.f70e558863": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d14e2fe04080fd806680dfe52c28c889\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "DATE", "ASSET_ID"], "model": "{{ get_where_subquery(ref('silver__hourly_pool_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__hourly_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d14e2fe04080fd806680dfe52c28c889", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID.f70e558863", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_d14e2fe04080fd806680dfe52c28c889.sql", "original_file_path": "models/silver/silver__hourly_pool_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID", "alias": "hourly_pool_balances_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__hourly_pool_balances.yml/dbt_utils_unique_combination_o_d14e2fe04080fd806680dfe52c28c889.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d14e2fe04080fd806680dfe52c28c889"}, "created_at": 1667512711.911274, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, DATE, ASSET_ID\n    from ALGORAND_DEV.silver.hourly_pool_balances\n    group by ADDRESS, DATE, ASSET_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__hourly_pool_balances"}, "test.algorand_models.not_null_silver__transaction_participation_intra.945c791c91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_participation_intra"], "unique_id": "test.algorand_models.not_null_silver__transaction_participation_intra.945c791c91", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_participation_intra.sql", "original_file_path": "models/silver/silver__transaction_participation.yml", "name": "not_null_silver__transaction_participation_intra", "alias": "transaction_participation_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_participation.yml/not_null_silver__transaction_participation_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.914668, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.transaction_participation\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__transaction_participation"}, "test.algorand_models.not_null_silver__transaction_participation_BLOCK_ID.1aea6e628b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_participation_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_participation_BLOCK_ID.1aea6e628b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_participation_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transaction_participation.yml", "name": "not_null_silver__transaction_participation_BLOCK_ID", "alias": "transaction_participation_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_participation.yml/not_null_silver__transaction_participation_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.915454, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.transaction_participation\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transaction_participation"}, "test.algorand_models.not_null_silver__transaction_participation_ADDRESS.672784f40f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_participation_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__transaction_participation_ADDRESS.672784f40f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_participation_ADDRESS.sql", "original_file_path": "models/silver/silver__transaction_participation.yml", "name": "not_null_silver__transaction_participation_ADDRESS", "alias": "transaction_participation_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_participation.yml/not_null_silver__transaction_participation_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.916346, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.transaction_participation\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__transaction_participation"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA.c01379657f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3b5af606fe74a3667c06078cc3127759\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "BLOCK_ID", "INTRA"], "model": "{{ get_where_subquery(ref('silver__transaction_participation')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3b5af606fe74a3667c06078cc3127759", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA.c01379657f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_3b5af606fe74a3667c06078cc3127759.sql", "original_file_path": "models/silver/silver__transaction_participation.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA", "alias": "transaction_participation_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_participation.yml/dbt_utils_unique_combination_o_3b5af606fe74a3667c06078cc3127759.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3b5af606fe74a3667c06078cc3127759"}, "created_at": 1667512711.917105, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, BLOCK_ID, INTRA\n    from ALGORAND_DEV.silver.transaction_participation\n    group by ADDRESS, BLOCK_ID, INTRA\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transaction_participation"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_BLOCK_ID.8949c67df2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_BLOCK_ID.8949c67df2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_BLOCK_ID", "alias": "nft_sales_nftdomains_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.920641, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.409efff1ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.409efff1ad", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_TX_GROUP_ID", "alias": "nft_sales_nftdomains_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.921452, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_PURCHASER.3a00107c53": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_PURCHASER.3a00107c53", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_PURCHASER", "alias": "nft_sales_nftdomains_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.922417, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.e65675dda5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.e65675dda5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID", "alias": "nft_sales_nftdomains_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.923218, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.e8aa0fb38a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.e8aa0fb38a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT", "alias": "nft_sales_nftdomains_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9239721, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.5613eac93a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.5613eac93a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS", "alias": "nft_sales_nftdomains_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.92485, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_nftdomains\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id.fd9462bf3f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c1e696037fdfbfc4120dd74d818beab5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_nftdomains')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_nftdomains"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c1e696037fdfbfc4120dd74d818beab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id.fd9462bf3f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_c1e696037fdfbfc4120dd74d818beab5.sql", "original_file_path": "models/silver/silver__nft_sales_nftdomains.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_nftdomains_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_nftdomains"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_nftdomains.yml/dbt_utils_unique_combination_o_c1e696037fdfbfc4120dd74d818beab5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c1e696037fdfbfc4120dd74d818beab5"}, "created_at": 1667512711.925602, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_nftdomains\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_nftdomains"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_BLOCK_ID.07727af353": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_BLOCK_ID.07727af353", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_BLOCK_ID", "alias": "nft_atomic_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.929234, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_TX_GROUP_ID.2eefef9533": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_TX_GROUP_ID.2eefef9533", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_TX_GROUP_ID", "alias": "nft_atomic_swaps_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.930014, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_PURCHASER.0a3bf64aac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_PURCHASER.0a3bf64aac", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_PURCHASER", "alias": "nft_atomic_swaps_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.930906, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.04d59374ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.04d59374ba", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_NFT_ASSET_ID", "alias": "nft_atomic_swaps_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.931651, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.fb805c0885": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.fb805c0885", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS", "alias": "nft_atomic_swaps_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.932393, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.488d456c48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.488d456c48", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT", "alias": "nft_atomic_swaps_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9332721, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_atomic_swaps\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id.a6448d1fe4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_26aa5720f2a6579139d40c78e75b791c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "nft_asset_id", "tx_group_id"], "model": "{{ get_where_subquery(ref('silver__nft_atomic_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_atomic_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_26aa5720f2a6579139d40c78e75b791c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id.a6448d1fe4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_26aa5720f2a6579139d40c78e75b791c.sql", "original_file_path": "models/silver/silver__nft_atomic_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id", "alias": "nft_atomic_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_atomic_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_atomic_swaps.yml/dbt_utils_unique_combination_o_26aa5720f2a6579139d40c78e75b791c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_26aa5720f2a6579139d40c78e75b791c"}, "created_at": 1667512711.934029, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, nft_asset_id, tx_group_id\n    from ALGORAND_DEV.silver.nft_atomic_swaps\n    group by BLOCK_ID, nft_asset_id, tx_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_atomic_swaps"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_BLOCK_ID.f33e57838b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_BLOCK_ID.f33e57838b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_BLOCK_ID", "alias": "nft_sales_algoxnft_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.937643, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.73c6955f60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.73c6955f60", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_TX_GROUP_ID", "alias": "nft_sales_algoxnft_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.938478, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_PURCHASER.3575feb666": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_PURCHASER.3575feb666", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_PURCHASER", "alias": "nft_sales_algoxnft_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.939373, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.9ed59f40e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.9ed59f40e0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID", "alias": "nft_sales_algoxnft_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9401312, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.340404e53b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.340404e53b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT", "alias": "nft_sales_algoxnft_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.940922, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.1a9660483f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.1a9660483f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS", "alias": "nft_sales_algoxnft_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9418051, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_algoxnft\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id.f1521defca": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1c0dbeb34caf9e4782688112ff5d602d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_algoxnft')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_algoxnft"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1c0dbeb34caf9e4782688112ff5d602d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id.f1521defca", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_1c0dbeb34caf9e4782688112ff5d602d.sql", "original_file_path": "models/silver/silver__nft_sales_algoxnft.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_algoxnft_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_algoxnft"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_algoxnft.yml/dbt_utils_unique_combination_o_1c0dbeb34caf9e4782688112ff5d602d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1c0dbeb34caf9e4782688112ff5d602d"}, "created_at": 1667512711.942563, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_algoxnft\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_algoxnft"}, "test.algorand_models.not_null_silver__account_ADDRESS.d1e28d6819": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__account_ADDRESS.d1e28d6819", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_ADDRESS.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_ADDRESS", "alias": "account_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9473002, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.silver.account\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__account"}, "test.algorand_models.unique_silver__account_ADDRESS.9ceb706a00": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_silver", "fqn": ["algorand_models", "silver", "unique_silver__account_ADDRESS"], "unique_id": "test.algorand_models.unique_silver__account_ADDRESS.9ceb706a00", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_silver__account_ADDRESS.sql", "original_file_path": "models/silver/silver__account.yml", "name": "unique_silver__account_ADDRESS", "alias": "account_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/unique_silver__account_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.948101, "compiled_sql": "\n    \n    \n\nselect\n    ADDRESS as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.silver.account\nwhere ADDRESS is not null\ngroup by ADDRESS\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__account_ADDRESS_RAW.d08a2402e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_RAW", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_ADDRESS_RAW"], "unique_id": "test.algorand_models.not_null_silver__account_ADDRESS_RAW.d08a2402e7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_ADDRESS_RAW.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_ADDRESS_RAW", "alias": "account_ADDRESS_RAW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_ADDRESS_RAW.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.948854, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_RAW\nfrom ALGORAND_DEV.silver.account\nwhere ADDRESS_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_RAW", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__account_ACCOUNT_CLOSED.13a3468e19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_CLOSED", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_ACCOUNT_CLOSED"], "unique_id": "test.algorand_models.not_null_silver__account_ACCOUNT_CLOSED.13a3468e19", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_ACCOUNT_CLOSED.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_ACCOUNT_CLOSED", "alias": "account_ACCOUNT_CLOSED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_ACCOUNT_CLOSED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.949596, "compiled_sql": "\n    \n    \n\n\n\nselect ACCOUNT_CLOSED\nfrom ALGORAND_DEV.silver.account\nwhere ACCOUNT_CLOSED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_CLOSED", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_BASE.231ac621af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_REWARDS_BASE", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_NON_ZERO_REWARDS_BASE"], "unique_id": "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_BASE.231ac621af", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_NON_ZERO_REWARDS_BASE.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_NON_ZERO_REWARDS_BASE", "alias": "account_NON_ZERO_REWARDS_BASE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_NON_ZERO_REWARDS_BASE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.950482, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_REWARDS_BASE\nfrom ALGORAND_DEV.silver.account\nwhere NON_ZERO_REWARDS_BASE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_REWARDS_BASE", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_TOTAL.41323d2d55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_REWARDS_TOTAL", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_NON_ZERO_REWARDS_TOTAL"], "unique_id": "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_TOTAL.41323d2d55", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_NON_ZERO_REWARDS_TOTAL.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_NON_ZERO_REWARDS_TOTAL", "alias": "account_NON_ZERO_REWARDS_TOTAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_NON_ZERO_REWARDS_TOTAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9512231, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_REWARDS_TOTAL\nfrom ALGORAND_DEV.silver.account\nwhere NON_ZERO_REWARDS_TOTAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_REWARDS_TOTAL", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__account_NON_ZERO_BALANCE.778794d321": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_BALANCE", "model": "{{ get_where_subquery(ref('silver__account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__account_NON_ZERO_BALANCE"], "unique_id": "test.algorand_models.not_null_silver__account_NON_ZERO_BALANCE.778794d321", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__account_NON_ZERO_BALANCE.sql", "original_file_path": "models/silver/silver__account.yml", "name": "not_null_silver__account_NON_ZERO_BALANCE", "alias": "account_NON_ZERO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__account.yml/not_null_silver__account_NON_ZERO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.951948, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_BALANCE\nfrom ALGORAND_DEV.silver.account\nwhere NON_ZERO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_BALANCE", "file_key_name": "models.silver__account"}, "test.algorand_models.not_null_silver__nft_sales_shufl_BLOCK_ID.b89e2e75aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_BLOCK_ID.b89e2e75aa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_BLOCK_ID", "alias": "nft_sales_shufl_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9540732, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__nft_sales_shufl_TX_GROUP_ID.2ce22b8fe9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_TX_GROUP_ID.2ce22b8fe9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_TX_GROUP_ID", "alias": "nft_sales_shufl_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.954849, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__nft_sales_shufl_PURCHASER.477ed9b890": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_PURCHASER.477ed9b890", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_PURCHASER", "alias": "nft_sales_shufl_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.955594, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__nft_sales_shufl_NFT_ASSET_ID.b4bc9df3ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_NFT_ASSET_ID.b4bc9df3ac", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_NFT_ASSET_ID", "alias": "nft_sales_shufl_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.95646, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.3c4e61432e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.3c4e61432e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT", "alias": "nft_sales_shufl_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9572039, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.1a9765f957": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.1a9765f957", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS", "alias": "nft_sales_shufl_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.957952, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_shufl\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id.54653b8ac1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6326a14c524767489636177bc4d1b268\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_shufl')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_shufl"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6326a14c524767489636177bc4d1b268", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id.54653b8ac1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_6326a14c524767489636177bc4d1b268.sql", "original_file_path": "models/silver/silver__nft_sales_shufl.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_shufl_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_shufl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_shufl.yml/dbt_utils_unique_combination_o_6326a14c524767489636177bc4d1b268.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6326a14c524767489636177bc4d1b268"}, "created_at": 1667512711.958835, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_shufl\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_shufl"}, "test.algorand_models.not_null_silver__transaction_close_BLOCK_ID.72301b1c99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_BLOCK_ID.72301b1c99", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_BLOCK_ID", "alias": "transaction_close_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.962543, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.transaction_close\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__transaction_close_INTRA.d88c0ad995": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_INTRA"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_INTRA.d88c0ad995", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_INTRA.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_INTRA", "alias": "transaction_close_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.963329, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.silver.transaction_close\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__transaction_close_TX_ID.c035f36d16": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_TX_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_TX_ID.c035f36d16", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_TX_ID.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_TX_ID", "alias": "transaction_close_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9642031, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.silver.transaction_close\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__transaction_close_ACCOUNT.98d8989fd1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_ACCOUNT"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_ACCOUNT.98d8989fd1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_ACCOUNT.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_ACCOUNT", "alias": "transaction_close_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9649558, "compiled_sql": "\n    \n    \n\n\n\nselect ACCOUNT\nfrom ALGORAND_DEV.silver.transaction_close\nwhere ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__transaction_close_ASSET_ID.cde2c35534": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_ASSET_ID.cde2c35534", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_ASSET_ID.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_ASSET_ID", "alias": "transaction_close_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9657001, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.transaction_close\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__transaction_close_AMOUNT.aff2c6ec1e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__transaction_close_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__transaction_close_AMOUNT.aff2c6ec1e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__transaction_close_AMOUNT.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "not_null_silver__transaction_close_AMOUNT", "alias": "transaction_close_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/not_null_silver__transaction_close_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9664419, "compiled_sql": "\n    \n    \n\n\n\nselect AMOUNT\nfrom ALGORAND_DEV.silver.transaction_close\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID.8abe5804e4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3764377809a8321e3808a4a4d36edf61\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "INTRA", "ACCOUNT", "ASSET_ID"], "model": "{{ get_where_subquery(ref('silver__transaction_close')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__transaction_close"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3764377809a8321e3808a4a4d36edf61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID.8abe5804e4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_3764377809a8321e3808a4a4d36edf61.sql", "original_file_path": "models/silver/silver__transaction_close.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID", "alias": "transaction_close_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__transaction_close.yml/dbt_utils_unique_combination_o_3764377809a8321e3808a4a4d36edf61.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3764377809a8321e3808a4a4d36edf61"}, "created_at": 1667512711.9673228, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, INTRA, ACCOUNT, ASSET_ID\n    from ALGORAND_DEV.silver.transaction_close\n    group by BLOCK_ID, INTRA, ACCOUNT, ASSET_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transaction_close"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.ddf896bbb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.ddf896bbb4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_BLOCK_ID", "alias": "nft_sales_ab2_gallery_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9793222, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.34cd6f2f48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.34cd6f2f48", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID", "alias": "nft_sales_ab2_gallery_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.980101, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_PURCHASER.9cfec0ecb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_PURCHASER.9cfec0ecb7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_PURCHASER", "alias": "nft_sales_ab2_gallery_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.981075, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.0d7ea781b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.0d7ea781b9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID", "alias": "nft_sales_ab2_gallery_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.981843, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.0bee5b1c62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.0bee5b1c62", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT", "alias": "nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9825861, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.d294567592": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.d294567592", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS", "alias": "nft_sales_ab2_gallery_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9833212, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_ab2_gallery\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id.ec0bf20e85": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7d4d402662445ebc3434cefe82992c11\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_ab2_gallery')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7d4d402662445ebc3434cefe82992c11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id.ec0bf20e85", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_7d4d402662445ebc3434cefe82992c11.sql", "original_file_path": "models/silver/silver__nft_sales_ab2_gallery.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_ab2_gallery_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_ab2_gallery.yml/dbt_utils_unique_combination_o_7d4d402662445ebc3434cefe82992c11.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7d4d402662445ebc3434cefe82992c11"}, "created_at": 1667512711.984194, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_ab2_gallery\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_ab2_gallery"}, "test.algorand_models.not_null_silver__asset_config_ASSET_ID.d90f759643": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__asset_config')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset_config"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_config_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__asset_config_ASSET_ID.d90f759643", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_config_ASSET_ID.sql", "original_file_path": "models/silver/silver__asset_config.yml", "name": "not_null_silver__asset_config_ASSET_ID", "alias": "asset_config_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_config"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.yml/not_null_silver__asset_config_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.9874618, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.silver.asset_config\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.silver__asset_config"}, "test.algorand_models.not_null_silver__asset_config_ASSET_NAME.594c42ab0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_NAME", "model": "{{ get_where_subquery(ref('silver__asset_config')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset_config"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_config_ASSET_NAME"], "unique_id": "test.algorand_models.not_null_silver__asset_config_ASSET_NAME.594c42ab0e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_config_ASSET_NAME.sql", "original_file_path": "models/silver/silver__asset_config.yml", "name": "not_null_silver__asset_config_ASSET_NAME", "alias": "asset_config_ASSET_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_config"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.yml/not_null_silver__asset_config_ASSET_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.988241, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_NAME\nfrom ALGORAND_DEV.silver.asset_config\nwhere ASSET_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_NAME", "file_key_name": "models.silver__asset_config"}, "test.algorand_models.not_null_silver__asset_config_ASSET_AMOUNT.4c0d85712c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__asset_config')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset_config"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_config_ASSET_AMOUNT"], "unique_id": "test.algorand_models.not_null_silver__asset_config_ASSET_AMOUNT.4c0d85712c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_config_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__asset_config.yml", "name": "not_null_silver__asset_config_ASSET_AMOUNT", "alias": "asset_config_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_config"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.yml/not_null_silver__asset_config_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.988987, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_AMOUNT\nfrom ALGORAND_DEV.silver.asset_config\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__asset_config"}, "test.algorand_models.not_null_silver__asset_config_DECIMALS.c787fdb322": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('silver__asset_config')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset_config"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__asset_config_DECIMALS"], "unique_id": "test.algorand_models.not_null_silver__asset_config_DECIMALS.c787fdb322", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__asset_config_DECIMALS.sql", "original_file_path": "models/silver/silver__asset_config.yml", "name": "not_null_silver__asset_config_DECIMALS", "alias": "asset_config_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_config"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.yml/not_null_silver__asset_config_DECIMALS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.989847, "compiled_sql": "\n    \n    \n\n\n\nselect DECIMALS\nfrom ALGORAND_DEV.silver.asset_config\nwhere DECIMALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.silver__asset_config"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id.e66d602a24": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c4b6c876bf2a03f5d2f46c93b573a0f4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["asset_id"], "model": "{{ get_where_subquery(ref('silver__asset_config')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__asset_config"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c4b6c876bf2a03f5d2f46c93b573a0f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id.e66d602a24", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_c4b6c876bf2a03f5d2f46c93b573a0f4.sql", "original_file_path": "models/silver/silver__asset_config.yml", "name": "dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id", "alias": "asset_config_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_config"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__asset_config.yml/dbt_utils_unique_combination_o_c4b6c876bf2a03f5d2f46c93b573a0f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c4b6c876bf2a03f5d2f46c93b573a0f4"}, "created_at": 1667512711.9905941, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        asset_id\n    from ALGORAND_DEV.silver.asset_config\n    group by asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__asset_config"}, "test.algorand_models.not_null_silver__swap_SWAP_PROGRAM.093a37c7af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_PROGRAM", "model": "{{ get_where_subquery(ref('silver__swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swap_SWAP_PROGRAM"], "unique_id": "test.algorand_models.not_null_silver__swap_SWAP_PROGRAM.093a37c7af", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swap_SWAP_PROGRAM.sql", "original_file_path": "models/silver/silver__swap.yml", "name": "not_null_silver__swap_SWAP_PROGRAM", "alias": "swap_SWAP_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swap.yml/not_null_silver__swap_SWAP_PROGRAM.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.994367, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_PROGRAM\nfrom ALGORAND_DEV.silver.swap\nwhere SWAP_PROGRAM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_PROGRAM", "file_key_name": "models.silver__swap"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_BLOCK_ID.f0efa050b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_BLOCK_ID.f0efa050b4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_BLOCK_ID", "alias": "swaps_fxdx_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.997022, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_intra.16f1674be2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_intra.16f1674be2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_intra", "alias": "swaps_fxdx_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.997919, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_tx_group_id.7f2744d7dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_tx_group_id.7f2744d7dd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_tx_group_id", "alias": "swaps_fxdx_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512711.998676, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_swapper.2d27267b79": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_swapper.2d27267b79", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_swapper", "alias": "swaps_fxdx_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512711.999582, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom (select * from ALGORAND_DEV.silver.swaps_fxdx_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58.cf44f55bd6": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c71e1142114048a7cf20f9bb5244de81\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c71e1142114048a7cf20f9bb5244de81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58.cf44f55bd6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_c71e1142114048a7cf20f9bb5244de81.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58", "alias": "swaps_fxdx_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/dbt_expectations_expect_column_c71e1142114048a7cf20f9bb5244de81.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c71e1142114048a7cf20f9bb5244de81"}, "created_at": 1667512712.000472, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_fxdx_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_asset_id.d7466f1e28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_asset_id.d7466f1e28", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_swap_from_asset_id", "alias": "swaps_fxdx_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512712.00254, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom (select * from ALGORAND_DEV.silver.swaps_fxdx_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_amount.c88e18c611": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_amount.c88e18c611", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_swap_from_amount", "alias": "swaps_fxdx_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667512712.0036, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom (select * from ALGORAND_DEV.silver.swaps_fxdx_dex where _INSERTED_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_pool_address.53bb04f4f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_pool_address.53bb04f4f4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_pool_address", "alias": "swaps_fxdx_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0043662, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58.ff1238dd52": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2551454c4429c1b665ec474454cdf184\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2551454c4429c1b665ec474454cdf184", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58.ff1238dd52", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_2551454c4429c1b665ec474454cdf184.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58", "alias": "swaps_fxdx_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/dbt_expectations_expect_column_2551454c4429c1b665ec474454cdf184.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2551454c4429c1b665ec474454cdf184"}, "created_at": 1667512712.00512, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_fxdx_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_asset_id.292fe1d4c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_asset_id.292fe1d4c2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_swap_to_asset_id", "alias": "swaps_fxdx_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0071511, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_amount.7e4735c72b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_fxdx_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_amount.7e4735c72b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_fxdx_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "not_null_silver__swaps_fxdx_dex_swap_to_amount", "alias": "swaps_fxdx_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/not_null_silver__swaps_fxdx_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.007901, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_fxdx_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra.fedf3d48f6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e19ea0ee340dda3bbeae7b51e76f7d53\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_fxdx_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_fxdx_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e19ea0ee340dda3bbeae7b51e76f7d53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra.fedf3d48f6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_e19ea0ee340dda3bbeae7b51e76f7d53.sql", "original_file_path": "models/silver/silver__swaps_fxdx_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra", "alias": "swaps_fxdx_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_fxdx_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_fxdx_dex.yml/dbt_utils_unique_combination_o_e19ea0ee340dda3bbeae7b51e76f7d53.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e19ea0ee340dda3bbeae7b51e76f7d53"}, "created_at": 1667512712.008783, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_fxdx_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_fxdx_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_BLOCK_ID.1e44ce613e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_BLOCK_ID.1e44ce613e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_BLOCK_ID", "alias": "swaps_tinyman_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.012735, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_intra.7b7197ed1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "intra", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_intra"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_intra.7b7197ed1b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_intra.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_intra", "alias": "swaps_tinyman_dex_intra", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_intra.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.013511, "compiled_sql": "\n    \n    \n\n\n\nselect intra\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere intra is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "intra", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_tx_group_id.6ae5f40265": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_group_id", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_tx_group_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_tx_group_id.6ae5f40265", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_tx_group_id.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_tx_group_id", "alias": "swaps_tinyman_dex_tx_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_tx_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.01458, "compiled_sql": "\n    \n    \n\n\n\nselect tx_group_id\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere tx_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_group_id", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_swapper.ca8fd72431": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_swapper"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_swapper.ca8fd72431", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_swapper.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_swapper", "alias": "swaps_tinyman_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_swapper.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.015337, "compiled_sql": "\n    \n    \n\n\n\nselect swapper\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere swapper is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58.40f8639ba8": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ce7198e5aa96a8b3fd62c3ce531cfec\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ce7198e5aa96a8b3fd62c3ce531cfec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58.40f8639ba8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_8ce7198e5aa96a8b3fd62c3ce531cfec.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58", "alias": "swaps_tinyman_dex_swapper", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/dbt_expectations_expect_column_8ce7198e5aa96a8b3fd62c3ce531cfec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8ce7198e5aa96a8b3fd62c3ce531cfec"}, "created_at": 1667512712.016077, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        swapper\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_tinyman_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swapper", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_asset_id.2d035b5768": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_swap_from_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_asset_id.2d035b5768", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_swap_from_asset_id.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_swap_from_asset_id", "alias": "swaps_tinyman_dex_swap_from_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_swap_from_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.018086, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_asset_id\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere swap_from_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_asset_id", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_amount.c0e1a7e5b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_swap_from_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_amount.c0e1a7e5b7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_swap_from_amount.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_swap_from_amount", "alias": "swaps_tinyman_dex_swap_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_swap_from_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0188348, "compiled_sql": "\n    \n    \n\n\n\nselect swap_from_amount\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere swap_from_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_from_amount", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_pool_address.fb8b0b7c93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_pool_address"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_pool_address.fb8b0b7c93", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_pool_address.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_pool_address", "alias": "swaps_tinyman_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.01958, "compiled_sql": "\n    \n    \n\n\n\nselect pool_address\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58.4ed9db3298": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9374f3846fc5411fc4abdb4a1b43fc9a\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9374f3846fc5411fc4abdb4a1b43fc9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58.4ed9db3298", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_9374f3846fc5411fc4abdb4a1b43fc9a.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58", "alias": "swaps_tinyman_dex_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/dbt_expectations_expect_column_9374f3846fc5411fc4abdb4a1b43fc9a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9374f3846fc5411fc4abdb4a1b43fc9a"}, "created_at": 1667512712.020455, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        pool_address\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.silver.swaps_tinyman_dex\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_asset_id.ec20e42a15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_asset_id", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_swap_to_asset_id"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_asset_id.ec20e42a15", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_swap_to_asset_id.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_swap_to_asset_id", "alias": "swaps_tinyman_dex_swap_to_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_swap_to_asset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0224938, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_asset_id\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere swap_to_asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_asset_id", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_amount.d35eabbe84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swap_to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__swaps_tinyman_dex_swap_to_amount"], "unique_id": "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_amount.d35eabbe84", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__swaps_tinyman_dex_swap_to_amount.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "not_null_silver__swaps_tinyman_dex_swap_to_amount", "alias": "swaps_tinyman_dex_swap_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/not_null_silver__swaps_tinyman_dex_swap_to_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0233011, "compiled_sql": "\n    \n    \n\n\n\nselect swap_to_amount\nfrom ALGORAND_DEV.silver.swaps_tinyman_dex\nwhere swap_to_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "swap_to_amount", "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra.ad8f68ce40": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8a47bb1e14371e7c2df263db2382b25e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "intra"], "model": "{{ get_where_subquery(ref('silver__swaps_tinyman_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__swaps_tinyman_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8a47bb1e14371e7c2df263db2382b25e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra.ad8f68ce40", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_8a47bb1e14371e7c2df263db2382b25e.sql", "original_file_path": "models/silver/silver__swaps_tinyman_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra", "alias": "swaps_tinyman_dex_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_tinyman_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__swaps_tinyman_dex.yml/dbt_utils_unique_combination_o_8a47bb1e14371e7c2df263db2382b25e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8a47bb1e14371e7c2df263db2382b25e"}, "created_at": 1667512712.02412, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, intra\n    from ALGORAND_DEV.silver.swaps_tinyman_dex\n    group by block_id, intra\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_tinyman_dex"}, "test.algorand_models.not_null_silver__price_pool_balances_BLOCK_HOUR.b229c9d1cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_BLOCK_HOUR"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_BLOCK_HOUR.b229c9d1cb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_BLOCK_HOUR.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_BLOCK_HOUR", "alias": "price_pool_balances_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.0281181, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HOUR\nfrom ALGORAND_DEV.silver.price_pool_balances\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1.723d9639e7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ec618204aeee12738317c821f3641c64\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ec618204aeee12738317c821f3641c64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["algorand_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1.723d9639e7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_ec618204aeee12738317c821f3641c64.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1", "alias": "price_pool_balances_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/dbt_expectations_expect_row_va_ec618204aeee12738317c821f3641c64.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ec618204aeee12738317c821f3641c64"}, "created_at": 1667512712.028918, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.silver.price_pool_balances\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances_ASSET_NAME.8638554ffd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_NAME", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_ASSET_NAME"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_ASSET_NAME.8638554ffd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_ASSET_NAME.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_ASSET_NAME", "alias": "price_pool_balances_ASSET_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_ASSET_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.031538, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_NAME\nfrom ALGORAND_DEV.silver.price_pool_balances\nwhere ASSET_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_NAME", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances_PRICE_USD.989d9e0691": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_PRICE_USD"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_PRICE_USD.989d9e0691", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_PRICE_USD.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_PRICE_USD", "alias": "price_pool_balances_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.032306, "compiled_sql": "\n    \n    \n\n\n\nselect PRICE_USD\nfrom ALGORAND_DEV.silver.price_pool_balances\nwhere PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances_ALGO_BALANCE.330ccc3fd1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ALGO_BALANCE", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_ALGO_BALANCE"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_ALGO_BALANCE.330ccc3fd1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_ALGO_BALANCE.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_ALGO_BALANCE", "alias": "price_pool_balances_ALGO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_ALGO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512712.03335, "compiled_sql": "\n    \n    \n\n\n\nselect ALGO_BALANCE\nfrom (select * from ALGORAND_DEV.silver.price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere ALGO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ALGO_BALANCE", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances_NON_ALGO_BALANCE.e564fff9c3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ALGO_BALANCE", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_NON_ALGO_BALANCE"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_NON_ALGO_BALANCE.e564fff9c3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_NON_ALGO_BALANCE.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_NON_ALGO_BALANCE", "alias": "price_pool_balances_NON_ALGO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_NON_ALGO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512712.034272, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ALGO_BALANCE\nfrom (select * from ALGORAND_DEV.silver.price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere NON_ALGO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ALGO_BALANCE", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances_POOL_ADDRESS.82b2456515": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ASSET_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ASSET_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances_POOL_ADDRESS"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances_POOL_ADDRESS.82b2456515", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances_POOL_ADDRESS.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances_POOL_ADDRESS", "alias": "price_pool_balances_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ASSET_ID <> 0"}, "created_at": 1667512712.035181, "compiled_sql": "\n    \n    \n\n\n\nselect POOL_ADDRESS\nfrom (select * from ALGORAND_DEV.silver.price_pool_balances where ASSET_ID <> 0) dbt_subquery\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.not_null_silver__price_pool_balances__ALGO_PRICE.05d9bcd5f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ALGO_PRICE", "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__price_pool_balances__ALGO_PRICE"], "unique_id": "test.algorand_models.not_null_silver__price_pool_balances__ALGO_PRICE.05d9bcd5f1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__price_pool_balances__ALGO_PRICE.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "not_null_silver__price_pool_balances__ALGO_PRICE", "alias": "price_pool_balances", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/not_null_silver__price_pool_balances__ALGO_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667512712.036085, "compiled_sql": "\n    \n    \n\n\n\nselect _ALGO_PRICE\nfrom ALGORAND_DEV.silver.price_pool_balances\nwhere _ALGO_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_ALGO_PRICE", "file_key_name": "models.silver__price_pool_balances"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id.d2c284fb3d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_84591711381dbaa63189feab8d2bf58e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_hour", "asset_id"], "model": "{{ get_where_subquery(ref('silver__price_pool_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__price_pool_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_84591711381dbaa63189feab8d2bf58e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id.d2c284fb3d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_84591711381dbaa63189feab8d2bf58e.sql", "original_file_path": "models/silver/silver__price_pool_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id", "alias": "price_pool_balances_block_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__price_pool_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__price_pool_balances.yml/dbt_utils_unique_combination_o_84591711381dbaa63189feab8d2bf58e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_84591711381dbaa63189feab8d2bf58e"}, "created_at": 1667512712.0368378, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_hour, asset_id\n    from ALGORAND_DEV.silver.price_pool_balances\n    group by block_hour, asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__price_pool_balances"}, "model.algorand_models.silver__nft_metadata_fifa": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'asset_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['nft_asset_id']\n) }}\n\nWITH base AS (\n\n    SELECT\n        asset_id,\n        asset_name,\n        asset_URL,\n        metadata_URL,\n        metadata :animation_url :: STRING AS animation_url,\n        metadata :animation_url_mimetype :: STRING AS animation_url_mimetype,\n        metadata :description :: STRING AS description,\n        metadata :external_url :: STRING AS external_url,\n        metadata :external_url_mimetype :: STRING AS external_url_mimetype,\n        metadata :image :: STRING AS image,\n        metadata :image_integrity :: STRING AS image_integrity,\n        metadata :image_mimetype :: STRING AS image_mimetype,\n        metadata :name :: STRING AS NAME,\n        metadata :properties :\"arc-18\" :\"rekey-checked\" :: STRING AS rekey_checked,\n        metadata :properties :\"arc-20\" :\"application-id\" :: STRING AS application_id,\n        RIGHT(LEFT(asset_name, 3), 2) :: INT AS drop_number,\n        CASE\n            drop_number\n            WHEN 1 THEN 'genesis'\n            WHEN 2 THEN 'archives'\n            WHEN 3 THEN 'south american flair'\n        END drop_name,\n        CASE\n            WHEN description LIKE '%Womens World Cup%' THEN 'Womens'\n            ELSE 'Mens'\n        END AS world_cup_type,\n        CASE\n            WHEN world_cup_type = 'Mens' THEN SUBSTR(\n                description,\n                0,\n                4\n            )\n            ELSE REGEXP_SUBSTR(\n                description,\n                '[1-2][0-9][0-9][0-9]'\n            )\n        END AS YEAR,\n        CASE\n            WHEN world_cup_type = 'Womens' THEN SUBSTR(\n                description,\n                22,\n                REGEXP_INSTR(\n                    description,\n                    '\u2122'\n                ) -27\n            )\n            ELSE SUBSTR(\n                description,\n                20,\n                REGEXP_INSTR(\n                    description,\n                    '\u2122'\n                ) -20\n            )\n        END AS host,\n        SUBSTRING(description, REGEXP_INSTR(description, '-') -6, 13) AS teams,\n        LEFT(\n            teams,\n            3\n        ) AS country_1,\n        SUBSTRING (\n            teams,\n            5,\n            1\n        ) AS country_1_score,\n        RIGHT(\n            teams,\n            3\n        ) AS country_2,\n        SUBSTRING(\n            teams,\n            9,\n            1\n        ) AS country_2_score,\n        SUBSTRING(description, REGEXP_INSTR(description, ', **') + 4, REGEXP_INSTR(description, ':') - REGEXP_INSTR(description, ', **') -4) AS event_type,\n        SUBSTRING(description, REGEXP_INSTR(description, ':') + 2, REGEXP_INSTR(description, '[0-9]', REGEXP_INSTR(description, ':')) - (REGEXP_INSTR(description, ':') + 2)) AS player,\n        REPLACE(\n            SUBSTRING(\n                description,\n                REGEXP_INSTR(\n                    description,\n                    ' [0-9]',\n                    REGEXP_INSTR(\n                        description,\n                        ':'\n                    )\n                ),\n                10\n            ),\n            '**'\n        ) AS MINUTE,\n        SUBSTRING(asset_name, REGEXP_INSTR(asset_name, '-') + 1, 2) AS item_no,\n        SUBSTRING(NAME, REGEXP_INSTR(NAME, '\\\\(') + 1, (REGEXP_INSTR(NAME, '\\\\)') - REGEXP_INSTR(NAME, '\\\\(') - 10)) AS editions,\n        CASE\n            drop_number\n            WHEN 1 THEN CASE\n                WHEN item_no < 3 THEN 'Iconic'\n                WHEN item_no < 9 THEN 'Epic'\n                WHEN item_no < 22 THEN 'Rare'\n                ELSE 'Common'\n            END\n            WHEN 2 THEN CASE\n                WHEN item_no < 2 THEN 'Iconic'\n                WHEN item_no < 6 THEN 'Epic'\n                WHEN item_no < 18 THEN 'Rare'\n                ELSE 'Common'\n            END\n            WHEN 3 THEN CASE\n                WHEN item_no < 4 THEN 'Iconic'\n                WHEN item_no < 13 THEN 'Epic'\n                WHEN item_no < 31 THEN 'Rare'\n                ELSE 'Common'\n            END\n        END rarity\n    FROM\n        (\n            SELECT\n                asset_id,\n                asset_name,\n                asset_URL,\n                metadata_URL,\n                PARSE_JSON(metadata) AS metadata\n            FROM\n                bronze.fifa_metadata\n            WHERE\n                asset_name NOT LIKE 'test%'\n        )\n)\nSELECT\n    asset_id AS nft_asset_id,\n    asset_name AS nft_asset_name,\n    asset_URL AS nft_url,\n    metadata_URL,\n    animation_url,\n    animation_url_mimetype,\n    description,\n    external_url,\n    external_url_mimetype,\n    image,\n    image_integrity,\n    image_mimetype,\n    NAME,\n    rekey_checked,\n    application_id,\n    drop_number,\n    drop_name,\n    item_no,\n    editions,\n    rarity,\n    world_cup_type,\n    YEAR,\n    host,\n    country_1,\n    country_1_score,\n    country_2,\n    country_2_score,\n    event_type,\n    player,\n    MINUTE\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    NAME) = 1)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "asset_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["nft_asset_id"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_metadata_fifa"], "unique_id": "model.algorand_models.silver__nft_metadata_fifa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_metadata_fifa.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.sql", "name": "silver__nft_metadata_fifa", "alias": "nft_metadata_fifa", "checksum": {"name": "sha256", "checksum": "b7a6baf1e8976c5cc659009eab91354f853b4bcaee8adeb1be59f1902151fb55"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_NAME": {"name": "NFT_ASSET_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_URL": {"name": "NFT_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METADATA_URL": {"name": "METADATA_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANIMATION_URL": {"name": "ANIMATION_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANIMATION_URL_MIMETYPE": {"name": "ANIMATION_URL_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_URL": {"name": "EXTERNAL_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_URL_MIMETYPE": {"name": "EXTERNAL_URL_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE": {"name": "IMAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_INTEGRITY": {"name": "IMAGE_INTEGRITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_MIMETYPE": {"name": "IMAGE_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REKEY_CHECKED": {"name": "REKEY_CHECKED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APPLICATION_ID": {"name": "APPLICATION_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DROP_NUMBER": {"name": "DROP_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DROP_NAME": {"name": "DROP_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_NO": {"name": "ITEM_NO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EDITIONS": {"name": "EDITIONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RARITY": {"name": "RARITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORLD_CUP_TYPE": {"name": "WORLD_CUP_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HOST": {"name": "HOST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_1": {"name": "COUNTRY_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_1_SCORE": {"name": "COUNTRY_1_SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_2": {"name": "COUNTRY_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_2_SCORE": {"name": "COUNTRY_2_SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLAYER": {"name": "PLAYER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINUTE": {"name": "MINUTE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_metadata_fifa.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "asset_id", "incremental_strategy": "merge", "cluster_by": ["nft_asset_id"]}, "created_at": 1667566071.897762, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        asset_id,\n        asset_name,\n        asset_URL,\n        metadata_URL,\n        metadata :animation_url :: STRING AS animation_url,\n        metadata :animation_url_mimetype :: STRING AS animation_url_mimetype,\n        metadata :description :: STRING AS description,\n        metadata :external_url :: STRING AS external_url,\n        metadata :external_url_mimetype :: STRING AS external_url_mimetype,\n        metadata :image :: STRING AS image,\n        metadata :image_integrity :: STRING AS image_integrity,\n        metadata :image_mimetype :: STRING AS image_mimetype,\n        metadata :name :: STRING AS NAME,\n        metadata :properties :\"arc-18\" :\"rekey-checked\" :: STRING AS rekey_checked,\n        metadata :properties :\"arc-20\" :\"application-id\" :: STRING AS application_id,\n        RIGHT(LEFT(asset_name, 3), 2) :: INT AS drop_number,\n        CASE\n            drop_number\n            WHEN 1 THEN 'genesis'\n            WHEN 2 THEN 'archives'\n            WHEN 3 THEN 'south american flair'\n        END drop_name,\n        CASE\n            WHEN description LIKE '%Womens World Cup%' THEN 'Womens'\n            ELSE 'Mens'\n        END AS world_cup_type,\n        CASE\n            WHEN world_cup_type = 'Mens' THEN SUBSTR(\n                description,\n                0,\n                4\n            )\n            ELSE REGEXP_SUBSTR(\n                description,\n                '[1-2][0-9][0-9][0-9]'\n            )\n        END AS YEAR,\n        CASE\n            WHEN world_cup_type = 'Womens' THEN SUBSTR(\n                description,\n                22,\n                REGEXP_INSTR(\n                    description,\n                    '\u2122'\n                ) -27\n            )\n            ELSE SUBSTR(\n                description,\n                20,\n                REGEXP_INSTR(\n                    description,\n                    '\u2122'\n                ) -20\n            )\n        END AS host,\n        SUBSTRING(description, REGEXP_INSTR(description, '-') -6, 13) AS teams,\n        LEFT(\n            teams,\n            3\n        ) AS country_1,\n        SUBSTRING (\n            teams,\n            5,\n            1\n        ) AS country_1_score,\n        RIGHT(\n            teams,\n            3\n        ) AS country_2,\n        SUBSTRING(\n            teams,\n            9,\n            1\n        ) AS country_2_score,\n        SUBSTRING(description, REGEXP_INSTR(description, ', **') + 4, REGEXP_INSTR(description, ':') - REGEXP_INSTR(description, ', **') -4) AS event_type,\n        SUBSTRING(description, REGEXP_INSTR(description, ':') + 2, REGEXP_INSTR(description, '[0-9]', REGEXP_INSTR(description, ':')) - (REGEXP_INSTR(description, ':') + 2)) AS player,\n        REPLACE(\n            SUBSTRING(\n                description,\n                REGEXP_INSTR(\n                    description,\n                    ' [0-9]',\n                    REGEXP_INSTR(\n                        description,\n                        ':'\n                    )\n                ),\n                10\n            ),\n            '**'\n        ) AS MINUTE,\n        SUBSTRING(asset_name, REGEXP_INSTR(asset_name, '-') + 1, 2) AS item_no,\n        SUBSTRING(NAME, REGEXP_INSTR(NAME, '\\\\(') + 1, (REGEXP_INSTR(NAME, '\\\\)') - REGEXP_INSTR(NAME, '\\\\(') - 10)) AS editions,\n        CASE\n            drop_number\n            WHEN 1 THEN CASE\n                WHEN item_no < 3 THEN 'Iconic'\n                WHEN item_no < 9 THEN 'Epic'\n                WHEN item_no < 22 THEN 'Rare'\n                ELSE 'Common'\n            END\n            WHEN 2 THEN CASE\n                WHEN item_no < 2 THEN 'Iconic'\n                WHEN item_no < 6 THEN 'Epic'\n                WHEN item_no < 18 THEN 'Rare'\n                ELSE 'Common'\n            END\n            WHEN 3 THEN CASE\n                WHEN item_no < 4 THEN 'Iconic'\n                WHEN item_no < 13 THEN 'Epic'\n                WHEN item_no < 31 THEN 'Rare'\n                ELSE 'Common'\n            END\n        END rarity\n    FROM\n        (\n            SELECT\n                asset_id,\n                asset_name,\n                asset_URL,\n                metadata_URL,\n                PARSE_JSON(metadata) AS metadata\n            FROM\n                bronze.fifa_metadata\n            WHERE\n                asset_name NOT LIKE 'test%'\n        )\n)\nSELECT\n    asset_id AS nft_asset_id,\n    asset_name AS nft_asset_name,\n    asset_URL AS nft_url,\n    metadata_URL,\n    animation_url,\n    animation_url_mimetype,\n    description,\n    external_url,\n    external_url_mimetype,\n    image,\n    image_integrity,\n    image_mimetype,\n    NAME,\n    rekey_checked,\n    application_id,\n    drop_number,\n    drop_name,\n    item_no,\n    editions,\n    rarity,\n    world_cup_type,\n    YEAR,\n    host,\n    country_1,\n    country_1_score,\n    country_2,\n    country_2_score,\n    event_type,\n    player,\n    MINUTE\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    NAME) = 1)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.a21a1dc6e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.a21a1dc6e4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_NFT_ASSET_ID", "alias": "nft_metadata_fifa_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.898196, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.87699066ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.87699066ea", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME", "alias": "nft_metadata_fifa_NFT_ASSET_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.899083, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_NAME\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere NFT_ASSET_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_NAME", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_URL.a06be7f249": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_NFT_URL"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_URL.a06be7f249", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_NFT_URL.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_NFT_URL", "alias": "nft_metadata_fifa_NFT_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_NFT_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.899961, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_URL\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere NFT_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_URL", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_METADATA_URL.8525cb7326": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METADATA_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_METADATA_URL"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_METADATA_URL.8525cb7326", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_METADATA_URL.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_METADATA_URL", "alias": "nft_metadata_fifa_METADATA_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_METADATA_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9007292, "compiled_sql": "\n    \n    \n\n\n\nselect METADATA_URL\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere METADATA_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA_URL", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL.d3768c6e10": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ANIMATION_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_ANIMATION_URL"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL.d3768c6e10", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_ANIMATION_URL.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_ANIMATION_URL", "alias": "nft_metadata_fifa_ANIMATION_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_ANIMATION_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.901487, "compiled_sql": "\n    \n    \n\n\n\nselect ANIMATION_URL\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere ANIMATION_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ANIMATION_URL", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.84e7e04331": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ANIMATION_URL_MIMETYPE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.84e7e04331", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE", "alias": "nft_metadata_fifa_ANIMATION_URL_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.902244, "compiled_sql": "\n    \n    \n\n\n\nselect ANIMATION_URL_MIMETYPE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere ANIMATION_URL_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ANIMATION_URL_MIMETYPE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_DESCRIPTION.40f8eecd76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DESCRIPTION", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_DESCRIPTION"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_DESCRIPTION.40f8eecd76", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_DESCRIPTION.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_DESCRIPTION", "alias": "nft_metadata_fifa_DESCRIPTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_DESCRIPTION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9030972, "compiled_sql": "\n    \n    \n\n\n\nselect DESCRIPTION\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere DESCRIPTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DESCRIPTION", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL.e577285b3a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_EXTERNAL_URL"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL.e577285b3a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_EXTERNAL_URL.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_EXTERNAL_URL", "alias": "nft_metadata_fifa_EXTERNAL_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_EXTERNAL_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.903884, "compiled_sql": "\n    \n    \n\n\n\nselect EXTERNAL_URL\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere EXTERNAL_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTERNAL_URL", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.9b67b3e3f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_URL_MIMETYPE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.9b67b3e3f4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE", "alias": "nft_metadata_fifa_EXTERNAL_URL_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.904625, "compiled_sql": "\n    \n    \n\n\n\nselect EXTERNAL_URL_MIMETYPE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere EXTERNAL_URL_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTERNAL_URL_MIMETYPE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE.fcba710397": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_IMAGE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE.fcba710397", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_IMAGE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_IMAGE", "alias": "nft_metadata_fifa_IMAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_IMAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9054878, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere IMAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.7094abd9d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_INTEGRITY", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.7094abd9d6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY", "alias": "nft_metadata_fifa_IMAGE_INTEGRITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.906263, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE_INTEGRITY\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere IMAGE_INTEGRITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_INTEGRITY", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.d85d2fe756": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_MIMETYPE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.d85d2fe756", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE", "alias": "nft_metadata_fifa_IMAGE_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.908931, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE_MIMETYPE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere IMAGE_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_MIMETYPE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_NAME.11ed0ba6ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_NAME"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_NAME.11ed0ba6ab", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_NAME", "alias": "nft_metadata_fifa_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.909682, "compiled_sql": "\n    \n    \n\n\n\nselect NAME\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_REKEY_CHECKED.5a1c5c6d17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REKEY_CHECKED", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_REKEY_CHECKED"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_REKEY_CHECKED.5a1c5c6d17", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_REKEY_CHECKED.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_REKEY_CHECKED", "alias": "nft_metadata_fifa_REKEY_CHECKED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_REKEY_CHECKED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.910985, "compiled_sql": "\n    \n    \n\n\n\nselect REKEY_CHECKED\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere REKEY_CHECKED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REKEY_CHECKED", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_APPLICATION_ID.ef32827ab4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APPLICATION_ID", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_APPLICATION_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_APPLICATION_ID.ef32827ab4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_APPLICATION_ID.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_APPLICATION_ID", "alias": "nft_metadata_fifa_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_APPLICATION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.914109, "compiled_sql": "\n    \n    \n\n\n\nselect APPLICATION_ID\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere APPLICATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APPLICATION_ID", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NUMBER.65dd8aaf4d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DROP_NUMBER", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_DROP_NUMBER"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NUMBER.65dd8aaf4d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_DROP_NUMBER.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_DROP_NUMBER", "alias": "nft_metadata_fifa_DROP_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_DROP_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9150138, "compiled_sql": "\n    \n    \n\n\n\nselect DROP_NUMBER\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere DROP_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DROP_NUMBER", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NAME.8e5d5343a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DROP_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_DROP_NAME"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NAME.8e5d5343a8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_DROP_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_DROP_NAME", "alias": "nft_metadata_fifa_DROP_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_DROP_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9169888, "compiled_sql": "\n    \n    \n\n\n\nselect DROP_NAME\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere DROP_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DROP_NAME", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_ITEM_NO.e5f37c8f6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_NO", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_ITEM_NO"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_ITEM_NO.e5f37c8f6c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_ITEM_NO.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_ITEM_NO", "alias": "nft_metadata_fifa_ITEM_NO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_ITEM_NO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9178581, "compiled_sql": "\n    \n    \n\n\n\nselect ITEM_NO\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere ITEM_NO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ITEM_NO", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_EDITIONS.48391d4fa0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EDITIONS", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_EDITIONS"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_EDITIONS.48391d4fa0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_EDITIONS.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_EDITIONS", "alias": "nft_metadata_fifa_EDITIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_EDITIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.918611, "compiled_sql": "\n    \n    \n\n\n\nselect EDITIONS\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere EDITIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EDITIONS", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_RARITY.1dcb645879": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RARITY", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_RARITY"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_RARITY.1dcb645879", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_RARITY.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_RARITY", "alias": "nft_metadata_fifa_RARITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_RARITY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.919511, "compiled_sql": "\n    \n    \n\n\n\nselect RARITY\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere RARITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RARITY", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.c6b874a02c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WORLD_CUP_TYPE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.c6b874a02c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE", "alias": "nft_metadata_fifa_WORLD_CUP_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.920657, "compiled_sql": "\n    \n    \n\n\n\nselect WORLD_CUP_TYPE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere WORLD_CUP_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "WORLD_CUP_TYPE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_YEAR.378e8b1fb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "YEAR", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_YEAR"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_YEAR.378e8b1fb4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_YEAR.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_YEAR", "alias": "nft_metadata_fifa_YEAR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_YEAR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.92145, "compiled_sql": "\n    \n    \n\n\n\nselect YEAR\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere YEAR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "YEAR", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_HOST.5d08e9e7dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOST", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_HOST"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_HOST.5d08e9e7dd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_HOST.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_HOST", "alias": "nft_metadata_fifa_HOST", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_HOST.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.92221, "compiled_sql": "\n    \n    \n\n\n\nselect HOST\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere HOST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HOST", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1.69b7e35594": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_1", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_COUNTRY_1"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1.69b7e35594", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_COUNTRY_1.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_COUNTRY_1", "alias": "nft_metadata_fifa_COUNTRY_1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_COUNTRY_1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.922973, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_1\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere COUNTRY_1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_1", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.06fdef440a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_1_SCORE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.06fdef440a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE", "alias": "nft_metadata_fifa_COUNTRY_1_SCORE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.923834, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_1_SCORE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere COUNTRY_1_SCORE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_1_SCORE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2.1367680b0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_2", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_COUNTRY_2"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2.1367680b0e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_COUNTRY_2.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_COUNTRY_2", "alias": "nft_metadata_fifa_COUNTRY_2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_COUNTRY_2.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.924597, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_2\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere COUNTRY_2 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_2", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.d12a423579": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_2_SCORE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.d12a423579", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE", "alias": "nft_metadata_fifa_COUNTRY_2_SCORE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9253418, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_2_SCORE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere COUNTRY_2_SCORE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_2_SCORE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_EVENT_TYPE.634752ab1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_EVENT_TYPE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_EVENT_TYPE.634752ab1d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_EVENT_TYPE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_EVENT_TYPE", "alias": "nft_metadata_fifa_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.926087, "compiled_sql": "\n    \n    \n\n\n\nselect EVENT_TYPE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_PLAYER.b6e9fd0b78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLAYER", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_PLAYER"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_PLAYER.b6e9fd0b78", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_PLAYER.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_PLAYER", "alias": "nft_metadata_fifa_PLAYER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_PLAYER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.9269571, "compiled_sql": "\n    \n    \n\n\n\nselect PLAYER\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere PLAYER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLAYER", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.not_null_silver__nft_metadata_fifa_MINUTE.35761f211a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINUTE", "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_metadata_fifa_MINUTE"], "unique_id": "test.algorand_models.not_null_silver__nft_metadata_fifa_MINUTE.35761f211a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_metadata_fifa_MINUTE.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "not_null_silver__nft_metadata_fifa_MINUTE", "alias": "nft_metadata_fifa_MINUTE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/not_null_silver__nft_metadata_fifa_MINUTE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566071.92769, "compiled_sql": "\n    \n    \n\n\n\nselect MINUTE\nfrom ALGORAND_DEV.silver.nft_metadata_fifa\nwhere MINUTE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINUTE", "file_key_name": "models.silver__nft_metadata_fifa"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id.1c7a37241c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3b6d55c547a37e8e1c156bc8b5ac8bf6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_metadata_fifa')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3b6d55c547a37e8e1c156bc8b5ac8bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id.1c7a37241c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_3b6d55c547a37e8e1c156bc8b5ac8bf6.sql", "original_file_path": "models/silver/silver__nft_metadata_fifa.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id", "alias": "nft_metadata_fifa_nft_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_metadata_fifa.yml/dbt_utils_unique_combination_o_3b6d55c547a37e8e1c156bc8b5ac8bf6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3b6d55c547a37e8e1c156bc8b5ac8bf6"}, "created_at": 1667566071.928448, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        nft_asset_id\n    from ALGORAND_DEV.silver.nft_metadata_fifa\n    group by nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_metadata_fifa"}, "model.algorand_models.nft__ez_nft_asset": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    asset_id AS nft_asset_id,\n    asset_name AS nft_asset_name,\n    total_supply AS nft_total_supply,\n    decimals,\n    created_at,\n    collection_name,\n    creator_address,\n    asset_deleted,\n    asset_url AS nft_url,\n    collection_nft,\n    arc69_nft,\n    ar3_nft,\n    ar19_nft,\n    traditional_nft\nFROM\n    {{ ref('core__dim_asset') }}\nWHERE\n    is_nft = TRUE", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "nft", "fqn": ["algorand_models", "core", "NFT", "nft__ez_nft_asset"], "unique_id": "model.algorand_models.nft__ez_nft_asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/NFT/nft__ez_nft_asset.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.sql", "name": "nft__ez_nft_asset", "alias": "ez_nft_asset", "checksum": {"name": "sha256", "checksum": "788269412794b7fca1d28300723aca28549be1ca703223688318d82529cbf22e"}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {"NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_NAME": {"name": "NFT_ASSET_NAME", "description": "Name associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TOTAL_SUPPLY": {"name": "NFT_TOTAL_SUPPLY", "description": "Total supply of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which asset was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NAME": {"name": "COLLECTION_NAME", "description": "Name of the NFT collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "Address of the asset creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DELETED": {"name": "ASSET_DELETED", "description": "whether or not the asset is currently deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_URL": {"name": "NFT_URL", "description": "The url to the asset website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NFT": {"name": "COLLECTION_NFT", "description": "TRUE/FALSE indicating if the NFT is part of a collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARC69_NFT": {"name": "ARC69_NFT", "description": "TRUE/FALSE indicating if the NFT follows the ARC69 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AR3_NFT": {"name": "AR3_NFT", "description": "TRUE/FALSE indicating if the NFT follows the AR3 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRADITIONAL_NFT": {"name": "TRADITIONAL_NFT", "description": "TRUE/FALSE indicating if the asset total supply is 1 and the number of decimals is 0", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/NFT/nft__ez_nft_asset.yml", "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667566160.196512, "compiled_sql": "\n\nSELECT\n    asset_id AS nft_asset_id,\n    asset_name AS nft_asset_name,\n    total_supply AS nft_total_supply,\n    decimals,\n    created_at,\n    collection_name,\n    creator_address,\n    asset_deleted,\n    asset_url AS nft_url,\n    collection_nft,\n    arc69_nft,\n    ar3_nft,\n    ar19_nft,\n    traditional_nft\nFROM\n    ALGORAND_DEV.core.dim_asset\nWHERE\n    is_nft = TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.nft.ez_nft_asset"}, "model.algorand_models.nft__ez_nft_metadata_fifa": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    nft_asset_id,\n    nft_asset_name,\n    nft_url,\n    metadata_url,\n    animation_url,\n    animation_url_mimetype,\n    description,\n    external_url,\n    external_url_mimetype,\n    image,\n    image_integrity,\n    image_mimetype,\n    NAME,\n    rekey_checked,\n    application_id,\n    drop_number,\n    drop_name,\n    item_no,\n    editions,\n    rarity,\n    world_cup_type,\n    YEAR,\n    host,\n    country_1,\n    country_1_score,\n    country_2,\n    country_2_score,\n    event_type,\n    player,\n    MINUTE\nFROM\n    {{ ref('silver__nft_metadata_fifa') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "nft", "fqn": ["algorand_models", "core", "NFT", "nft__ez_nft_metadata_fifa"], "unique_id": "model.algorand_models.nft__ez_nft_metadata_fifa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/NFT/nft__ez_nft_metadata_fifa.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.sql", "name": "nft__ez_nft_metadata_fifa", "alias": "ez_nft_metadata_fifa", "checksum": {"name": "sha256", "checksum": "8fc3a53386d065a53708ba0d72217074261e349e72d4f067be2cfc85572d6928"}, "tags": [], "refs": [["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {"NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_NAME": {"name": "NFT_ASSET_NAME", "description": "Name associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_URL": {"name": "NFT_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METADATA_URL": {"name": "METADATA_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANIMATION_URL": {"name": "ANIMATION_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANIMATION_URL_MIMETYPE": {"name": "ANIMATION_URL_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_URL": {"name": "EXTERNAL_URL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTERNAL_URL_MIMETYPE": {"name": "EXTERNAL_URL_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE": {"name": "IMAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_INTEGRITY": {"name": "IMAGE_INTEGRITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_MIMETYPE": {"name": "IMAGE_MIMETYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REKEY_CHECKED": {"name": "REKEY_CHECKED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APPLICATION_ID": {"name": "APPLICATION_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DROP_NUMBER": {"name": "DROP_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DROP_NAME": {"name": "DROP_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_NO": {"name": "ITEM_NO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EDITIONS": {"name": "EDITIONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RARITY": {"name": "RARITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORLD_CUP_TYPE": {"name": "WORLD_CUP_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HOST": {"name": "HOST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_1": {"name": "COUNTRY_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_1_SCORE": {"name": "COUNTRY_1_SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_2": {"name": "COUNTRY_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY_2_SCORE": {"name": "COUNTRY_2_SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLAYER": {"name": "PLAYER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINUTE": {"name": "MINUTE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/NFT/nft__ez_nft_metadata_fifa.yml", "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1667566160.2202802, "compiled_sql": "\n\nSELECT\n    nft_asset_id,\n    nft_asset_name,\n    nft_url,\n    metadata_url,\n    animation_url,\n    animation_url_mimetype,\n    description,\n    external_url,\n    external_url_mimetype,\n    image,\n    image_integrity,\n    image_mimetype,\n    NAME,\n    rekey_checked,\n    application_id,\n    drop_number,\n    drop_name,\n    item_no,\n    editions,\n    rarity,\n    world_cup_type,\n    YEAR,\n    host,\n    country_1,\n    country_1_score,\n    country_2,\n    country_2_score,\n    event_type,\n    player,\n    MINUTE\nFROM\n    ALGORAND_DEV.silver.nft_metadata_fifa", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.nft.ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_asset_NFT_ASSET_ID.86514aa937": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_asset_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_asset_NFT_ASSET_ID.86514aa937", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_asset_NFT_ASSET_ID.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "not_null_nft__ez_nft_asset_NFT_ASSET_ID", "alias": "ez_nft_asset_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/not_null_nft__ez_nft_asset_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.200416, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.nft.ez_nft_asset\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.unique_nft__ez_nft_asset_NFT_ASSET_ID.1adaba1b87": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_nft", "fqn": ["algorand_models", "core", "NFT", "unique_nft__ez_nft_asset_NFT_ASSET_ID"], "unique_id": "test.algorand_models.unique_nft__ez_nft_asset_NFT_ASSET_ID.1adaba1b87", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_nft__ez_nft_asset_NFT_ASSET_ID.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "unique_nft__ez_nft_asset_NFT_ASSET_ID", "alias": "ez_nft_asset_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/unique_nft__ez_nft_asset_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.201548, "compiled_sql": "\n    \n    \n\nselect\n    NFT_ASSET_ID as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.nft.ez_nft_asset\nwhere NFT_ASSET_ID is not null\ngroup by NFT_ASSET_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY.7acf4dc964": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e5bb2eeb71fc390539c3c9a1d4b22c4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NFT_TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e5bb2eeb71fc390539c3c9a1d4b22c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY.7acf4dc964", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_6e5bb2eeb71fc390539c3c9a1d4b22c4.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY", "alias": "ez_nft_asset_NFT_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/dbt_expectations_expect_column_6e5bb2eeb71fc390539c3c9a1d4b22c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6e5bb2eeb71fc390539c3c9a1d4b22c4"}, "created_at": 1667566160.202796, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NFT_TOTAL_SUPPLY' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_TOTAL_SUPPLY", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS.bc568d9753": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df100170382bd78081299c3429f26a91\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df100170382bd78081299c3429f26a91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS.bc568d9753", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_df100170382bd78081299c3429f26a91.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS", "alias": "ez_nft_asset_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/dbt_expectations_expect_column_df100170382bd78081299c3429f26a91.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_df100170382bd78081299c3429f26a91"}, "created_at": 1667566160.209604, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DECIMALS' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.not_null_nft__ez_nft_asset_CREATOR_ADDRESS.7d740bd1ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_asset_CREATOR_ADDRESS"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_asset_CREATOR_ADDRESS.7d740bd1ff", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_asset_CREATOR_ADDRESS.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "not_null_nft__ez_nft_asset_CREATOR_ADDRESS", "alias": "ez_nft_asset_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/not_null_nft__ez_nft_asset_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.211627, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR_ADDRESS\nfrom ALGORAND_DEV.nft.ez_nft_asset\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.not_null_nft__ez_nft_asset_ASSET_DELETED.d8130b69d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_DELETED", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_asset_ASSET_DELETED"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_asset_ASSET_DELETED.d8130b69d3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_asset_ASSET_DELETED.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "not_null_nft__ez_nft_asset_ASSET_DELETED", "alias": "ez_nft_asset_ASSET_DELETED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/not_null_nft__ez_nft_asset_ASSET_DELETED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.21283, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_DELETED\nfrom ALGORAND_DEV.nft.ez_nft_asset\nwhere ASSET_DELETED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_DELETED", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL.b416d7fc89": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f96559b38a3331dedb3e18d400277f4c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NFT_URL", "model": "{{ get_where_subquery(ref('nft__ez_nft_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f96559b38a3331dedb3e18d400277f4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL.b416d7fc89", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_f96559b38a3331dedb3e18d400277f4c.sql", "original_file_path": "models/core/NFT/nft__ez_nft_asset.yml", "name": "dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL", "alias": "ez_nft_asset_NFT_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_asset.yml/dbt_expectations_expect_column_f96559b38a3331dedb3e18d400277f4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f96559b38a3331dedb3e18d400277f4c"}, "created_at": 1667566160.213635, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NFT_URL' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_URL", "file_key_name": "models.nft__ez_nft_asset"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.ad1b4d5c73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.ad1b4d5c73", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID", "alias": "ez_nft_metadata_fifa_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.220747, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.551f60771b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "unique_nft", "fqn": ["algorand_models", "core", "NFT", "unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID"], "unique_id": "test.algorand_models.unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.551f60771b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID", "alias": "ez_nft_metadata_fifa_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.221695, "compiled_sql": "\n    \n    \n\nselect\n    NFT_ASSET_ID as unique_field,\n    count(*) as n_records\n\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere NFT_ASSET_ID is not null\ngroup by NFT_ASSET_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_URL.33c8351954": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_URL", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_NFT_URL"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_URL.33c8351954", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_NFT_URL.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_NFT_URL", "alias": "ez_nft_metadata_fifa_NFT_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_NFT_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2226088, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_URL\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere NFT_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_URL", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_METADATA_URL.28ef305510": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METADATA_URL", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_METADATA_URL"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_METADATA_URL.28ef305510", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_METADATA_URL.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_METADATA_URL", "alias": "ez_nft_metadata_fifa_METADATA_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_METADATA_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.223369, "compiled_sql": "\n    \n    \n\n\n\nselect METADATA_URL\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere METADATA_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA_URL", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.fe11e31f2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ANIMATION_URL", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.fe11e31f2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL", "alias": "ez_nft_metadata_fifa_ANIMATION_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.224597, "compiled_sql": "\n    \n    \n\n\n\nselect ANIMATION_URL\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere ANIMATION_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ANIMATION_URL", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.781bc07591": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ANIMATION_URL_MIMETYPE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.781bc07591", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE", "alias": "ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.22535, "compiled_sql": "\n    \n    \n\n\n\nselect ANIMATION_URL_MIMETYPE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere ANIMATION_URL_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ANIMATION_URL_MIMETYPE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.aa4a795e44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DESCRIPTION", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_DESCRIPTION"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.aa4a795e44", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_DESCRIPTION", "alias": "ez_nft_metadata_fifa_DESCRIPTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.226094, "compiled_sql": "\n    \n    \n\n\n\nselect DESCRIPTION\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere DESCRIPTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DESCRIPTION", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.995351b2f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_URL", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.995351b2f9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL", "alias": "ez_nft_metadata_fifa_EXTERNAL_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.226955, "compiled_sql": "\n    \n    \n\n\n\nselect EXTERNAL_URL\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere EXTERNAL_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTERNAL_URL", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.45c86ef1d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTERNAL_URL_MIMETYPE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.45c86ef1d5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE", "alias": "ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.227742, "compiled_sql": "\n    \n    \n\n\n\nselect EXTERNAL_URL_MIMETYPE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere EXTERNAL_URL_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTERNAL_URL_MIMETYPE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE.d32c5a5fe3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_IMAGE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE.d32c5a5fe3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_IMAGE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_IMAGE", "alias": "ez_nft_metadata_fifa_IMAGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_IMAGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.228551, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere IMAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.214260d3ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_INTEGRITY", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.214260d3ac", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY", "alias": "ez_nft_metadata_fifa_IMAGE_INTEGRITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.229336, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE_INTEGRITY\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere IMAGE_INTEGRITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_INTEGRITY", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.63ce565ce9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_MIMETYPE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.63ce565ce9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE", "alias": "ez_nft_metadata_fifa_IMAGE_MIMETYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.230199, "compiled_sql": "\n    \n    \n\n\n\nselect IMAGE_MIMETYPE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere IMAGE_MIMETYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_MIMETYPE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NAME.5ee55076b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_NAME"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NAME.5ee55076b3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_NAME.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_NAME", "alias": "ez_nft_metadata_fifa_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.230947, "compiled_sql": "\n    \n    \n\n\n\nselect NAME\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.af7d8c3f61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REKEY_CHECKED", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.af7d8c3f61", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED", "alias": "ez_nft_metadata_fifa_REKEY_CHECKED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.231906, "compiled_sql": "\n    \n    \n\n\n\nselect REKEY_CHECKED\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere REKEY_CHECKED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REKEY_CHECKED", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.4a34860615": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APPLICATION_ID", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.4a34860615", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID", "alias": "ez_nft_metadata_fifa_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.233115, "compiled_sql": "\n    \n    \n\n\n\nselect APPLICATION_ID\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere APPLICATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APPLICATION_ID", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.0f4561ebd7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DROP_NUMBER", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.0f4561ebd7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER", "alias": "ez_nft_metadata_fifa_DROP_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2341812, "compiled_sql": "\n    \n    \n\n\n\nselect DROP_NUMBER\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere DROP_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DROP_NUMBER", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NAME.05b98ecda0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DROP_NAME", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_DROP_NAME"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NAME.05b98ecda0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_DROP_NAME.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_DROP_NAME", "alias": "ez_nft_metadata_fifa_DROP_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_DROP_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2350552, "compiled_sql": "\n    \n    \n\n\n\nselect DROP_NAME\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere DROP_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DROP_NAME", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ITEM_NO.389fd3ac7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_NO", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_ITEM_NO"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ITEM_NO.389fd3ac7c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_ITEM_NO.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_ITEM_NO", "alias": "ez_nft_metadata_fifa_ITEM_NO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_ITEM_NO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.235894, "compiled_sql": "\n    \n    \n\n\n\nselect ITEM_NO\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere ITEM_NO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ITEM_NO", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EDITIONS.ce0884acf4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EDITIONS", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_EDITIONS"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EDITIONS.ce0884acf4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_EDITIONS.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_EDITIONS", "alias": "ez_nft_metadata_fifa_EDITIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_EDITIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2368488, "compiled_sql": "\n    \n    \n\n\n\nselect EDITIONS\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere EDITIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EDITIONS", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_RARITY.7ba99a6ecb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RARITY", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_RARITY"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_RARITY.7ba99a6ecb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_RARITY.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_RARITY", "alias": "ez_nft_metadata_fifa_RARITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_RARITY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.240285, "compiled_sql": "\n    \n    \n\n\n\nselect RARITY\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere RARITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RARITY", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.63e5846b20": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WORLD_CUP_TYPE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.63e5846b20", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE", "alias": "ez_nft_metadata_fifa_WORLD_CUP_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.241069, "compiled_sql": "\n    \n    \n\n\n\nselect WORLD_CUP_TYPE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere WORLD_CUP_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "WORLD_CUP_TYPE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_YEAR.52d387195c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "YEAR", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_YEAR"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_YEAR.52d387195c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_YEAR.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_YEAR", "alias": "ez_nft_metadata_fifa_YEAR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_YEAR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2418408, "compiled_sql": "\n    \n    \n\n\n\nselect YEAR\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere YEAR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "YEAR", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_HOST.f1909d4665": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOST", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_HOST"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_HOST.f1909d4665", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_HOST.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_HOST", "alias": "ez_nft_metadata_fifa_HOST", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_HOST.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.242736, "compiled_sql": "\n    \n    \n\n\n\nselect HOST\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere HOST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HOST", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.c18c6c03b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_1", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.c18c6c03b5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1", "alias": "ez_nft_metadata_fifa_COUNTRY_1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2434912, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_1\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere COUNTRY_1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_1", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.d762e17a01": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_1_SCORE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.d762e17a01", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE", "alias": "ez_nft_metadata_fifa_COUNTRY_1_SCORE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.244249, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_1_SCORE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere COUNTRY_1_SCORE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_1_SCORE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.ddeec6ddb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_2", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.ddeec6ddb4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2", "alias": "ez_nft_metadata_fifa_COUNTRY_2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.244985, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_2\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere COUNTRY_2 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_2", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.852bd0042b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY_2_SCORE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.852bd0042b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE", "alias": "ez_nft_metadata_fifa_COUNTRY_2_SCORE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.245866, "compiled_sql": "\n    \n    \n\n\n\nselect COUNTRY_2_SCORE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere COUNTRY_2_SCORE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "COUNTRY_2_SCORE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.eb154be284": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.eb154be284", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE", "alias": "ez_nft_metadata_fifa_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.24666, "compiled_sql": "\n    \n    \n\n\n\nselect EVENT_TYPE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_PLAYER.161cd08a3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLAYER", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_PLAYER"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_PLAYER.161cd08a3b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_PLAYER.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_PLAYER", "alias": "ez_nft_metadata_fifa_PLAYER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_PLAYER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.247509, "compiled_sql": "\n    \n    \n\n\n\nselect PLAYER\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere PLAYER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLAYER", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_MINUTE.0d99862806": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINUTE", "model": "{{ get_where_subquery(ref('nft__ez_nft_metadata_fifa')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__ez_nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__ez_nft_metadata_fifa_MINUTE"], "unique_id": "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_MINUTE.0d99862806", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__ez_nft_metadata_fifa_MINUTE.sql", "original_file_path": "models/core/NFT/nft__ez_nft_metadata_fifa.yml", "name": "not_null_nft__ez_nft_metadata_fifa_MINUTE", "alias": "ez_nft_metadata_fifa_MINUTE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__ez_nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__ez_nft_metadata_fifa.yml/not_null_nft__ez_nft_metadata_fifa_MINUTE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667566160.2484171, "compiled_sql": "\n    \n    \n\n\n\nselect MINUTE\nfrom ALGORAND_DEV.nft.ez_nft_metadata_fifa\nwhere MINUTE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINUTE", "file_key_name": "models.nft__ez_nft_metadata_fifa"}, "model.algorand_models.silver__nft_sales_fifa_collect": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_unique_key',\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH mints AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        asset_receiver AS purchaser,\n        b.asset_id AS nft_asset_id,\n        {# CASE WHEN drop_number =  AS total_sales_amount, #}\n        NULL :: FLOAT AS total_sales_amount,\n        A._INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN {{ ref('silver__asset') }}\n        b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN {{ ref('silver__nft_metadata_fifa') }} C\n        ON A.asset_id = C.nft_asset_id\n    WHERE\n        b.creator_address = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> A.asset_receiver\n        AND A.asset_receiver <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n        AND b.asset_Name NOT LIKE 'test%'\n        AND block_id > 23612869\n        AND tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n),\nSECOND AS (\n    SELECT\n        block_id,\n        tx_group_id,\n        asset_receiver AS purchaser,\n        b.asset_id AS nft_asset_id,\n        {# CASE WHEN drop_number =  AS total_sales_amount, #}\n        NULL :: FLOAT AS total_sales_amount,\n        A._INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN {{ ref('silver__asset') }}\n        b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN {{ ref('silver__nft_metadata_fifa') }} C\n        ON A.asset_id = C.nft_asset_id\n    WHERE\n        b.creator_address = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> A.asset_receiver\n        AND A.asset_receiver <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n        AND b.asset_Name NOT LIKE 'test%'\n        AND block_id > 23612869\n        AND tx_type = 'axfer'\n\n{% if is_incremental() %}\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '4 HOURS'\n{% endif %}\n)\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    1 AS number_of_nfts,\n    total_sales_amount,\n    'mint' AS TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    mints\nUNION ALL\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    1 AS number_of_nfts,\n    total_sales_amount,\n    'secondary' AS TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    SECOND", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__nft_metadata_fifa", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__nft_metadata_fifa"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "silver", "fqn": ["algorand_models", "silver", "silver__nft_sales_fifa_collect"], "unique_id": "model.algorand_models.silver__nft_sales_fifa_collect", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "silver/silver__nft_sales_fifa_collect.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.sql", "name": "silver__nft_sales_fifa_collect", "alias": "nft_sales_fifa_collect", "checksum": {"name": "sha256", "checksum": "77556cb4ea5a2b826bfa2b10a6866a98a0f1f46447e11046305bb1e0c3e2b799"}, "tags": [], "refs": [["silver__transaction"], ["silver__asset"], ["silver__nft_metadata_fifa"], ["silver__transaction"], ["silver__asset"], ["silver__nft_metadata_fifa"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/silver/silver__nft_sales_fifa_collect.yml", "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1667569588.830761, "compiled_sql": "\n\nWITH mints AS (\n\n    SELECT\n        block_id,\n        tx_group_id,\n        asset_receiver AS purchaser,\n        b.asset_id AS nft_asset_id,\n        \n        NULL :: FLOAT AS total_sales_amount,\n        A._INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN ALGORAND_DEV.silver.asset\n        b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN ALGORAND_DEV.silver.nft_metadata_fifa C\n        ON A.asset_id = C.nft_asset_id\n    WHERE\n        b.creator_address = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> A.asset_receiver\n        AND A.asset_receiver <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n        AND b.asset_Name NOT LIKE 'test%'\n        AND block_id > 23612869\n        AND tx_type = 'axfer'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_fifa_collect\n) - INTERVAL '4 HOURS'\n\n),\nSECOND AS (\n    SELECT\n        block_id,\n        tx_group_id,\n        asset_receiver AS purchaser,\n        b.asset_id AS nft_asset_id,\n        \n        NULL :: FLOAT AS total_sales_amount,\n        A._INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN ALGORAND_DEV.silver.asset\n        b\n        ON A.asset_id = b.asset_id\n        LEFT JOIN ALGORAND_DEV.silver.nft_metadata_fifa C\n        ON A.asset_id = C.nft_asset_id\n    WHERE\n        b.creator_address = 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND asset_sender <> A.asset_receiver\n        AND A.asset_receiver <> 'X6MNR4AVJQEMJRHAPZ6F4O4SVDIYN67ZRMD2O3ULPY4QFMANQNZOEYHODE'\n        AND COALESCE(\n            A.amount,\n            A.asset_amount\n        ) > 0\n        AND b.asset_Name NOT LIKE 'test%'\n        AND block_id > 23612869\n        AND tx_type = 'axfer'\n\n\nAND A._INSERTED_TIMESTAMP >= (\n    SELECT\n        MAX(\n            _INSERTED_TIMESTAMP\n        )\n    FROM\n        ALGORAND_DEV.silver.nft_sales_fifa_collect\n) - INTERVAL '4 HOURS'\n\n)\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    1 AS number_of_nfts,\n    total_sales_amount,\n    'mint' AS TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    mints\nUNION ALL\nSELECT\n    block_id,\n    tx_group_id,\n    purchaser,\n    nft_asset_id,\n    1 AS number_of_nfts,\n    total_sales_amount,\n    'secondary' AS TYPE,\n    concat_ws(\n        '-',\n        block_id :: STRING,\n        tx_group_id :: STRING,\n        nft_asset_id :: STRING\n    ) AS _unique_key,\n    _inserted_timestamp\nFROM\n    SECOND", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.silver.nft_sales_fifa_collect"}, "test.algorand_models.not_null_silver__nft_sales_fifa_collect_BLOCK_ID.7d96c4aec0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_fifa_collect_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_fifa_collect_BLOCK_ID.7d96c4aec0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_fifa_collect_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "not_null_silver__nft_sales_fifa_collect_BLOCK_ID", "alias": "nft_sales_fifa_collect_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/not_null_silver__nft_sales_fifa_collect_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667569588.8347409, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.silver.nft_sales_fifa_collect\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_fifa_collect"}, "test.algorand_models.not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.0093025cc8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.0093025cc8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID", "alias": "nft_sales_fifa_collect_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667569588.835958, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.silver.nft_sales_fifa_collect\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.silver__nft_sales_fifa_collect"}, "test.algorand_models.not_null_silver__nft_sales_fifa_collect_PURCHASER.83c13e8818": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_fifa_collect_PURCHASER"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_fifa_collect_PURCHASER.83c13e8818", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_fifa_collect_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "not_null_silver__nft_sales_fifa_collect_PURCHASER", "alias": "nft_sales_fifa_collect_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/not_null_silver__nft_sales_fifa_collect_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667569588.8369431, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.silver.nft_sales_fifa_collect\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_fifa_collect"}, "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.f7a5d3ee2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.f7a5d3ee2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID", "alias": "nft_sales_fifa_collect_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667569588.838232, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.silver.nft_sales_fifa_collect\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.silver__nft_sales_fifa_collect"}, "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.6fb6529272": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_silver", "fqn": ["algorand_models", "silver", "not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.6fb6529272", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS", "alias": "nft_sales_fifa_collect_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667569588.839104, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.silver.nft_sales_fifa_collect\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.silver__nft_sales_fifa_collect"}, "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id.9fa3b0dd33": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8ab42cd9e1d1d7995bbc437775e02dbe\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id", "tx_group_id", "nft_asset_id"], "model": "{{ get_where_subquery(ref('silver__nft_sales_fifa_collect')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.silver__nft_sales_fifa_collect"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8ab42cd9e1d1d7995bbc437775e02dbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["algorand_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id"], "unique_id": "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id.9fa3b0dd33", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_utils_unique_combination_o_8ab42cd9e1d1d7995bbc437775e02dbe.sql", "original_file_path": "models/silver/silver__nft_sales_fifa_collect.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id", "alias": "nft_sales_fifa_collect_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_fifa_collect"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/silver/silver__nft_sales_fifa_collect.yml/dbt_utils_unique_combination_o_8ab42cd9e1d1d7995bbc437775e02dbe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8ab42cd9e1d1d7995bbc437775e02dbe"}, "created_at": 1667569588.839917, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, tx_group_id, nft_asset_id\n    from ALGORAND_DEV.silver.nft_sales_fifa_collect\n    group by block_id, tx_group_id, nft_asset_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_fifa_collect"}, "model.algorand_models.core__fact_account_asset": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_account_asset_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['asset_added_at::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__account_asset') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR address || '--' || asset_id IN (\n        SELECT\n            address || '--' || asset_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id = '-1'\n            OR dim_asset_id = '-1'\n            OR dim_block_id__asset_added_at = '-1'\n    )\n{% endif %}\n),\nadd_algo AS (\n    SELECT\n        address,\n        0 AS asset_id,\n        microalgos :: INT / pow(\n            10,\n            6\n        ) AS amount,\n        closed_at,\n        created_at,\n        FALSE AS asset_closed,\n        FALSE AS frozen,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__account') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR address || '--' || asset_id IN (\n        SELECT\n            address || '--' || asset_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id = '-1'\n            OR dim_asset_id = '-1'\n            OR dim_block_id__asset_added_at = '-1'\n    )\n{% endif %}\n),\nBOTH AS (\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        base\n    UNION ALL\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        add_algo\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.address','a.asset_id']\n    ) }} AS fact_account_asset_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.address,\n    COALESCE(\n        dim_asset_id,\n        '-1'\n    ) AS dim_asset_id,\n    A.asset_id,\n    amount,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__asset_added_at,\n    C.block_timestamp AS asset_added_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__asset_last_removed,\n    b.block_timestamp AS asset_last_removed,\n    asset_closed,\n    frozen,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    BOTH A\n    LEFT JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.address = da.address\n    LEFT JOIN {{ ref('core__dim_asset') }}\n    das\n    ON A.asset_id = das.asset_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__account_asset", "model.algorand_models.silver__account", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_account_asset_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["asset_added_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_account_asset"], "unique_id": "model.algorand_models.core__fact_account_asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_account_asset.sql", "original_file_path": "models/core/core__fact_account_asset.sql", "name": "core__fact_account_asset", "alias": "fact_account_asset", "checksum": {"name": "sha256", "checksum": "f9d5e7621c0fdc6441a372e76630b6be18c68dd8832eac6735924c4f88a12877"}, "tags": [], "refs": [["silver__account_asset"], ["silver__account"], ["core__dim_block"], ["core__dim_block"], ["core__dim_account"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "The assets related to an account", "columns": {"FACT_ACCOUNT_ASSET_ID": {"name": "FACT_ACCOUNT_ASSET_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to DIM_ACCOUNT for this address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID": {"name": "DIM_ASSET_ID", "description": "FK to DIM_ASSET for this asset id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount of asset the wallet currently holds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__ASSET_ADDED_AT": {"name": "DIM_BLOCK_ID__ASSET_ADDED_AT", "description": "FK to DIM_BLOCK for the block id this asset was added to the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDED_AT": {"name": "ASSET_ADDED_AT", "description": "Block timestamp that the asset was added to an account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__ASSET_LAST_REMOVED": {"name": "DIM_BLOCK_ID__ASSET_LAST_REMOVED", "description": "FK to DIM_BLOCK for the block id this asset was last removed from the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_LAST_REMOVED": {"name": "ASSET_LAST_REMOVED", "description": "Block timestamp that the asset was last removed from the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_CLOSED": {"name": "ASSET_CLOSED", "description": "Whether or not the asset is currently deleted from the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROZEN": {"name": "FROZEN", "description": "TRUE/FALSE imndicating if the asset is frozen", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_account_asset.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_account_asset_id", "incremental_strategy": "merge", "cluster_by": ["asset_added_at::DATE"]}, "created_at": 1667571087.918368, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.account_asset\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_account_asset\n    )\n    OR address || '--' || asset_id IN (\n        SELECT\n            address || '--' || asset_id\n        FROM\n            ALGORAND_DEV.core.fact_account_asset\n        WHERE\n            dim_account_id = '-1'\n            OR dim_asset_id = '-1'\n            OR dim_block_id__asset_added_at = '-1'\n    )\n\n),\nadd_algo AS (\n    SELECT\n        address,\n        0 AS asset_id,\n        microalgos :: INT / pow(\n            10,\n            6\n        ) AS amount,\n        closed_at,\n        created_at,\n        FALSE AS asset_closed,\n        FALSE AS frozen,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.account\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_account_asset\n    )\n    OR address || '--' || asset_id IN (\n        SELECT\n            address || '--' || asset_id\n        FROM\n            ALGORAND_DEV.core.fact_account_asset\n        WHERE\n            dim_account_id = '-1'\n            OR dim_asset_id = '-1'\n            OR dim_block_id__asset_added_at = '-1'\n    )\n\n),\nBOTH AS (\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        base\n    UNION ALL\n    SELECT\n        address,\n        asset_id,\n        amount,\n        closed_at,\n        created_at,\n        asset_closed,\n        frozen,\n        _inserted_timestamp\n    FROM\n        add_algo\n)\nSELECT\n    md5(cast(coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_account_asset_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.address,\n    COALESCE(\n        dim_asset_id,\n        '-1'\n    ) AS dim_asset_id,\n    A.asset_id,\n    amount,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__asset_added_at,\n    C.block_timestamp AS asset_added_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__asset_last_removed,\n    b.block_timestamp AS asset_last_removed,\n    asset_closed,\n    frozen,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    BOTH A\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.address = da.address\n    LEFT JOIN ALGORAND_DEV.core.dim_asset\n    das\n    ON A.asset_id = das.asset_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_account_asset"}, "model.algorand_models.core__fact_account_application": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_account_application_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['created_at::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        algorand_decode_hex_addr(\n            addr :: text\n        ) AS address,\n        app :: INT AS app_id,\n        deleted AS app_closed,\n        closed_at AS closed_at,\n        created_at AS created_at,\n        localstate AS app_info,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__account_application') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR address || '--' || app_id IN (\n        SELECT\n            address || '--' || app_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id = '-1'\n            OR dim_application_id = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.address','a.app_id']\n    ) }} AS fact_account_application_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.address,\n    COALESCE(\n        dim_application_id,\n        '-1'\n    ) AS dim_application_id,\n    A.app_id,\n    A.app_closed,\n    app_info,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.address = da.address\n    LEFT JOIN {{ ref('core__dim_application') }}\n    dap\n    ON A.app_id = dap.app_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.bronze__account_application", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_account_application_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["created_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_account_application"], "unique_id": "model.algorand_models.core__fact_account_application", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_account_application.sql", "original_file_path": "models/core/core__fact_account_application.sql", "name": "core__fact_account_application", "alias": "fact_account_application", "checksum": {"name": "sha256", "checksum": "587e9b7605293672ebfd528b8e69ca1b482c94b71ad1bb874bfff88aeb7c7694"}, "tags": [], "refs": [["bronze__account_application"], ["core__dim_block"], ["core__dim_block"], ["core__dim_account"], ["core__dim_application"]], "sources": [], "metrics": [], "description": "The applications related to an account", "columns": {"FACT_ACCOUNT_APPLICATION_ID": {"name": "FACT_ACCOUNT_APPLICATION_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to DIM_ACCOUNT for this address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_APPLICATION_ID": {"name": "DIM_APPLICATION_ID", "description": "FK to DIM_APPLICATION for this app id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_ID": {"name": "APP_ID", "description": "ID of the application", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_INFO": {"name": "APP_INFO", "description": "Is the app currently deleted from the account? If not it will have json about current status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CREATED_AT": {"name": "DIM_BLOCK_ID__CREATED_AT", "description": "FK to DIM_BLOCK which app was added to the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp that the app(app_id)  was added to an account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CLOSED_AT": {"name": "DIM_BLOCK_ID__CLOSED_AT", "description": "FK to DIM_BLOCK during which the app was last removed from the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Block timestamp that the app(app_id) was last removed from the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_account_application.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_account_application_id", "incremental_strategy": "merge", "cluster_by": ["created_at::DATE"]}, "created_at": 1667571087.973554, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        algorand_decode_hex_addr(\n            addr :: text\n        ) AS address,\n        app :: INT AS app_id,\n        deleted AS app_closed,\n        closed_at AS closed_at,\n        created_at AS created_at,\n        localstate AS app_info,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.bronze.account_application\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_account_application\n    )\n    OR address || '--' || app_id IN (\n        SELECT\n            address || '--' || app_id\n        FROM\n            ALGORAND_DEV.core.fact_account_application\n        WHERE\n            dim_account_id = '-1'\n            OR dim_application_id = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(a.app_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_account_application_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.address,\n    COALESCE(\n        dim_application_id,\n        '-1'\n    ) AS dim_application_id,\n    A.app_id,\n    A.app_closed,\n    app_info,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.address = da.address\n    LEFT JOIN ALGORAND_DEV.core.dim_application\n    dap\n    ON A.app_id = dap.app_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_account_application"}, "model.algorand_models.core__fact_block": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_block_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__block') }}\n\n{% if is_incremental() %}\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '4 HOURS'\n    OR block_id IN (\n        SELECT\n            block_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_block_id = '-1'\n    )\n{% endif %}\n),\ntxn AS (\n    SELECT\n        A.block_id,\n        COUNT(\n            DISTINCT intra\n        ) AS tx_count,\n        COUNT(\n            DISTINCT sender\n        ) AS tx_sender_count,\n        SUM(fee) AS fee_total\n    FROM\n        {{ ref('silver__transaction') }} A\n        JOIN base b\n        ON A.block_id = b.block_id\n    GROUP BY\n        A.block_id\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id' ]\n    ) }} AS fact_block_id,\n    A.block_id,\n    COALESCE(\n        A.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    COALESCE(\n        tx_count,\n        0\n    ) AS tx_count,\n    COALESCE(\n        tx_sender_count,\n        0\n    ) AS tx_sender_count,\n    COALESCE(\n        fee_total,\n        0\n    ) AS fee_total,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN txn b\n    ON A.block_id = b.block_id\n    LEFT JOIN {{ ref('core__dim_block') }} C\n    ON A.block_id = C.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_block_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_block"], "unique_id": "model.algorand_models.core__fact_block", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_block.sql", "original_file_path": "models/core/core__fact_block.sql", "name": "core__fact_block", "alias": "fact_block", "checksum": {"name": "sha256", "checksum": "0228e61a4dafc6734fd29a733aa333b88032d60bb1162dcf89639d265ea90a38"}, "tags": [], "refs": [["silver__block"], ["silver__transaction"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table with measures related to the block", "columns": {"FACT_BLOCK_ID": {"name": "FACT_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to Dim_Block table}", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "Count of unique intras for this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER_COUNT": {"name": "TX_SENDER_COUNT", "description": "Distinct count of tx_senders for this block ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE_TOTAL": {"name": "FEE_TOTAL", "description": "Sum of fees for this block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_block.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_block_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.004097, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.block\n\n\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            ALGORAND_DEV.core.fact_block\n    ) - INTERVAL '4 HOURS'\n    OR block_id IN (\n        SELECT\n            block_id\n        FROM\n            ALGORAND_DEV.core.fact_block\n        WHERE\n            dim_block_id = '-1'\n    )\n\n),\ntxn AS (\n    SELECT\n        A.block_id,\n        COUNT(\n            DISTINCT intra\n        ) AS tx_count,\n        COUNT(\n            DISTINCT sender\n        ) AS tx_sender_count,\n        SUM(fee) AS fee_total\n    FROM\n        ALGORAND_DEV.silver.transaction A\n        JOIN base b\n        ON A.block_id = b.block_id\n    GROUP BY\n        A.block_id\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_block_id,\n    A.block_id,\n    COALESCE(\n        A.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    COALESCE(\n        tx_count,\n        0\n    ) AS tx_count,\n    COALESCE(\n        tx_sender_count,\n        0\n    ) AS tx_sender_count,\n    COALESCE(\n        fee_total,\n        0\n    ) AS fee_total,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN txn b\n    ON A.block_id = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block C\n    ON A.block_id = C.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_block"}, "model.algorand_models.core__fact_swap": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_swap_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        swap_program,\n        block_id,\n        intra,\n        tx_group_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__swap') }}\n\n{% if is_incremental() %}\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '4 HOURS'\n    OR tx_group_id IN (\n        SELECT\n            tx_group_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_block_id = '-1'\n            OR dim_account_id__swapper = '-1'\n            OR dim_asset_id__swap_from = '-1'\n            OR dim_asset_id__swap_to = '-1'\n            OR dim_application_id = '-1'\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id','a.intra','a.swap_program']\n    ) }} AS fact_swap_id,\n    swap_program,\n    COALESCE(\n        f.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        f.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    A.intra,\n    A.tx_group_id,\n    COALESCE(\n        e.dim_application_id,\n        '-1'\n    ) AS dim_application_id,\n    COALESCE(\n        b.dim_account_id,\n        '-1'\n    ) AS dim_account_id__swapper,\n    A.swapper,\n    COALESCE(\n        C.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__swap_from,\n    A.swap_from_asset_id,\n    A.swap_from_amount,\n    A.pool_address,\n    COALESCE(\n        d.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__swap_to,\n    A.swap_to_asset_id,\n    A.swap_to_amount,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN {{ ref('core__dim_account') }}\n    b\n    ON A.swapper = b.address\n    LEFT JOIN {{ ref('core__dim_asset') }} C\n    ON A.swap_from_asset_id = C.asset_id\n    LEFT JOIN {{ ref('core__dim_asset') }}\n    d\n    ON A.swap_to_asset_id = d.asset_id\n    LEFT JOIN {{ ref('core__dim_application') }}\n    e\n    ON A.app_id = e.app_id\n    LEFT JOIN {{ ref('core__dim_block') }}\n    f\n    ON A.block_id = f.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__swap", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_application", "model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_swap_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_swap"], "unique_id": "model.algorand_models.core__fact_swap", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_swap.sql", "original_file_path": "models/core/core__fact_swap.sql", "name": "core__fact_swap", "alias": "fact_swap", "checksum": {"name": "sha256", "checksum": "522cec1f5e5808bdee9402f06ec6e2a03e1f8c09e4390d8fb82115786240aa2f"}, "tags": [], "refs": [["silver__swap"], ["core__dim_account"], ["core__dim_asset"], ["core__dim_asset"], ["core__dim_application"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing swaps from algofi, tinyman, pactfi, and wagmiswap dexes", "columns": {"FACT_SWAP_ID": {"name": "FACT_SWAP_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_PROGRAM": {"name": "SWAP_PROGRAM", "description": "The DEX or program used to make the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_APPLICATION_ID": {"name": "DIM_APPLICATION_ID", "description": "FK to the DIM_APPLICATION table ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID__SWAP_FROM": {"name": "DIM_ASSET_ID__SWAP_FROM", "description": "FK to the DIM_ASSET table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_ASSET_ID": {"name": "SWAP_FROM_ASSET_ID", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_AMOUNT": {"name": "SWAP_FROM_AMOUNT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "Address of the pool the swap is coming from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID__SWAP_TO": {"name": "DIM_ASSET_ID__SWAP_TO", "description": "FK to the DIM_ASSET table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_ASSET_ID": {"name": "SWAP_TO_ASSET_ID", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_AMOUNT": {"name": "SWAP_TO_AMOUNT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_swap.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_swap_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.032265, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        swap_program,\n        block_id,\n        intra,\n        tx_group_id,\n        app_id,\n        swapper,\n        swap_from_asset_id,\n        swap_from_amount,\n        pool_address,\n        swap_to_asset_id,\n        swap_to_amount,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.swap\n\n\nWHERE\n    _INSERTED_TIMESTAMP >= (\n        SELECT\n            MAX(\n                _INSERTED_TIMESTAMP\n            )\n        FROM\n            ALGORAND_DEV.core.fact_swap\n    ) - INTERVAL '4 HOURS'\n    OR tx_group_id IN (\n        SELECT\n            tx_group_id\n        FROM\n            ALGORAND_DEV.core.fact_swap\n        WHERE\n            dim_block_id = '-1'\n            OR dim_account_id__swapper = '-1'\n            OR dim_asset_id__swap_from = '-1'\n            OR dim_asset_id__swap_to = '-1'\n            OR dim_application_id = '-1'\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.intra as \n    varchar\n), '') || '-' || coalesce(cast(a.swap_program as \n    varchar\n), '') as \n    varchar\n)) AS fact_swap_id,\n    swap_program,\n    COALESCE(\n        f.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        f.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    A.intra,\n    A.tx_group_id,\n    COALESCE(\n        e.dim_application_id,\n        '-1'\n    ) AS dim_application_id,\n    COALESCE(\n        b.dim_account_id,\n        '-1'\n    ) AS dim_account_id__swapper,\n    A.swapper,\n    COALESCE(\n        C.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__swap_from,\n    A.swap_from_asset_id,\n    A.swap_from_amount,\n    A.pool_address,\n    COALESCE(\n        d.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__swap_to,\n    A.swap_to_asset_id,\n    A.swap_to_amount,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    b\n    ON A.swapper = b.address\n    LEFT JOIN ALGORAND_DEV.core.dim_asset C\n    ON A.swap_from_asset_id = C.asset_id\n    LEFT JOIN ALGORAND_DEV.core.dim_asset\n    d\n    ON A.swap_to_asset_id = d.asset_id\n    LEFT JOIN ALGORAND_DEV.core.dim_application\n    e\n    ON A.app_id = e.app_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    f\n    ON A.block_id = f.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_swap"}, "model.algorand_models.core__dim_block": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_block_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['block_id']\n    ) }} AS dim_block_id,\n    block_id,\n    block_timestamp,\n    block_date,\n    block_hour,\n    block_week,\n    block_month,\n    block_quarter,\n    block_year,\n    block_DAYOFMONTH,\n    block_DAYOFWEEK,\n    block_DAYOFYEAR,\n    rewards_level,\n    network,\n    genesis_hash,\n    prev_block_hash,\n    txn_root,\n    header,\n    _INSERTED_TIMESTAMP,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    {{ ref('silver__block') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\nUNION ALL\nSELECT\n    '-1' AS dim_block_id,\n    -1 AS block_id,\n    '1900-01-01' :: datetime AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS rewards_level,\n    NULL AS network,\n    NULL AS genesis_hash,\n    NULL AS prev_block_hash,\n    NULL AS txn_root,\n    NULL AS header,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_block_id,\n    -2 AS block_id,\n    NULL AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS rewards_level,\n    NULL AS network,\n    NULL AS genesis_hash,\n    NULL AS prev_block_hash,\n    NULL AS txn_root,\n    NULL AS header,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_block_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_block"], "unique_id": "model.algorand_models.core__dim_block", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_block.sql", "original_file_path": "models/core/core__dim_block.sql", "name": "core__dim_block", "alias": "dim_block", "checksum": {"name": "sha256", "checksum": "2660b04ca7d6c63a487ed11a6b6a3b162feea7c5ac09e803ee16257cdd59151b"}, "tags": [], "refs": [["silver__block"]], "sources": [], "metrics": [], "description": "Records of all blocks that have occurred on Algorand, dating back to the genesis block. ", "columns": {"DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_WEEK": {"name": "BLOCK_WEEK", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_MONTH": {"name": "BLOCK_MONTH", "description": "The numeric month of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_QUARTER": {"name": "BLOCK_QUARTER", "description": "The numeric quarter of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_YEAR": {"name": "BLOCK_YEAR", "description": "The numeric year of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFMONTH": {"name": "BLOCK_DAYOFMONTH", "description": "The numeric day of month of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFWEEK": {"name": "BLOCK_DAYOFWEEK", "description": "The numeric day of week of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFYEAR": {"name": "BLOCK_DAYOFYEAR", "description": "The numeric day of year of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_LEVEL": {"name": "REWARDS_LEVEL", "description": "How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis. Link: https://algorand.github.io/java-algorand-sdk/com/algorand/algosdk/v2/client/model/BlockRewards.html", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "Signifying whether the block is from mainnet or testnet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENESIS_HASH": {"name": "GENESIS_HASH", "description": "The hash of the genesis block of the network for which the transaction is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_BLOCK_HASH": {"name": "PREV_BLOCK_HASH", "description": "ID to which the block before this belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TXN_ROOT": {"name": "TXN_ROOT", "description": "TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HEADER": {"name": "HEADER", "description": "Block details, see rules below- for more message details https://developer.algorand.org/docs/rest-apis/indexer/#blockrewards", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_block.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_block_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.082519, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(block_id as \n    varchar\n), '') as \n    varchar\n)) AS dim_block_id,\n    block_id,\n    block_timestamp,\n    block_date,\n    block_hour,\n    block_week,\n    block_month,\n    block_quarter,\n    block_year,\n    block_DAYOFMONTH,\n    block_DAYOFWEEK,\n    block_DAYOFYEAR,\n    rewards_level,\n    network,\n    genesis_hash,\n    prev_block_hash,\n    txn_root,\n    header,\n    _INSERTED_TIMESTAMP,\n    'manual' AS _audit_run_id\nFROM\n    ALGORAND_DEV.silver.block\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.dim_block\n    )\n\nUNION ALL\nSELECT\n    '-1' AS dim_block_id,\n    -1 AS block_id,\n    '1900-01-01' :: datetime AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS rewards_level,\n    NULL AS network,\n    NULL AS genesis_hash,\n    NULL AS prev_block_hash,\n    NULL AS txn_root,\n    NULL AS header,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_block_id,\n    -2 AS block_id,\n    NULL AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS rewards_level,\n    NULL AS network,\n    NULL AS genesis_hash,\n    NULL AS prev_block_hash,\n    NULL AS txn_root,\n    NULL AS header,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    'manual' AS _audit_run_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_block"}, "model.algorand_models.core__dim_account": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_account_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['created_at::DATE']\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['address']\n    ) }} AS dim_account_id,\n    A.address,\n    A.account_closed,\n    A.non_zero_rewards_base,\n    A.non_zero_rewards_total,\n    A.non_zero_balance,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    COALESCE(\n        d.dim_wallet_type_id,\n        '-2'\n    ) AS dim_wallet_type_id,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    {{ ref('silver__account') }} A\n    LEFT JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id\n    LEFT JOIN {{ ref('core__dim_wallet_type') }}\n    d\n    ON A.account_data = d.wallet_type\n\n{% if is_incremental() %}\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR address IN (\n        SELECT\n            address\n        FROM\n            {{ this }}\n        WHERE\n            dim_block_id__created_at = '-1'\n            OR dim_wallet_type_id = '-1'\n    )\n{% endif %}\nUNION ALL\nSELECT\n    '-1' AS dim_account_id,\n    'unknown' AS address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-1' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_account_id,\n    'not applicable' AS address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-2' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['address']\n    ) }} AS dim_account_id,\n    address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-2' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    (\n        SELECT\n            'XM6FEYVJ2XDU2IBH4OT6VZGW75YM63CM4TC6AV6BD3JZXFJUIICYTVB5EU' AS address\n        UNION ALL\n        SELECT\n            'SQ2YLWYCDQFCL57KGXC4KNVGGLHH2KG5LWKQ5RSEULMP7XUOARHHTYV34A' AS address\n    ) x", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__account", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_wallet_type"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_account_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["created_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_account"], "unique_id": "model.algorand_models.core__dim_account", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_account.sql", "original_file_path": "models/core/core__dim_account.sql", "name": "core__dim_account", "alias": "dim_account", "checksum": {"name": "sha256", "checksum": "40d346cddb695f3ac39234ea12bb9f7818ce1b0d99b7dd6d5d5227479a1fe838"}, "tags": [], "refs": [["silver__account"], ["core__dim_block"], ["core__dim_block"], ["core__dim_wallet_type"]], "sources": [], "metrics": [], "description": "", "columns": {"DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_CLOSED": {"name": "ACCOUNT_CLOSED", "description": "Whether or not the account is currently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_REWARDS_BASE": {"name": "NON_ZERO_REWARDS_BASE", "description": "Used as part of the rewards computation. Only applicable to accounts which are participating. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_REWARDS_TOTAL": {"name": "NON_ZERO_REWARDS_TOTAL", "description": "Total amount of rewards a wallet address has accrued. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NON_ZERO_BALANCE": {"name": "NON_ZERO_BALANCE", "description": "Total number of ALGOs in the account. Flag indicating whether or not this account has a non-zero value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CREATED_AT": {"name": "DIM_BLOCK_ID__CREATED_AT", "description": "FK to DIM_BLOCK which account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which account was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CLOSED_AT": {"name": "DIM_BLOCK_ID__CLOSED_AT", "description": "FK to DIM_BLOCK during which account was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Block timestamp during which account was closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_WALLET_TYPE_ID": {"name": "DIM_WALLET_TYPE_ID", "description": "Wallet type: sig(single signature), msig(multi-signature), lsig(programmatic-signature)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_DATA": {"name": "ACCOUNT_DATA", "description": "Extra data related to the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_account.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_account_id", "incremental_strategy": "merge", "cluster_by": ["created_at::DATE"]}, "created_at": 1667571088.104429, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(address as \n    varchar\n), '') as \n    varchar\n)) AS dim_account_id,\n    A.address,\n    A.account_closed,\n    A.non_zero_rewards_base,\n    A.non_zero_rewards_total,\n    A.non_zero_balance,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    COALESCE(\n        d.dim_wallet_type_id,\n        '-2'\n    ) AS dim_wallet_type_id,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    ALGORAND_DEV.silver.account A\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_wallet_type\n    d\n    ON A.account_data = d.wallet_type\n\n\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.dim_account\n    )\n    OR address IN (\n        SELECT\n            address\n        FROM\n            ALGORAND_DEV.core.dim_account\n        WHERE\n            dim_block_id__created_at = '-1'\n            OR dim_wallet_type_id = '-1'\n    )\n\nUNION ALL\nSELECT\n    '-1' AS dim_account_id,\n    'unknown' AS address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-1' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_account_id,\n    'not applicable' AS address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-2' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    md5(cast(coalesce(cast(address as \n    varchar\n), '') as \n    varchar\n)) AS dim_account_id,\n    address,\n    FALSE AS account_closed,\n    FALSE AS non_zero_rewards_base,\n    FALSE AS non_zero_rewards_total,\n    FALSE AS non_zero_balance,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '-2' AS dim_wallet_type_id,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    (\n        SELECT\n            'XM6FEYVJ2XDU2IBH4OT6VZGW75YM63CM4TC6AV6BD3JZXFJUIICYTVB5EU' AS address\n        UNION ALL\n        SELECT\n            'SQ2YLWYCDQFCL57KGXC4KNVGGLHH2KG5LWKQ5RSEULMP7XUOARHHTYV34A' AS address\n    ) x", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_account"}, "model.algorand_models.core__fact_transaction_close": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_transaction_close_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        account,\n        asset_id,\n        amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction_close') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR tx_id IN (\n        SELECT\n            tx_id\n        FROM\n            {{ this }}\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id = '-1'\n                OR dim_asset_id = '-1'\n            )\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id','a.intra','a.account']\n    ) }} AS fact_transaction_close_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    b.block_timestamp,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.account AS address,\n    COALESCE(\n        dim_asset_id,\n        '-1'\n    ) AS dim_asset_id,\n    amount,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.account = da.address\n    LEFT JOIN {{ ref('core__dim_asset') }}\n    das\n    ON A.asset_id = das.asset_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__transaction_close", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_close_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_transaction_close"], "unique_id": "model.algorand_models.core__fact_transaction_close", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_transaction_close.sql", "original_file_path": "models/core/core__fact_transaction_close.sql", "name": "core__fact_transaction_close", "alias": "fact_transaction_close", "checksum": {"name": "sha256", "checksum": "06bed45164962576d6da552d22416f51cbcba176a41bbf6514442adba6ba1ac9"}, "tags": [], "refs": [["silver__transaction_close"], ["core__dim_block"], ["core__dim_account"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "Fact table that contains all transaction closes with an amount > 0", "columns": {"FACT_TRANSACTION_CLOSE_ID": {"name": "FACT_TRANSACTION_CLOSE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "An identifier tied to a transaction and its inner transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "A boolean true or false on whether or not this transaction has a parent transaction. The TX_ID will be the same as the parent transaction but will have it's own intra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to Dim_Account for the close account ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID": {"name": "DIM_ASSET_ID", "description": "FK to Dim_Asset table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount of the asset being sent to the receiver", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_transaction_close.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transaction_close_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.127051, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        intra,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        account,\n        asset_id,\n        amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction_close\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_transaction_close\n    )\n    OR tx_id IN (\n        SELECT\n            tx_id\n        FROM\n            ALGORAND_DEV.core.fact_transaction_close\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id = '-1'\n                OR dim_asset_id = '-1'\n            )\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.intra as \n    varchar\n), '') || '-' || coalesce(cast(a.account as \n    varchar\n), '') as \n    varchar\n)) AS fact_transaction_close_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    b.block_timestamp,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.account AS address,\n    COALESCE(\n        dim_asset_id,\n        '-1'\n    ) AS dim_asset_id,\n    amount,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.account = da.address\n    LEFT JOIN ALGORAND_DEV.core.dim_asset\n    das\n    ON A.asset_id = das.asset_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_transaction_close"}, "model.algorand_models.core__dim_wallet_type": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_wallet_type_id',\n    incremental_strategy = 'merge'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['account_data']\n    ) }} AS dim_wallet_type_id,\n    account_data AS wallet_type,\n    MAX(_inserted_timestamp) _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    {{ ref('silver__account') }}\nWHERE\n    account_data IS NOT NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\nGROUP BY\n    dim_wallet_type_id,\n    wallet_type\nUNION ALL\nSELECT\n    '-1' AS dim_wallet_type_id,\n    'unknown' AS wallet_type,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_wallet_type_id,\n    'not applicable' AS wallet_type,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_wallet_type_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_wallet_type"], "unique_id": "model.algorand_models.core__dim_wallet_type", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_wallet_type.sql", "original_file_path": "models/core/core__dim_wallet_type.sql", "name": "core__dim_wallet_type", "alias": "dim_wallet_type", "checksum": {"name": "sha256", "checksum": "05a1c6c1e5f05749e7cac41dd55ebaea5fd9b6b735f4aec28b9b57cd61e478d1"}, "tags": [], "refs": [["silver__account"]], "sources": [], "metrics": [], "description": "R ", "columns": {"DIM_WALLET_TYPE_ID": {"name": "DIM_WALLET_TYPE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WALLET_TYPE": {"name": "WALLET_TYPE", "description": "Wallet type: sig(single signature), msig(multi-signature), lsig(programmatic-signature)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_wallet_type.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_wallet_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_wallet_type_id", "incremental_strategy": "merge"}, "created_at": 1667571088.155251, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(account_data as \n    varchar\n), '') as \n    varchar\n)) AS dim_wallet_type_id,\n    account_data AS wallet_type,\n    MAX(_inserted_timestamp) _inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    ALGORAND_DEV.silver.account\nWHERE\n    account_data IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        ALGORAND_DEV.core.dim_wallet_type\n)\n\nGROUP BY\n    dim_wallet_type_id,\n    wallet_type\nUNION ALL\nSELECT\n    '-1' AS dim_wallet_type_id,\n    'unknown' AS wallet_type,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_wallet_type_id,\n    'not applicable' AS wallet_type,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_wallet_type"}, "model.algorand_models.core__fact_transaction_participation": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_transaction_participation_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS(\n\n  SELECT\n    block_id,\n    intra,\n    address,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__transaction_participation') }}\n\n{% if is_incremental() %}\nWHERE\n  _INSERTED_TIMESTAMP >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR block_id || '--' || address IN (\n    SELECT\n      block_id || '--' || address\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n      OR dim_account_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.block_id','a.intra','a.address']\n  ) }} AS fact_transaction_participation_id,\n  COALESCE(\n    ab.block_timestamp,\n    '1900-01-01' :: DATE\n  ) AS block_timestamp,\n  A.block_id,\n  COALESCE(\n    ab.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.intra,\n  COALESCE(\n    ad.dim_account_id,\n    '-1'\n  ) AS dim_account_id,\n  A.address,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  ab\n  ON A.block_id = ab.block_id\n  LEFT JOIN {{ ref('core__dim_account') }}\n  ad\n  ON A.address = ad.address", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__transaction_participation", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_participation_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_transaction_participation"], "unique_id": "model.algorand_models.core__fact_transaction_participation", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_transaction_participation.sql", "original_file_path": "models/core/core__fact_transaction_participation.sql", "name": "core__fact_transaction_participation", "alias": "fact_transaction_participation", "checksum": {"name": "sha256", "checksum": "63860bde63c1a87dabae415e400888ae74fb394c7834af13c8c4a87a517184a8"}, "tags": [], "refs": [["silver__transaction_participation"], ["core__dim_block"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "Fact table that ties a transaction to an account/address", "columns": {"FACT_TRANSACTION_PARTICIPATION_ID": {"name": "FACT_TRANSACTION_PARTICIPATION_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to the DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to the DIM_ACCOUNT table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_transaction_participation.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transaction_participation_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.1614678, "compiled_sql": "\n\nWITH base AS(\n\n  SELECT\n    block_id,\n    intra,\n    address,\n    _INSERTED_TIMESTAMP\n  FROM\n    ALGORAND_DEV.silver.transaction_participation\n\n\nWHERE\n  _INSERTED_TIMESTAMP >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      ALGORAND_DEV.core.fact_transaction_participation\n  ) - INTERVAL '4 HOURS'\n  OR block_id || '--' || address IN (\n    SELECT\n      block_id || '--' || address\n    FROM\n      ALGORAND_DEV.core.fact_transaction_participation\n    WHERE\n      dim_block_id = '-1'\n      OR dim_account_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.intra as \n    varchar\n), '') || '-' || coalesce(cast(a.address as \n    varchar\n), '') as \n    varchar\n)) AS fact_transaction_participation_id,\n  COALESCE(\n    ab.block_timestamp,\n    '1900-01-01' :: DATE\n  ) AS block_timestamp,\n  A.block_id,\n  COALESCE(\n    ab.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.intra,\n  COALESCE(\n    ad.dim_account_id,\n    '-1'\n  ) AS dim_account_id,\n  A.address,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN ALGORAND_DEV.core.dim_block\n  ab\n  ON A.block_id = ab.block_id\n  LEFT JOIN ALGORAND_DEV.core.dim_account\n  ad\n  ON A.address = ad.address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_transaction_participation"}, "model.algorand_models.core__dim_asset": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_asset_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['created_at::DATE']\n) }}\n\nWITH silver AS (\n\n    SELECT\n        asset_id,\n        asset_name,\n        total_supply,\n        asset_url,\n        decimals,\n        asset_deleted,\n        creator_address,\n        created_at,\n        closed_at,\n        collection_name,\n        collection_nft,\n        arc69_nft,\n        ar3_nft,\n        ar19_nft,\n        traditional_nft,\n        is_nft,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__asset') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '48 HOURS'\n    OR asset_id IN (\n        SELECT\n            asset_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id__creator = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['asset_id']\n    ) }} AS dim_asset_id,\n    asset_id,\n    asset_name,\n    total_supply,\n    asset_url,\n    decimals,\n    asset_deleted,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__creator,\n    A.creator_address AS creator_address,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    collection_name,\n    collection_nft,\n    arc69_nft,\n    ar3_nft,\n    ar19_nft,\n    traditional_nft,\n    is_nft,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    silver A\n    LEFT JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.closed_at = b.block_id\n    JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id\n    JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.creator_address = da.address\nUNION ALL\nSELECT\n    '-1' AS dim_asset_id,\n    -1 AS asset_id,\n    'unknown' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    NULL AS asset_deleted,\n    '-1' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_asset_id,\n    -2 AS asset_id,\n    'not applicable' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    NULL AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['0']\n    ) }} AS dim_asset_id,\n    0 AS asset_id,\n    'ALGO' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    6 AS decimals,\n    FALSE AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.asset_id']\n    ) }} AS dim_asset_id,\n    A.asset_id AS asset_id,\n    NULL AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    FALSE AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    (\n        SELECT\n            DISTINCT asset_id\n        FROM\n            {{ ref('silver__transaction') }}\n        WHERE\n            COALESCE(asset_id, 0) <> 0\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n) A\nLEFT JOIN {{ ref('silver__asset') }}\nb\nON A.asset_id = b.asset_id\nWHERE\n    b.asset_id IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__asset", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account", "model.algorand_models.silver__transaction", "model.algorand_models.silver__asset"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_asset_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["created_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_asset"], "unique_id": "model.algorand_models.core__dim_asset", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_asset.sql", "original_file_path": "models/core/core__dim_asset.sql", "name": "core__dim_asset", "alias": "dim_asset", "checksum": {"name": "sha256", "checksum": "480029d3e2623be22c01d8467dc3b060ffc2053f6b3c706ea1ebc817bdded993"}, "tags": [], "refs": [["silver__asset"], ["core__dim_block"], ["core__dim_block"], ["core__dim_account"], ["silver__transaction"], ["silver__asset"]], "sources": [], "metrics": [], "description": "", "columns": {"DIM_ASSET_ID": {"name": "DIM_ASSET_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "ID associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_NAME": {"name": "ASSET_NAME", "description": "Name associated with the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "Total supply of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_URL": {"name": "ASSET_URL", "description": "The url to the asset website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DELETED": {"name": "ASSET_DELETED", "description": "whether or not the asset is currently deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__CREATOR": {"name": "DIM_ACCOUNT_ID__CREATOR", "description": "FK to DIM_ACCOUNT for the creator address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "Address of the asset creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CREATED_AT": {"name": "DIM_BLOCK_ID__CREATED_AT", "description": "DIM_BLOCK_ID which asset was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which asset was most recently closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CLOSED_AT": {"name": "DIM_BLOCK_ID__CLOSED_AT", "description": "DIM_BLOCK_ID during when the asset was deleted from the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Whether or not the asset is currently deleted from the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NAME": {"name": "COLLECTION_NAME", "description": "Name of the NFT collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLECTION_NFT": {"name": "COLLECTION_NFT", "description": "TRUE/FALSE indicating if the NFT is part of a collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARC69_NFT": {"name": "ARC69_NFT", "description": "TRUE/FALSE indicating if the NFT follows the ARC69 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AR3_NFT": {"name": "AR3_NFT", "description": "TRUE/FALSE indicating if the NFT follows the AR3 standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRADITIONAL_NFT": {"name": "TRADITIONAL_NFT", "description": "TRUE/FALSE indicating if the asset total supply is 1 and the number of decimals is 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IS_NFT": {"name": "IS_NFT", "description": "TRUE/FALSE indicating if this asset is an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_asset.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_asset_id", "incremental_strategy": "merge", "cluster_by": ["created_at::DATE"]}, "created_at": 1667571088.1831439, "compiled_sql": "\n\nWITH silver AS (\n\n    SELECT\n        asset_id,\n        asset_name,\n        total_supply,\n        asset_url,\n        decimals,\n        asset_deleted,\n        creator_address,\n        created_at,\n        closed_at,\n        collection_name,\n        collection_nft,\n        arc69_nft,\n        ar3_nft,\n        ar19_nft,\n        traditional_nft,\n        is_nft,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.asset\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.dim_asset\n    ) - INTERVAL '48 HOURS'\n    OR asset_id IN (\n        SELECT\n            asset_id\n        FROM\n            ALGORAND_DEV.core.dim_asset\n        WHERE\n            dim_account_id__creator = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(asset_id as \n    varchar\n), '') as \n    varchar\n)) AS dim_asset_id,\n    asset_id,\n    asset_name,\n    total_supply,\n    asset_url,\n    decimals,\n    asset_deleted,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__creator,\n    A.creator_address AS creator_address,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    collection_name,\n    collection_nft,\n    arc69_nft,\n    ar3_nft,\n    ar19_nft,\n    traditional_nft,\n    is_nft,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    silver A\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.closed_at = b.block_id\n    JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id\n    JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.creator_address = da.address\nUNION ALL\nSELECT\n    '-1' AS dim_asset_id,\n    -1 AS asset_id,\n    'unknown' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    NULL AS asset_deleted,\n    '-1' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_asset_id,\n    -2 AS asset_id,\n    'not applicable' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    NULL AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    md5(cast(coalesce(cast(0 as \n    varchar\n), '') as \n    varchar\n)) AS dim_asset_id,\n    0 AS asset_id,\n    'ALGO' AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    6 AS decimals,\n    FALSE AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    md5(cast(coalesce(cast(a.asset_id as \n    varchar\n), '') as \n    varchar\n)) AS dim_asset_id,\n    A.asset_id AS asset_id,\n    NULL AS asset_name,\n    NULL AS total_supply,\n    NULL AS asset_url,\n    NULL AS decimals,\n    FALSE AS asset_deleted,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    NULL AS collection_name,\n    NULL AS collection_nft,\n    NULL AS arc69_nft,\n    NULL AS ar3_nft,\n    NULL AS ar19_nft,\n    NULL AS traditional_nft,\n    NULL AS is_nft,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    (\n        SELECT\n            DISTINCT asset_id\n        FROM\n            ALGORAND_DEV.silver.transaction\n        WHERE\n            COALESCE(asset_id, 0) <> 0\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        ALGORAND_DEV.core.dim_asset\n) - INTERVAL '48 HOURS'\n\n) A\nLEFT JOIN ALGORAND_DEV.silver.asset\nb\nON A.asset_id = b.asset_id\nWHERE\n    b.asset_id IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_asset"}, "model.algorand_models.core__fact_transaction": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_transaction_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE', 'dim_transaction_type_id']\n) }}\n\nWITH base AS (\n\n    SELECT\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        asset_id,\n        sender,\n        fee,\n        tx_type,\n        tx_message,\n        extra,\n        app_id,\n        asset_supply,\n        asset_parameters,\n        asset_address,\n        asset_freeze,\n        participation_key,\n        vrf_public_key,\n        vote_first,\n        vote_last,\n        vote_keydilution,\n        receiver,\n        asset_sender,\n        asset_receiver,\n        asset_amount,\n        asset_transferred,\n        amount,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__transaction') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR tx_group_id IN (\n        SELECT\n            tx_id\n        FROM\n            {{ this }}\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id__tx_sender = '-1'\n                OR dim_asset_id = '-1'\n                OR dim_transaction_type_id = '-1'\n            )\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id','a.intra']\n    ) }} AS fact_transaction_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    A.block_id,\n    b.block_timestamp,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__tx_sender,\n    A.sender AS tx_sender,\n    COALESCE(\n        dim_asset_id,\n        CASE\n            WHEN A.tx_type IN (\n                'appl',\n                'keyreg'\n            ) THEN '-2'\n            ELSE '-1'\n        END\n    ) AS dim_asset_id,\n    fee,\n    COALESCE(\n        dim_transaction_type_id,\n        '-1'\n    ) AS dim_transaction_type_id,\n    tx_message,\n    extra,\n    COALESCE(\n        rec.dim_account_id,\n        '-2'\n    ) AS dim_account_id__receiver,\n    A.receiver,\n    COALESCE(\n        a_snd.dim_account_id,\n        '-2'\n    ) AS dim_account_id__asset_sender,\n    A.asset_sender,\n    COALESCE(\n        a_rec.dim_account_id,\n        '-2'\n    ) AS dim_account_id__asset_receiver,\n    A.asset_receiver,\n    app_id,\n    asset_supply,\n    asset_parameters,\n    asset_address,\n    asset_freeze,\n    participation_key,\n    vrf_public_key,\n    vote_first,\n    vote_last,\n    vote_keydilution,\n    asset_amount,\n    amount,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.sender = da.address\n    LEFT JOIN {{ ref('core__dim_account') }}\n    rec\n    ON A.receiver = rec.address\n    LEFT JOIN {{ ref('core__dim_account') }}\n    a_snd\n    ON A.asset_sender = a_snd.address\n    LEFT JOIN {{ ref('core__dim_account') }}\n    a_rec\n    ON A.asset_receiver = a_rec.address\n    LEFT JOIN {{ ref('core__dim_asset') }}\n    das\n    ON A.asset_id = das.asset_id\n    LEFT JOIN {{ ref('core__dim_transaction_type') }}\n    dtt\n    ON A.tx_type = dtt.tx_type", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__transaction", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_transaction_type"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "dim_transaction_type_id"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_transaction"], "unique_id": "model.algorand_models.core__fact_transaction", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_transaction.sql", "original_file_path": "models/core/core__fact_transaction.sql", "name": "core__fact_transaction", "alias": "fact_transaction", "checksum": {"name": "sha256", "checksum": "c574dc2b8f7abd23542d192075d7274ded4853e956019daed9aab5476d96f216"}, "tags": [], "refs": [["silver__transaction"], ["core__dim_block"], ["core__dim_account"], ["core__dim_account"], ["core__dim_account"], ["core__dim_account"], ["core__dim_asset"], ["core__dim_transaction_type"]], "sources": [], "metrics": [], "description": "Fact table that contains all transactions of all types", "columns": {"FACT_TRANSACTION_ID": {"name": "FACT_TRANSACTION_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "An identifier tied to a transaction and its inner transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_TX": {"name": "INNER_TX", "description": "A boolean true or false on whether or not this transaction has a parent transaction. The TX_ID will be the same as the parent transaction but will have it's own intra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__TX_SENDER": {"name": "DIM_ACCOUNT_ID__TX_SENDER", "description": "FK to Dim_Account for the tx_sender ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "Address of the wallet creating the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID": {"name": "DIM_ASSET_ID", "description": "FK to Dim_Asset table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_TRANSACTION_TYPE_ID": {"name": "DIM_TRANSACTION_TYPE_ID", "description": "FK to the Dim_Transaction_Type table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__RECEIVER": {"name": "DIM_ACCOUNT_ID__RECEIVER", "description": "FK to the Dim_Account table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__ASSET_SENDER": {"name": "DIM_ACCOUNT_ID__ASSET_SENDER", "description": "FK to the Dim_Account table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__ASSET_RECEIVER": {"name": "DIM_ACCOUNT_ID__ASSET_RECEIVER", "description": "FK to the Dim_Account table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_RECEIVER": {"name": "ASSET_RECEIVER", "description": "The recipient of the asset transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_ID": {"name": "APP_ID", "description": "ID of the application", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_SUPPLY": {"name": "ASSET_SUPPLY", "description": "The total number of base units of the asset to create. This number cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PARAMETERS": {"name": "ASSET_PARAMETERS", "description": "All parameters involved with the asset being created, modified or destroyed in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The address of the account whose asset is being frozen or unfrozen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_FREEZE": {"name": "ASSET_FREEZE", "description": "True to freeze the asset, otherwise null or false", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTICIPATION_KEY": {"name": "PARTICIPATION_KEY", "description": "The root participation public key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VRF_PUBLIC_KEY": {"name": "VRF_PUBLIC_KEY", "description": "The VRF public key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_FIRST": {"name": "VOTE_FIRST", "description": "The first round that the participation key is valid. Not to be confused with the FirstValid round of the keyreg transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_LAST": {"name": "VOTE_LAST", "description": "The last round that the participation key is valid. Not to be confused with the LastValid round of the keyreg transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_KEYDILUTION": {"name": "VOTE_KEYDILUTION", "description": "This is the dilution for the 2-level participation key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The amount of the asset to be transferred. A zero amount transferred to self allocates that asset in the account's Asset map.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount of the asset being sent to the receiver", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_transaction.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transaction_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE", "dim_transaction_type_id"]}, "created_at": 1667571088.218467, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        intra,\n        block_id,\n        tx_group_id,\n        tx_id,\n        inner_tx,\n        asset_id,\n        sender,\n        fee,\n        tx_type,\n        tx_message,\n        extra,\n        app_id,\n        asset_supply,\n        asset_parameters,\n        asset_address,\n        asset_freeze,\n        participation_key,\n        vrf_public_key,\n        vote_first,\n        vote_last,\n        vote_keydilution,\n        receiver,\n        asset_sender,\n        asset_receiver,\n        asset_amount,\n        asset_transferred,\n        amount,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_transaction\n    )\n    OR tx_group_id IN (\n        SELECT\n            tx_id\n        FROM\n            ALGORAND_DEV.core.fact_transaction\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id__tx_sender = '-1'\n                OR dim_asset_id = '-1'\n                OR dim_transaction_type_id = '-1'\n            )\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.intra as \n    varchar\n), '') as \n    varchar\n)) AS fact_transaction_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    A.block_id,\n    b.block_timestamp,\n    intra,\n    tx_group_id,\n    tx_id,\n    inner_tx,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__tx_sender,\n    A.sender AS tx_sender,\n    COALESCE(\n        dim_asset_id,\n        CASE\n            WHEN A.tx_type IN (\n                'appl',\n                'keyreg'\n            ) THEN '-2'\n            ELSE '-1'\n        END\n    ) AS dim_asset_id,\n    fee,\n    COALESCE(\n        dim_transaction_type_id,\n        '-1'\n    ) AS dim_transaction_type_id,\n    tx_message,\n    extra,\n    COALESCE(\n        rec.dim_account_id,\n        '-2'\n    ) AS dim_account_id__receiver,\n    A.receiver,\n    COALESCE(\n        a_snd.dim_account_id,\n        '-2'\n    ) AS dim_account_id__asset_sender,\n    A.asset_sender,\n    COALESCE(\n        a_rec.dim_account_id,\n        '-2'\n    ) AS dim_account_id__asset_receiver,\n    A.asset_receiver,\n    app_id,\n    asset_supply,\n    asset_parameters,\n    asset_address,\n    asset_freeze,\n    participation_key,\n    vrf_public_key,\n    vote_first,\n    vote_last,\n    vote_keydilution,\n    asset_amount,\n    amount,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.sender = da.address\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    rec\n    ON A.receiver = rec.address\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    a_snd\n    ON A.asset_sender = a_snd.address\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    a_rec\n    ON A.asset_receiver = a_rec.address\n    LEFT JOIN ALGORAND_DEV.core.dim_asset\n    das\n    ON A.asset_id = das.asset_id\n    LEFT JOIN ALGORAND_DEV.core.dim_transaction_type\n    dtt\n    ON A.tx_type = dtt.tx_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_transaction"}, "model.algorand_models.core__dim_application": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_application_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['created_at::DATE']\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['app_id']\n    ) }} AS dim_application_id,\n    app_id,\n    params,\n    app_closed,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__creator,\n    da.address AS creator_address,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    {{ ref('silver__application') }} A\n    LEFT JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.creator_address = da.address\n\n{% if is_incremental() %}\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR app_id IN (\n        SELECT\n            app_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id__creator = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n{% endif %}\nUNION ALL\nSELECT\n    '-1' AS dim_application_id,\n    -1 AS app_id,\n    NULL AS params,\n    NULL AS app_closed,\n    '-1' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_application_id,\n    -2 AS app_id,\n    NULL AS params,\n    NULL AS app_closed,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__application", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_application_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["created_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_application"], "unique_id": "model.algorand_models.core__dim_application", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_application.sql", "original_file_path": "models/core/core__dim_application.sql", "name": "core__dim_application", "alias": "dim_application", "checksum": {"name": "sha256", "checksum": "377226cae8d559ea42ba7dcdde11d118ea9aebbc0637fabdb6d12e9dd0a8eb17"}, "tags": [], "refs": [["silver__application"], ["core__dim_block"], ["core__dim_block"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {"DIM_APPLICATION_ID": {"name": "DIM_APPLICATION_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_ID": {"name": "APP_ID", "description": "ID of the application", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARAMS": {"name": "PARAMS", "description": "Parameters related to the app", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APP_CLOSED": {"name": "APP_CLOSED", "description": "Whether or not the app is currently deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__CREATOR": {"name": "DIM_ACCOUNT_ID__CREATOR", "description": "FK to DIM_ACCOUNT for the creator address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "Wallet creator account address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CREATED_AT": {"name": "DIM_BLOCK_ID__CREATED_AT", "description": "FK to DIM_BLOCK for the created at datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp that the app was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CLOSED_AT": {"name": "DIM_BLOCK_ID__CLOSED_AT", "description": "FK to DIM_BLOCK for the closed at datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_AT": {"name": "CLOSED_AT", "description": "Block timestamp that the app was deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_application.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_application_id", "incremental_strategy": "merge", "cluster_by": ["created_at::DATE"]}, "created_at": 1667571088.265246, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(app_id as \n    varchar\n), '') as \n    varchar\n)) AS dim_application_id,\n    app_id,\n    params,\n    app_closed,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id__creator,\n    da.address AS creator_address,\n    COALESCE(\n        C.dim_block_id,\n        '-1'\n    ) AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    COALESCE(\n        b.dim_block_id,\n        '-2'\n    ) AS dim_block_id__closed_at,\n    b.block_timestamp AS closed_at,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    ALGORAND_DEV.silver.application A\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.closed_at = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.creator_address = da.address\n\n\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.dim_application\n    )\n    OR app_id IN (\n        SELECT\n            app_id\n        FROM\n            ALGORAND_DEV.core.dim_application\n        WHERE\n            dim_account_id__creator = '-1'\n            OR dim_block_id__created_at = '-1'\n    )\n\nUNION ALL\nSELECT\n    '-1' AS dim_application_id,\n    -1 AS app_id,\n    NULL AS params,\n    NULL AS app_closed,\n    '-1' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-1' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-1' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_application_id,\n    -2 AS app_id,\n    NULL AS params,\n    NULL AS app_closed,\n    '-2' AS dim_account_id__creator,\n    NULL AS creator_address,\n    '-2' AS dim_block_id__created_at,\n    NULL AS created_at,\n    '-2' AS dim_block_id__closed_at,\n    NULL AS closed_at,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_application"}, "model.algorand_models.core__dim_transaction_type": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_transaction_type_id',\n    incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n    SELECT\n        {{ dbt_utils.surrogate_key(\n            ['tx_type']\n        ) }} AS dim_transaction_type_id,\n        tx_type,\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        {{ ref('silver__transaction') }}\n    WHERE\n        tx_type IS NOT NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\nGROUP BY\n    dim_transaction_type_id,\n    tx_type\n)\nSELECT\n    dim_transaction_type_id,\n    tx_type,\n    CASE\n        tx_type\n        WHEN 'pay' THEN 'payment'\n        WHEN 'keyreg' THEN 'key registration'\n        WHEN 'acfg' THEN 'asset configuration'\n        WHEN 'axfer' THEN 'asset transfer'\n        WHEN 'afrz' THEN 'asset freeze'\n        WHEN 'appl' THEN 'application call'\n        WHEN 'appl' THEN 'application call'\n        WHEN 'stpf' THEN 'state proof'\n    END tx_type_name,\n    _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base\nUNION ALL\nSELECT\n    '-1' AS dim_transaction_type_id,\n    'unknown' AS tx_type,\n    'unknown' AS tx_type_name,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_transaction_type_id,\n    'not applicable' AS tx_type,\n    'not applicable' AS tx_type_name,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.algorand_models.silver__transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_transaction_type_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__dim_transaction_type"], "unique_id": "model.algorand_models.core__dim_transaction_type", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__dim_transaction_type.sql", "original_file_path": "models/core/core__dim_transaction_type.sql", "name": "core__dim_transaction_type", "alias": "dim_transaction_type", "checksum": {"name": "sha256", "checksum": "7d46905201b7ce740301448adb13f027fad56c7b263eb23622bdcc42743f8d83"}, "tags": [], "refs": [["silver__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {"DIM_TRANSACTION_TYPE_ID": {"name": "DIM_TRANSACTION_TYPE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "Number associated with transaction type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE_NAME": {"name": "TX_TYPE_NAME", "description": "Transaction type name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__dim_transaction_type.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__dim_transaction_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_transaction_type_id", "incremental_strategy": "merge"}, "created_at": 1667571088.2937589, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        md5(cast(coalesce(cast(tx_type as \n    varchar\n), '') as \n    varchar\n)) AS dim_transaction_type_id,\n        tx_type,\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.transaction\n    WHERE\n        tx_type IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        ALGORAND_DEV.core.dim_transaction_type\n)\n\nGROUP BY\n    dim_transaction_type_id,\n    tx_type\n)\nSELECT\n    dim_transaction_type_id,\n    tx_type,\n    CASE\n        tx_type\n        WHEN 'pay' THEN 'payment'\n        WHEN 'keyreg' THEN 'key registration'\n        WHEN 'acfg' THEN 'asset configuration'\n        WHEN 'axfer' THEN 'asset transfer'\n        WHEN 'afrz' THEN 'asset freeze'\n        WHEN 'appl' THEN 'application call'\n        WHEN 'appl' THEN 'application call'\n        WHEN 'stpf' THEN 'state proof'\n    END tx_type_name,\n    _inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base\nUNION ALL\nSELECT\n    '-1' AS dim_transaction_type_id,\n    'unknown' AS tx_type,\n    'unknown' AS tx_type_name,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_transaction_type_id,\n    'not applicable' AS tx_type,\n    'not applicable' AS tx_type_name,\n    '1900-01-01' :: DATE _inserted_timestamp,\n    'manual' AS _audit_run_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.dim_transaction_type"}, "model.algorand_models.core__fact_transaction_reward": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_transaction_reward_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.intra,\n        A.block_id,\n        A.tx_id,\n        A.account,\n        A.amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__transaction_reward') }} A\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR tx_id IN (\n        SELECT\n            tx_id\n        FROM\n            {{ this }}\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id = '-1'\n            )\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id','a.intra','a.account']\n    ) }} AS fact_transaction_reward_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    b.block_timestamp,\n    intra,\n    tx_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.account AS address,\n    amount,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    JOIN {{ ref('core__dim_block') }}\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN {{ ref('core__dim_account') }}\n    da\n    ON A.account = da.address", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__transaction_reward", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_reward_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_transaction_reward"], "unique_id": "model.algorand_models.core__fact_transaction_reward", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_transaction_reward.sql", "original_file_path": "models/core/core__fact_transaction_reward.sql", "name": "core__fact_transaction_reward", "alias": "fact_transaction_reward", "checksum": {"name": "sha256", "checksum": "de25abf5ac56cee92ff83aa26466b888cbdf5b95e70bbd0efaeb63c202bce19c"}, "tags": [], "refs": [["silver__transaction_reward"], ["core__dim_block"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "Fact table that contains all transaction closes with an amount > 0", "columns": {"FACT_TRANSACTION_REWARD_ID": {"name": "FACT_TRANSACTION_REWARD_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INTRA": {"name": "INTRA", "description": "Transaction # into the block where this transaction was confirmed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "An identifier tied to a transaction and its inner transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to Dim_Account for the close account ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount of the asset being sent to the receiver", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_transaction_reward.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transaction_reward_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.3001332, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        A.intra,\n        A.block_id,\n        A.tx_id,\n        A.account,\n        A.amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.transaction_reward A\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_transaction_reward\n    )\n    OR tx_id IN (\n        SELECT\n            tx_id\n        FROM\n            ALGORAND_DEV.core.fact_transaction_reward\n        WHERE\n            (\n                dim_block_id = '-1'\n                OR dim_account_id = '-1'\n            )\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.intra as \n    varchar\n), '') || '-' || coalesce(cast(a.account as \n    varchar\n), '') as \n    varchar\n)) AS fact_transaction_reward_id,\n    COALESCE(\n        b.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    b.block_timestamp,\n    intra,\n    tx_id,\n    COALESCE(\n        da.dim_account_id,\n        '-1'\n    ) AS dim_account_id,\n    A.account AS address,\n    amount,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    JOIN ALGORAND_DEV.core.dim_block\n    b\n    ON A.block_id = b.block_id\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    da\n    ON A.account = da.address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_transaction_reward"}, "model.algorand_models.core__fact_account_current_balance": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'fact_account_current_balance_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['created_at::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        address,\n        rewardsbase,\n        rewards_total,\n        microalgos,\n        created_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__account') }} A\n\n{% if is_incremental() %}\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR address IN (\n        SELECT\n            address\n        FROM\n            {{ this }}\n        WHERE\n            dim_block_id__created_at = '-1'\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.address','dim_account_id']\n    ) }} AS fact_account_current_balance_id,\n    act.dim_account_id,\n    A.address,\n    A.rewardsbase / pow(\n        10,\n        6\n    ) AS rewards_base,\n    A.rewards_total / pow(\n        10,\n        6\n    ) AS rewards_total,\n    A.microalgos / pow(\n        10,\n        6\n    ) AS balance,\n    C.dim_block_id AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    A._inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    JOIN {{ ref('core__dim_account') }}\n    act\n    ON A.address = act.address\n    JOIN {{ ref('core__dim_block') }} C\n    ON A.created_at = C.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_account_current_balance_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["created_at::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "core", "fqn": ["algorand_models", "core", "core__fact_account_current_balance"], "unique_id": "model.algorand_models.core__fact_account_current_balance", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/core__fact_account_current_balance.sql", "original_file_path": "models/core/core__fact_account_current_balance.sql", "name": "core__fact_account_current_balance", "alias": "fact_account_current_balance", "checksum": {"name": "sha256", "checksum": "4e40b2285a14579deb17b446dc34862922d8d6e68a00a79c2668f399d5a19277"}, "tags": [], "refs": [["silver__account"], ["core__dim_account"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Current ALGO amounts tied to the account", "columns": {"FACT_ACCOUNT_CURRENT_BALANCE_ID": {"name": "FACT_ACCOUNT_CURRENT_BALANCE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID": {"name": "DIM_ACCOUNT_ID", "description": "FK to DIM_ACCOUNT for this address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_BASE": {"name": "REWARDS_BASE", "description": "Used as part of the rewards computation. Only applicable to accounts which are participating. ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS_TOTAL": {"name": "REWARDS_TOTAL", "description": "Total amount of rewards a wallet address has accrued", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BALANCE": {"name": "BALANCE", "description": "Total number of ALGOs in the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID__CREATED_AT": {"name": "DIM_BLOCK_ID__CREATED_AT", "description": "FK to DIM_BLOCK which account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Block timestamp which account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/core__fact_account_current_balance.yml", "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_account_current_balance_id", "incremental_strategy": "merge", "cluster_by": ["created_at::DATE"]}, "created_at": 1667571088.319134, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        address,\n        rewardsbase,\n        rewards_total,\n        microalgos,\n        created_at,\n        _inserted_timestamp\n    FROM\n        ALGORAND_DEV.silver.account A\n\n\nWHERE\n    A._inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.core.fact_account_current_balance\n    )\n    OR address IN (\n        SELECT\n            address\n        FROM\n            ALGORAND_DEV.core.fact_account_current_balance\n        WHERE\n            dim_block_id__created_at = '-1'\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(dim_account_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_account_current_balance_id,\n    act.dim_account_id,\n    A.address,\n    A.rewardsbase / pow(\n        10,\n        6\n    ) AS rewards_base,\n    A.rewards_total / pow(\n        10,\n        6\n    ) AS rewards_total,\n    A.microalgos / pow(\n        10,\n        6\n    ) AS balance,\n    C.dim_block_id AS dim_block_id__created_at,\n    C.block_timestamp AS created_at,\n    A._inserted_timestamp,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    JOIN ALGORAND_DEV.core.dim_account\n    act\n    ON A.address = act.address\n    JOIN ALGORAND_DEV.core.dim_block C\n    ON A.created_at = C.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.core.fact_account_current_balance"}, "model.algorand_models.nft__fact_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['fact_nft_sales_id','block_timestamp::Date'],\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n    SELECT\n        'ab2 gallery' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_ab2_gallery') }}\n    UNION ALL\n    SELECT\n        'algoxnft' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_algoxnft') }}\n    UNION ALL\n    SELECT\n        'octorand' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_octorand') }}\n    UNION ALL\n    SELECT\n        'rand gallery' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_rand_gallery') }}\n    UNION ALL\n    SELECT\n        'shufl' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_shufl') }}\n    UNION ALL\n    SELECT\n        'fifa collect' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_sales_fifa_collect') }}\n    UNION ALL\n    SELECT\n        'atomic swaps' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        {{ ref('silver__nft_atomic_swaps') }}\n    WHERE\n        concat_ws(\n            tx_group_id :: STRING,\n            nft_asset_id :: STRING\n        ) NOT IN (\n            SELECT\n                concat_ws(\n                    tx_group_id :: STRING,\n                    nft_asset_id :: STRING\n                )\n            FROM\n                {{ ref('silver__nft_sales_rand_gallery') }}\n        )\n        AND concat_ws(\n            tx_group_id :: STRING,\n            nft_asset_id :: STRING\n        ) NOT IN (\n            SELECT\n                concat_ws(\n                    tx_group_id :: STRING,\n                    nft_asset_id :: STRING\n                )\n            FROM\n                {{ ref('silver__nft_sales_algoxnft') }}\n        )\n),\nmid AS (\n    SELECT\n        *\n    FROM\n        base\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n    OR block_id || '--' || tx_group_id || '--' || nft_asset_id IN (\n        SELECT\n            block_id || '--' || tx_group_id || '--' || nft_asset_id\n        FROM\n            {{ this }}\n        WHERE\n            dim_account_id__purchaser = '-1'\n            OR dim_asset_id__nft = '-1'\n            OR dim_block_id = '-1'\n    )\n{% endif %}\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['a.block_id','a.tx_group_id','a.nft_asset_id']\n    ) }} AS fact_nft_sales_id,\n    nft_marketplace,\n    COALESCE(\n        d.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        d.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    tx_group_id,\n    purchaser,\n    COALESCE(\n        b.dim_account_id,\n        '-1'\n    ) AS dim_account_id__purchaser,\n    nft_asset_id,\n    COALESCE(\n        C.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__nft,\n    number_of_nfts,\n    total_sales_amount,\n    A._INSERTED_TIMESTAMP,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN {{ ref('core__dim_account') }}\n    b\n    ON A.purchaser = b.address\n    LEFT JOIN {{ ref('core__dim_asset') }} C\n    ON A.nft_asset_id = C.asset_id\n    LEFT JOIN {{ ref('core__dim_block') }}\n    d\n    ON A.block_id = d.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_shufl", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_nft_sales_id", "block_timestamp::Date"], "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "ALGORAND_DEV", "schema": "nft", "fqn": ["algorand_models", "core", "NFT", "nft__fact_nft_sales"], "unique_id": "model.algorand_models.nft__fact_nft_sales", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "core/NFT/nft__fact_nft_sales.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.sql", "name": "nft__fact_nft_sales", "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "8b938398b9292fa80b67c5ecf3b44498f8b6fffdf892169bc1b073dc894cac35"}, "tags": [], "refs": [["silver__nft_sales_ab2_gallery"], ["silver__nft_sales_algoxnft"], ["silver__nft_sales_octorand"], ["silver__nft_sales_rand_gallery"], ["silver__nft_sales_shufl"], ["silver__nft_sales_fifa_collect"], ["silver__nft_atomic_swaps"], ["silver__nft_sales_rand_gallery"], ["silver__nft_sales_algoxnft"], ["core__dim_account"], ["core__dim_asset"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {"FACT_NFT_SALES_ID": {"name": "FACT_NFT_SALES_ID", "description": "The marketplace or process used to make exchange the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_MARKETPLACE": {"name": "NFT_MARKETPLACE", "description": "The marketplace or process used to make exchange the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_GROUP_ID": {"name": "TX_GROUP_ID", "description": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "Address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ACCOUNT_ID__PURCHASER": {"name": "DIM_ACCOUNT_ID__PURCHASER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ASSET_ID": {"name": "NFT_ASSET_ID", "description": "The asset id of the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_ASSET_ID__NFT": {"name": "DIM_ASSET_ID__NFT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_NFTS": {"name": "NUMBER_OF_NFTS", "description": "The amount on the NFT sold. In most cases this will be 1 but some NFTs have a token supply higher than 1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SALES_AMOUNT": {"name": "TOTAL_SALES_AMOUNT", "description": "Total amount of paid in ALGOs for the NFT purchase", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "algorand_models://models/core/NFT/nft__fact_nft_sales.yml", "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": ["fact_nft_sales_id", "block_timestamp::Date"], "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1667571088.340202, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        'ab2 gallery' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_ab2_gallery\n    UNION ALL\n    SELECT\n        'algoxnft' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_algoxnft\n    UNION ALL\n    SELECT\n        'octorand' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_octorand\n    UNION ALL\n    SELECT\n        'rand gallery' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_rand_gallery\n    UNION ALL\n    SELECT\n        'shufl' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_shufl\n    UNION ALL\n    SELECT\n        'fifa collect' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_sales_fifa_collect\n    UNION ALL\n    SELECT\n        'atomic swaps' AS nft_marketplace,\n        block_id,\n        tx_group_id,\n        purchaser,\n        nft_asset_id,\n        number_of_nfts,\n        total_sales_amount,\n        _INSERTED_TIMESTAMP\n    FROM\n        ALGORAND_DEV.silver.nft_atomic_swaps\n    WHERE\n        concat_ws(\n            tx_group_id :: STRING,\n            nft_asset_id :: STRING\n        ) NOT IN (\n            SELECT\n                concat_ws(\n                    tx_group_id :: STRING,\n                    nft_asset_id :: STRING\n                )\n            FROM\n                ALGORAND_DEV.silver.nft_sales_rand_gallery\n        )\n        AND concat_ws(\n            tx_group_id :: STRING,\n            nft_asset_id :: STRING\n        ) NOT IN (\n            SELECT\n                concat_ws(\n                    tx_group_id :: STRING,\n                    nft_asset_id :: STRING\n                )\n            FROM\n                ALGORAND_DEV.silver.nft_sales_algoxnft\n        )\n),\nmid AS (\n    SELECT\n        *\n    FROM\n        base\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            ALGORAND_DEV.nft.fact_nft_sales\n    )\n    OR block_id || '--' || tx_group_id || '--' || nft_asset_id IN (\n        SELECT\n            block_id || '--' || tx_group_id || '--' || nft_asset_id\n        FROM\n            ALGORAND_DEV.nft.fact_nft_sales\n        WHERE\n            dim_account_id__purchaser = '-1'\n            OR dim_asset_id__nft = '-1'\n            OR dim_block_id = '-1'\n    )\n\n)\nSELECT\n    md5(cast(coalesce(cast(a.block_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_group_id as \n    varchar\n), '') || '-' || coalesce(cast(a.nft_asset_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_nft_sales_id,\n    nft_marketplace,\n    COALESCE(\n        d.block_timestamp,\n        '1900-01-01' :: DATE\n    ) block_timestamp,\n    COALESCE(\n        d.dim_block_id,\n        '-1'\n    ) AS dim_block_id,\n    tx_group_id,\n    purchaser,\n    COALESCE(\n        b.dim_account_id,\n        '-1'\n    ) AS dim_account_id__purchaser,\n    nft_asset_id,\n    COALESCE(\n        C.dim_asset_id,\n        '-1'\n    ) AS dim_asset_id__nft,\n    number_of_nfts,\n    total_sales_amount,\n    A._INSERTED_TIMESTAMP,\n    'manual' AS _audit_run_id\nFROM\n    base A\n    LEFT JOIN ALGORAND_DEV.core.dim_account\n    b\n    ON A.purchaser = b.address\n    LEFT JOIN ALGORAND_DEV.core.dim_asset C\n    ON A.nft_asset_id = C.asset_id\n    LEFT JOIN ALGORAND_DEV.core.dim_block\n    d\n    ON A.block_id = d.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ALGORAND_DEV.nft.fact_nft_sales"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ead921a8d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa46965588b1a4a3739ab12ec3de1164\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ACCOUNT_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa46965588b1a4a3739ab12ec3de1164", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ead921a8d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_fa46965588b1a4a3739ab12ec3de1164.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID", "alias": "fact_account_asset_FACT_ACCOUNT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_expectations_expect_column_fa46965588b1a4a3739ab12ec3de1164.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fa46965588b1a4a3739ab12ec3de1164"}, "created_at": 1667571087.9225469, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ACCOUNT_ASSET_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_ACCOUNT_ASSET_ID", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_DIM_ACCOUNT_ID.ef7f5bee2c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_DIM_ACCOUNT_ID.ef7f5bee2c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_DIM_ACCOUNT_ID", "alias": "fact_account_asset_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.9299998, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ACCOUNT_ID\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere DIM_ACCOUNT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_ADDRESS.2fb62466a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_ADDRESS.2fb62466a1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_ADDRESS.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_ADDRESS", "alias": "fact_account_asset_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.93095, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_DIM_ASSET_ID.9ff76e60c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_DIM_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_DIM_ASSET_ID.9ff76e60c9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_DIM_ASSET_ID.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_DIM_ASSET_ID", "alias": "fact_account_asset_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_DIM_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.932031, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ASSET_ID\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere DIM_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_ASSET_ID.3aea0c0135": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_ASSET_ID.3aea0c0135", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_ASSET_ID.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_ASSET_ID", "alias": "fact_account_asset_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.9329212, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_AMOUNT.ef5fdc71d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_AMOUNT"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_AMOUNT.ef5fdc71d6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_AMOUNT.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_AMOUNT", "alias": "fact_account_asset_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.9337852, "compiled_sql": "\n    \n    \n\n\n\nselect AMOUNT\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT.597703be38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d80f416b3ff5d760b7942d08ca9f287d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d80f416b3ff5d760b7942d08ca9f287d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT.597703be38", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_d80f416b3ff5d760b7942d08ca9f287d.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT", "alias": "fact_account_asset_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_expectations_expect_column_d80f416b3ff5d760b7942d08ca9f287d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d80f416b3ff5d760b7942d08ca9f287d"}, "created_at": 1667571087.93463, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('FACT_ACCOUNT_ASSET_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_ACCOUNT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_ASSET_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_BLOCK_ID__ASSET_ADDED_AT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_ADDED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_BLOCK_ID__ASSET_LAST_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_LAST_REMOVED' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_CLOSED' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROZEN' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_AUDIT_RUN_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_ASSET_ADDED_AT.c52060be1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ADDED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_ASSET_ADDED_AT"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_ASSET_ADDED_AT.c52060be1f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_ASSET_ADDED_AT.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_ASSET_ADDED_AT", "alias": "fact_account_asset_ASSET_ADDED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_ASSET_ADDED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571087.9403079, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ADDED_AT\nfrom (select * from ALGORAND_DEV.core.fact_account_asset where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere ASSET_ADDED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ADDED_AT", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED.6f72982717": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_account_as_8df6eb12149aede46f66883d051bb5d3\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__ASSET_LAST_REMOVED", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "not_null_core__fact_account_as_8df6eb12149aede46f66883d051bb5d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED.6f72982717", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_as_8df6eb12149aede46f66883d051bb5d3.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED", "alias": "fact_account_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_as_8df6eb12149aede46f66883d051bb5d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_core__fact_account_as_8df6eb12149aede46f66883d051bb5d3"}, "created_at": 1667571087.94146, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__ASSET_LAST_REMOVED\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere DIM_BLOCK_ID__ASSET_LAST_REMOVED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__ASSET_LAST_REMOVED", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED.fcfe5adddb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80445df8800ec0c0ad6f0d48bc668e67\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ASSET_LAST_REMOVED", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80445df8800ec0c0ad6f0d48bc668e67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED.fcfe5adddb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_80445df8800ec0c0ad6f0d48bc668e67.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED", "alias": "fact_account_asset_ASSET_LAST_REMOVED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_expectations_expect_column_80445df8800ec0c0ad6f0d48bc668e67.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_80445df8800ec0c0ad6f0d48bc668e67"}, "created_at": 1667571087.942379, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ASSET_LAST_REMOVED' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_LAST_REMOVED", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_ASSET_CLOSED.c1a67ef164": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_CLOSED", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_ASSET_CLOSED"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_ASSET_CLOSED.c1a67ef164", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_ASSET_CLOSED.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_ASSET_CLOSED", "alias": "fact_account_asset_ASSET_CLOSED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_ASSET_CLOSED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.945357, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_CLOSED\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere ASSET_CLOSED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_CLOSED", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.not_null_core__fact_account_asset_FROZEN.5e726af5b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROZEN", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_asset_FROZEN"], "unique_id": "test.algorand_models.not_null_core__fact_account_asset_FROZEN.5e726af5b0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_asset_FROZEN.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "not_null_core__fact_account_asset_FROZEN", "alias": "fact_account_asset_FROZEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/not_null_core__fact_account_asset_FROZEN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.946265, "compiled_sql": "\n    \n    \n\n\n\nselect FROZEN\nfrom ALGORAND_DEV.core.fact_account_asset\nwhere FROZEN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROZEN", "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ee00d0290": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_8e85aa75acb3fc08df118b7693b59207\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ACCOUNT_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_8e85aa75acb3fc08df118b7693b59207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ee00d0290", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_8e85aa75acb3fc08df118b7693b59207.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID", "alias": "fact_account_asset_FACT_ACCOUNT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_constraints_primary_key_co_8e85aa75acb3fc08df118b7693b59207.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_8e85aa75acb3fc08df118b7693b59207"}, "created_at": 1667571087.947092, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ACCOUNT_ASSET_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_account_asset\n    group by FACT_ACCOUNT_ASSET_ID\n    having count(*) > 1\n        or FACT_ACCOUNT_ASSET_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c3507c07546144c6e0f8ff711ea70749\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c3507c07546144c6e0f8ff711ea70749", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_c3507c07546144c6e0f8ff711ea70749.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_account_asset_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_constraints_foreign_key_co_c3507c07546144c6e0f8ff711ea70749.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_c3507c07546144c6e0f8ff711ea70749"}, "created_at": 1667571087.954539, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_account_asset\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_8feda7825834938082d4d2fcd1bd1404\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__ASSET_ADDED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_8feda7825834938082d4d2fcd1bd1404", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_8feda7825834938082d4d2fcd1bd1404.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_account_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_constraints_foreign_key_co_8feda7825834938082d4d2fcd1bd1404.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_8feda7825834938082d4d2fcd1bd1404"}, "created_at": 1667571087.9627361, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__ASSET_ADDED_AT\n  from ALGORAND_DEV.core.fact_account_asset\n  where 1=1\n        and DIM_BLOCK_ID__ASSET_ADDED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__ASSET_ADDED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_da24838f6b20d1646eb87a46efc286a1\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__ASSET_LAST_REMOVED", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_da24838f6b20d1646eb87a46efc286a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_da24838f6b20d1646eb87a46efc286a1.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_account_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_constraints_foreign_key_co_da24838f6b20d1646eb87a46efc286a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_da24838f6b20d1646eb87a46efc286a1"}, "created_at": 1667571087.965568, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__ASSET_LAST_REMOVED\n  from ALGORAND_DEV.core.fact_account_asset\n  where 1=1\n        and DIM_BLOCK_ID__ASSET_LAST_REMOVED is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__ASSET_LAST_REMOVED\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_e9c6a37f8e531de09fce6467227db7ee\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ASSET_ID", "pk_table_name": "ref('core__dim_asset')", "pk_column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_account_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_account_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_e9c6a37f8e531de09fce6467227db7ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_e9c6a37f8e531de09fce6467227db7ee.sql", "original_file_path": "models/core/core__fact_account_asset.yml", "name": "dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_", "alias": "fact_account_asset_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"], ["core__fact_account_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_asset.yml/dbt_constraints_foreign_key_co_e9c6a37f8e531de09fce6467227db7ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_e9c6a37f8e531de09fce6467227db7ee"}, "created_at": 1667571087.968605, "compiled_sql": "\nwith child as (\n  select\n    DIM_ASSET_ID\n  from ALGORAND_DEV.core.fact_account_asset\n  where 1=1\n        and DIM_ASSET_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ASSET_ID\n    from ALGORAND_DEV.core.dim_asset\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ASSET_ID = child.DIM_ASSET_ID\n\n    where parent.DIM_ASSET_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.716ceb98d9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58827c44269f45b693f1bc660d11a14b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ACCOUNT_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58827c44269f45b693f1bc660d11a14b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.716ceb98d9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_58827c44269f45b693f1bc660d11a14b.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID", "alias": "fact_account_application_FACT_ACCOUNT_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_expectations_expect_column_58827c44269f45b693f1bc660d11a14b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_58827c44269f45b693f1bc660d11a14b"}, "created_at": 1667571087.9739819, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ACCOUNT_APPLICATION_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_ACCOUNT_APPLICATION_ID", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_DIM_ACCOUNT_ID.4897712a9a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_DIM_ACCOUNT_ID.4897712a9a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_DIM_ACCOUNT_ID", "alias": "fact_account_application_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.976096, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ACCOUNT_ID\nfrom ALGORAND_DEV.core.fact_account_application\nwhere DIM_ACCOUNT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_ADDRESS.7984f5ac55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_ADDRESS.7984f5ac55", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_ADDRESS.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_ADDRESS", "alias": "fact_account_application_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.9771352, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_account_application\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_DIM_APPLICATION_ID.f02218a4a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_DIM_APPLICATION_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_DIM_APPLICATION_ID.f02218a4a9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_DIM_APPLICATION_ID.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_DIM_APPLICATION_ID", "alias": "fact_account_application_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_DIM_APPLICATION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.978016, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_APPLICATION_ID\nfrom ALGORAND_DEV.core.fact_account_application\nwhere DIM_APPLICATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_APPLICATION_ID", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.negative_one_core__fact_account_application_DIM_APPLICATION_ID.c71f32a635": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_account_application_DIM_APPLICATION_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_account_application_DIM_APPLICATION_ID.c71f32a635", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_account_application_DIM_APPLICATION_ID.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "negative_one_core__fact_account_application_DIM_APPLICATION_ID", "alias": "fact_account_application_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/negative_one_core__fact_account_application_DIM_APPLICATION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571087.979192, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_account_application where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_APPLICATION_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_APPLICATION_ID", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_APP_ID.cb34da215a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_APP_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_APP_ID.cb34da215a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_APP_ID.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_APP_ID", "alias": "fact_account_application_APP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_APP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.9821599, "compiled_sql": "\n    \n    \n\n\n\nselect APP_ID\nfrom ALGORAND_DEV.core.fact_account_application\nwhere APP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_ID", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_APP_INFO.a05149294e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"APP_CLOSED = FALSE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_INFO", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "APP_CLOSED = FALSE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_APP_INFO"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_APP_INFO.a05149294e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_APP_INFO.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_APP_INFO", "alias": "fact_account_application_APP_INFO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_APP_INFO.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "APP_CLOSED = FALSE"}, "created_at": 1667571087.983409, "compiled_sql": "\n    \n    \n\n\n\nselect APP_INFO\nfrom (select * from ALGORAND_DEV.core.fact_account_application where APP_CLOSED = FALSE) dbt_subquery\nwhere APP_INFO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_INFO", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.1b562cd2bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_account_ap_9c67eda5e3098fb08e74c12a5db71291\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "not_null_core__fact_account_ap_9c67eda5e3098fb08e74c12a5db71291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.1b562cd2bf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_ap_9c67eda5e3098fb08e74c12a5db71291.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT", "alias": "fact_account_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_ap_9c67eda5e3098fb08e74c12a5db71291.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_core__fact_account_ap_9c67eda5e3098fb08e74c12a5db71291"}, "created_at": 1667571087.984193, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CREATED_AT\nfrom ALGORAND_DEV.core.fact_account_application\nwhere DIM_BLOCK_ID__CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.d9d0a3f46a": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_accoun_24b5bcb842b56097d37ca34f83b2e3a9\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_accoun_24b5bcb842b56097d37ca34f83b2e3a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.d9d0a3f46a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_accoun_24b5bcb842b56097d37ca34f83b2e3a9.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT", "alias": "fact_account_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/negative_one_core__fact_accoun_24b5bcb842b56097d37ca34f83b2e3a9.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_accoun_24b5bcb842b56097d37ca34f83b2e3a9"}, "created_at": 1667571087.985142, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_account_application where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID__CREATED_AT = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.b223c523ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CLOSED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT"], "unique_id": "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.b223c523ef", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT", "alias": "fact_account_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571087.987173, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CLOSED_AT\nfrom ALGORAND_DEV.core.fact_account_application\nwhere DIM_BLOCK_ID__CLOSED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CLOSED_AT", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT.d188d4fbe6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a870ef04facc2f01a85bdc54ea05548\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CLOSED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a870ef04facc2f01a85bdc54ea05548", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT.d188d4fbe6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_4a870ef04facc2f01a85bdc54ea05548.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT", "alias": "fact_account_application_CLOSED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_expectations_expect_column_4a870ef04facc2f01a85bdc54ea05548.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a870ef04facc2f01a85bdc54ea05548"}, "created_at": 1667571087.9879522, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CLOSED_AT' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSED_AT", "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.cf5862e2d6": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_0976df9d3845acc28876cb47ca8ef39f\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ACCOUNT_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_0976df9d3845acc28876cb47ca8ef39f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.cf5862e2d6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_0976df9d3845acc28876cb47ca8ef39f.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID", "alias": "fact_account_application_FACT_ACCOUNT_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_constraints_primary_key_co_0976df9d3845acc28876cb47ca8ef39f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_0976df9d3845acc28876cb47ca8ef39f"}, "created_at": 1667571087.989886, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ACCOUNT_APPLICATION_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_account_application\n    group by FACT_ACCOUNT_APPLICATION_ID\n    having count(*) > 1\n        or FACT_ACCOUNT_APPLICATION_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_1b960ff08aa6a48b08d4d22db4909baf\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_1b960ff08aa6a48b08d4d22db4909baf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_1b960ff08aa6a48b08d4d22db4909baf.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_account_application_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_constraints_foreign_key_co_1b960ff08aa6a48b08d4d22db4909baf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_1b960ff08aa6a48b08d4d22db4909baf"}, "created_at": 1667571087.9922051, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_account_application\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_dbb2c70badc4e6547da8d89678ad80ea\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_APPLICATION_ID", "pk_table_name": "ref('core__dim_application')", "pk_column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application", "model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_dbb2c70badc4e6547da8d89678ad80ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_dbb2c70badc4e6547da8d89678ad80ea.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_", "alias": "fact_account_application_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"], ["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_constraints_foreign_key_co_dbb2c70badc4e6547da8d89678ad80ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_dbb2c70badc4e6547da8d89678ad80ea"}, "created_at": 1667571087.9947782, "compiled_sql": "\nwith child as (\n  select\n    DIM_APPLICATION_ID\n  from ALGORAND_DEV.core.fact_account_application\n  where 1=1\n        and DIM_APPLICATION_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_APPLICATION_ID\n    from ALGORAND_DEV.core.dim_application\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_APPLICATION_ID = child.DIM_APPLICATION_ID\n\n    where parent.DIM_APPLICATION_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_5304ec043cc0cb7938e43911c943ed72\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CREATED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_5304ec043cc0cb7938e43911c943ed72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_5304ec043cc0cb7938e43911c943ed72.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_account_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_constraints_foreign_key_co_5304ec043cc0cb7938e43911c943ed72.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_5304ec043cc0cb7938e43911c943ed72"}, "created_at": 1667571087.99735, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CREATED_AT\n  from ALGORAND_DEV.core.fact_account_application\n  where 1=1\n        and DIM_BLOCK_ID__CREATED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CREATED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_e10d6c7c7926c9c19eac907d8a500fa8\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CLOSED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_account_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_e10d6c7c7926c9c19eac907d8a500fa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_e10d6c7c7926c9c19eac907d8a500fa8.sql", "original_file_path": "models/core/core__fact_account_application.yml", "name": "dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_account_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_account_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_application.yml/dbt_constraints_foreign_key_co_e10d6c7c7926c9c19eac907d8a500fa8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_e10d6c7c7926c9c19eac907d8a500fa8"}, "created_at": 1667571088.000468, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CLOSED_AT\n  from ALGORAND_DEV.core.fact_account_application\n  where 1=1\n        and DIM_BLOCK_ID__CLOSED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CLOSED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_application"}, "test.algorand_models.not_null_core__fact_block_FACT_BLOCK_ID.27245331ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_block_FACT_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__fact_block_FACT_BLOCK_ID.27245331ae", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_block_FACT_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "not_null_core__fact_block_FACT_BLOCK_ID", "alias": "fact_block_FACT_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/not_null_core__fact_block_FACT_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.0044868, "compiled_sql": "\n    \n    \n\n\n\nselect FACT_BLOCK_ID\nfrom ALGORAND_DEV.core.fact_block\nwhere FACT_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_BLOCK_ID", "file_key_name": "models.core__fact_block"}, "test.algorand_models.not_null_core__fact_block_BLOCK_ID.7a114f396c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_block_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__fact_block_BLOCK_ID.7a114f396c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_block_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "not_null_core__fact_block_BLOCK_ID", "alias": "fact_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/not_null_core__fact_block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.0054212, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.fact_block\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_block"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP.e29e19ead3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_51fc4be96c41c164fcd7ccf3b4231832\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51fc4be96c41c164fcd7ccf3b4231832", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP.e29e19ead3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_51fc4be96c41c164fcd7ccf3b4231832.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP", "alias": "fact_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/dbt_expectations_expect_column_51fc4be96c41c164fcd7ccf3b4231832.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_51fc4be96c41c164fcd7ccf3b4231832"}, "created_at": 1667571088.006187, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1.db0ac774cc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_31bd71723dd5992d0a997a9b3f8ecb4d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_31bd71723dd5992d0a997a9b3f8ecb4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1.db0ac774cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_31bd71723dd5992d0a997a9b3f8ecb4d.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1", "alias": "fact_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/dbt_expectations_expect_row_va_31bd71723dd5992d0a997a9b3f8ecb4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_31bd71723dd5992d0a997a9b3f8ecb4d"}, "created_at": 1667571088.008235, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.fact_block\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block"}, "test.algorand_models.negative_one_core__fact_block_DIM_BLOCK_ID.ce779fd4a4": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_block_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_block_DIM_BLOCK_ID.ce779fd4a4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_block_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "negative_one_core__fact_block_DIM_BLOCK_ID", "alias": "fact_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/negative_one_core__fact_block_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.019721, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_block where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_block"}, "test.algorand_models.not_null_core__fact_block_TX_COUNT.a0b3964e1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_block_TX_COUNT"], "unique_id": "test.algorand_models.not_null_core__fact_block_TX_COUNT.a0b3964e1c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_block_TX_COUNT.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "not_null_core__fact_block_TX_COUNT", "alias": "fact_block_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/not_null_core__fact_block_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.0219321, "compiled_sql": "\n    \n    \n\n\n\nselect TX_COUNT\nfrom ALGORAND_DEV.core.fact_block\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_block"}, "test.algorand_models.not_null_core__fact_block_TX_SENDER_COUNT.5d9001e0b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER_COUNT", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_block_TX_SENDER_COUNT"], "unique_id": "test.algorand_models.not_null_core__fact_block_TX_SENDER_COUNT.5d9001e0b4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_block_TX_SENDER_COUNT.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "not_null_core__fact_block_TX_SENDER_COUNT", "alias": "fact_block_TX_SENDER_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/not_null_core__fact_block_TX_SENDER_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.022841, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER_COUNT\nfrom ALGORAND_DEV.core.fact_block\nwhere TX_SENDER_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER_COUNT", "file_key_name": "models.core__fact_block"}, "test.algorand_models.not_null_core__fact_block_FEE_TOTAL.9bf05d0902": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE_TOTAL", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_block_FEE_TOTAL"], "unique_id": "test.algorand_models.not_null_core__fact_block_FEE_TOTAL.9bf05d0902", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_block_FEE_TOTAL.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "not_null_core__fact_block_FEE_TOTAL", "alias": "fact_block_FEE_TOTAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/not_null_core__fact_block_FEE_TOTAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.023597, "compiled_sql": "\n    \n    \n\n\n\nselect FEE_TOTAL\nfrom ALGORAND_DEV.core.fact_block\nwhere FEE_TOTAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE_TOTAL", "file_key_name": "models.core__fact_block"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.22d32fdac2": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.22d32fdac2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID", "alias": "fact_block_FACT_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.024343, "compiled_sql": "with validation_errors as (\n    select\n        FACT_BLOCK_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_block\n    group by FACT_BLOCK_ID\n    having count(*) > 1\n        or FACT_BLOCK_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_block"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c3ddcc7d5bcbf2458978b330af30b7b0\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_block"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c3ddcc7d5bcbf2458978b330af30b7b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_c3ddcc7d5bcbf2458978b330af30b7b0.sql", "original_file_path": "models/core/core__fact_block.yml", "name": "dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_block.yml/dbt_constraints_foreign_key_co_c3ddcc7d5bcbf2458978b330af30b7b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_c3ddcc7d5bcbf2458978b330af30b7b0"}, "created_at": 1667571088.026259, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.core.fact_block\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_block"}, "test.algorand_models.not_null_core__fact_swap_FACT_SWAP_ID.c6313c3a69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_SWAP_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_FACT_SWAP_ID"], "unique_id": "test.algorand_models.not_null_core__fact_swap_FACT_SWAP_ID.c6313c3a69", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_FACT_SWAP_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_FACT_SWAP_ID", "alias": "fact_swap_FACT_SWAP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_FACT_SWAP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.032657, "compiled_sql": "\n    \n    \n\n\n\nselect FACT_SWAP_ID\nfrom ALGORAND_DEV.core.fact_swap\nwhere FACT_SWAP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_SWAP_ID", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAP_PROGRAM.0bfa114632": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_PROGRAM", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAP_PROGRAM"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAP_PROGRAM.0bfa114632", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAP_PROGRAM.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAP_PROGRAM", "alias": "fact_swap_SWAP_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAP_PROGRAM.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.033476, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_PROGRAM\nfrom ALGORAND_DEV.core.fact_swap\nwhere SWAP_PROGRAM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_PROGRAM", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP.1f26576360": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7c098f071fc453a6ea32eda1956f3808\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7c098f071fc453a6ea32eda1956f3808", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP.1f26576360", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_7c098f071fc453a6ea32eda1956f3808.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP", "alias": "fact_swap_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_expectations_expect_column_7c098f071fc453a6ea32eda1956f3808.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7c098f071fc453a6ea32eda1956f3808"}, "created_at": 1667571088.0342321, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1.5cbe20491e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9d85974d9ab2f69561fdd4884c5624b8\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9d85974d9ab2f69561fdd4884c5624b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1.5cbe20491e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_9d85974d9ab2f69561fdd4884c5624b8.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1", "alias": "fact_swap_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_expectations_expect_row_va_9d85974d9ab2f69561fdd4884c5624b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9d85974d9ab2f69561fdd4884c5624b8"}, "created_at": 1667571088.0362, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.fact_swap\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_INTRA.7936884abf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_INTRA"], "unique_id": "test.algorand_models.not_null_core__fact_swap_INTRA.7936884abf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_INTRA.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_INTRA", "alias": "fact_swap_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.039472, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.fact_swap\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_TX_GROUP_ID.e26c69edf1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_core__fact_swap_TX_GROUP_ID.e26c69edf1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_TX_GROUP_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_TX_GROUP_ID", "alias": "fact_swap_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.04055, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.core.fact_swap\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.negative_one_core__fact_swap_DIM_APPLICATION_ID.b8df602cbe": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_swap_DIM_APPLICATION_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_swap_DIM_APPLICATION_ID.b8df602cbe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_swap_DIM_APPLICATION_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "negative_one_core__fact_swap_DIM_APPLICATION_ID", "alias": "fact_swap_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/negative_one_core__fact_swap_DIM_APPLICATION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.0416489, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_APPLICATION_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_APPLICATION_ID", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAPPER.3cacb91aee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAPPER"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAPPER.3cacb91aee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAPPER.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAPPER", "alias": "fact_swap_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.04401, "compiled_sql": "\n    \n    \n\n\n\nselect SWAPPER\nfrom (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58.cb5f3fc19d": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1bcf423cd8162224c565a575243ab70d\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1bcf423cd8162224c565a575243ab70d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58.cb5f3fc19d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_1bcf423cd8162224c565a575243ab70d.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58", "alias": "fact_swap_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_expectations_expect_column_1bcf423cd8162224c565a575243ab70d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1bcf423cd8162224c565a575243ab70d"}, "created_at": 1667571088.044941, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        SWAPPER\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.core.fact_swap\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.b8db857362": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ASSET_ID__SWAP_FROM", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM"], "unique_id": "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.b8db857362", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM", "alias": "fact_swap_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.053355, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ASSET_ID__SWAP_FROM = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID__SWAP_FROM", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_ASSET_ID.d49bb1b100": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_FROM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAP_FROM_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_ASSET_ID.d49bb1b100", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAP_FROM_ASSET_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAP_FROM_ASSET_ID", "alias": "fact_swap_SWAP_FROM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAP_FROM_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.055464, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_FROM_ASSET_ID\nfrom (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere SWAP_FROM_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_FROM_ASSET_ID", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_AMOUNT.16330981ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_FROM_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAP_FROM_AMOUNT"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_AMOUNT.16330981ff", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAP_FROM_AMOUNT.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAP_FROM_AMOUNT", "alias": "fact_swap_SWAP_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAP_FROM_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.056407, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_FROM_AMOUNT\nfrom (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nwhere SWAP_FROM_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_FROM_AMOUNT", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_POOL_ADDRESS.2bf1473a6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_POOL_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_swap_POOL_ADDRESS.2bf1473a6b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_POOL_ADDRESS.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_POOL_ADDRESS", "alias": "fact_swap_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.057327, "compiled_sql": "\n    \n    \n\n\n\nselect POOL_ADDRESS\nfrom ALGORAND_DEV.core.fact_swap\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58.2ee611d6c8": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2352dbf42e6a93b076dcfa44ee07d297\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2352dbf42e6a93b076dcfa44ee07d297", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58.2ee611d6c8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_2352dbf42e6a93b076dcfa44ee07d297.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58", "alias": "fact_swap_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_expectations_expect_column_2352dbf42e6a93b076dcfa44ee07d297.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2352dbf42e6a93b076dcfa44ee07d297"}, "created_at": 1667571088.058274, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        POOL_ADDRESS\n    ) = 58 as expression\n\n\n    from ALGORAND_DEV.core.fact_swap\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.0bee8c4652": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ASSET_ID__SWAP_TO", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO"], "unique_id": "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.0bee8c4652", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO", "alias": "fact_swap_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.0612962, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_swap where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ASSET_ID__SWAP_TO = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID__SWAP_TO", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAP_TO_ASSET_ID.658b1a948d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_TO_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAP_TO_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAP_TO_ASSET_ID.658b1a948d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAP_TO_ASSET_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAP_TO_ASSET_ID", "alias": "fact_swap_SWAP_TO_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAP_TO_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.063176, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_TO_ASSET_ID\nfrom ALGORAND_DEV.core.fact_swap\nwhere SWAP_TO_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_TO_ASSET_ID", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.not_null_core__fact_swap_SWAP_TO_AMOUNT.1ac273aa3e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_TO_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_swap_SWAP_TO_AMOUNT"], "unique_id": "test.algorand_models.not_null_core__fact_swap_SWAP_TO_AMOUNT.1ac273aa3e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_swap_SWAP_TO_AMOUNT.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "not_null_core__fact_swap_SWAP_TO_AMOUNT", "alias": "fact_swap_SWAP_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/not_null_core__fact_swap_SWAP_TO_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.064074, "compiled_sql": "\n    \n    \n\n\n\nselect SWAP_TO_AMOUNT\nfrom ALGORAND_DEV.core.fact_swap\nwhere SWAP_TO_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_TO_AMOUNT", "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.974f8a94cd": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SWAP_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.974f8a94cd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID", "alias": "fact_swap_FACT_SWAP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.064838, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SWAP_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_swap\n    group by FACT_SWAP_ID\n    having count(*) > 1\n        or FACT_SWAP_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_e74346c6fde4f5c33bb62bf8b12f2114\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__SWAPPER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_e74346c6fde4f5c33bb62bf8b12f2114", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_e74346c6fde4f5c33bb62bf8b12f2114.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_swap_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_constraints_foreign_key_co_e74346c6fde4f5c33bb62bf8b12f2114.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_e74346c6fde4f5c33bb62bf8b12f2114"}, "created_at": 1667571088.0667331, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__SWAPPER\n  from ALGORAND_DEV.core.fact_swap\n  where 1=1\n        and DIM_ACCOUNT_ID__SWAPPER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__SWAPPER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c8d496488655fa12ee81a5077b970d40\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_APPLICATION_ID", "pk_table_name": "ref('core__dim_application')", "pk_column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application", "model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c8d496488655fa12ee81a5077b970d40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_c8d496488655fa12ee81a5077b970d40.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_", "alias": "fact_swap_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"], ["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_constraints_foreign_key_co_c8d496488655fa12ee81a5077b970d40.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_c8d496488655fa12ee81a5077b970d40"}, "created_at": 1667571088.069877, "compiled_sql": "\nwith child as (\n  select\n    DIM_APPLICATION_ID\n  from ALGORAND_DEV.core.fact_swap\n  where 1=1\n        and DIM_APPLICATION_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_APPLICATION_ID\n    from ALGORAND_DEV.core.dim_application\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_APPLICATION_ID = child.DIM_APPLICATION_ID\n\n    where parent.DIM_APPLICATION_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_9a68113c6841e2b6d96eb2c7879edd51\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ASSET_ID__SWAP_FROM", "pk_table_name": "ref('core__dim_asset')", "pk_column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_9a68113c6841e2b6d96eb2c7879edd51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_9a68113c6841e2b6d96eb2c7879edd51.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_", "alias": "fact_swap_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"], ["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_constraints_foreign_key_co_9a68113c6841e2b6d96eb2c7879edd51.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_9a68113c6841e2b6d96eb2c7879edd51"}, "created_at": 1667571088.073398, "compiled_sql": "\nwith child as (\n  select\n    DIM_ASSET_ID__SWAP_FROM\n  from ALGORAND_DEV.core.fact_swap\n  where 1=1\n        and DIM_ASSET_ID__SWAP_FROM is not null\n        \n),\n\nparent as (\n    select\n        DIM_ASSET_ID\n    from ALGORAND_DEV.core.dim_asset\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ASSET_ID = child.DIM_ASSET_ID__SWAP_FROM\n\n    where parent.DIM_ASSET_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0af98210277691ee47f22b8bf47e359c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ASSET_ID__SWAP_TO", "pk_table_name": "ref('core__dim_asset')", "pk_column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_swap')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_swap"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0af98210277691ee47f22b8bf47e359c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_0af98210277691ee47f22b8bf47e359c.sql", "original_file_path": "models/core/core__fact_swap.yml", "name": "dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_", "alias": "fact_swap_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"], ["core__fact_swap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_swap.yml/dbt_constraints_foreign_key_co_0af98210277691ee47f22b8bf47e359c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_0af98210277691ee47f22b8bf47e359c"}, "created_at": 1667571088.076628, "compiled_sql": "\nwith child as (\n  select\n    DIM_ASSET_ID__SWAP_TO\n  from ALGORAND_DEV.core.fact_swap\n  where 1=1\n        and DIM_ASSET_ID__SWAP_TO is not null\n        \n),\n\nparent as (\n    select\n        DIM_ASSET_ID\n    from ALGORAND_DEV.core.dim_asset\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ASSET_ID = child.DIM_ASSET_ID__SWAP_TO\n\n    where parent.DIM_ASSET_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_swap"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID", "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82"}, "created_at": 1667571088.082939, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_BLOCK_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_BLOCK_ID.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_ID", "alias": "dim_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.0850618, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_TIMESTAMP", "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.085995, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1", "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b"}, "created_at": 1667571088.086784, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.dim_block\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_DATE", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_BLOCK_DATE"], "unique_id": "test.algorand_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_BLOCK_DATE.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_DATE", "alias": "dim_block_BLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.0903318, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_DATE\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_DATE", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_BLOCK_HOUR"], "unique_id": "test.algorand_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_BLOCK_HOUR.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_HOUR", "alias": "dim_block_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.091518, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HOUR\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_WEEK", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_BLOCK_WEEK"], "unique_id": "test.algorand_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_BLOCK_WEEK.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_WEEK", "alias": "dim_block_BLOCK_WEEK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_WEEK.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.092821, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_WEEK\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_WEEK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_WEEK", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_REWARDS_LEVEL.b3731fc143": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS_LEVEL", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_REWARDS_LEVEL"], "unique_id": "test.algorand_models.not_null_core__dim_block_REWARDS_LEVEL.b3731fc143", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_REWARDS_LEVEL.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_REWARDS_LEVEL", "alias": "dim_block_REWARDS_LEVEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_REWARDS_LEVEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.093964, "compiled_sql": "\n    \n    \n\n\n\nselect REWARDS_LEVEL\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere REWARDS_LEVEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REWARDS_LEVEL", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_NETWORK.1d650e9ff8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_NETWORK"], "unique_id": "test.algorand_models.not_null_core__dim_block_NETWORK.1d650e9ff8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_NETWORK.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_NETWORK", "alias": "dim_block_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.094898, "compiled_sql": "\n    \n    \n\n\n\nselect NETWORK\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_GENESIS_HASH.ea4bdf6004": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GENESIS_HASH", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_GENESIS_HASH"], "unique_id": "test.algorand_models.not_null_core__dim_block_GENESIS_HASH.ea4bdf6004", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_GENESIS_HASH.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_GENESIS_HASH", "alias": "dim_block_GENESIS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_GENESIS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.095816, "compiled_sql": "\n    \n    \n\n\n\nselect GENESIS_HASH\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere GENESIS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GENESIS_HASH", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_PREV_BLOCK_HASH.18da8805b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2') and BLOCK_ID <> 0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2') and BLOCK_ID <> 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_PREV_BLOCK_HASH"], "unique_id": "test.algorand_models.not_null_core__dim_block_PREV_BLOCK_HASH.18da8805b1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_PREV_BLOCK_HASH.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_PREV_BLOCK_HASH", "alias": "dim_block_PREV_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_PREV_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2') and BLOCK_ID <> 0"}, "created_at": 1667571088.096844, "compiled_sql": "\n    \n    \n\n\n\nselect PREV_BLOCK_HASH\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2') and BLOCK_ID <> 0) dbt_subquery\nwhere PREV_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_BLOCK_HASH", "file_key_name": "models.core__dim_block"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT.207627e194": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d6cca7feb2ef887102de950c06ab49df\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TXN_ROOT", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d6cca7feb2ef887102de950c06ab49df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT.207627e194", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_d6cca7feb2ef887102de950c06ab49df.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT", "alias": "dim_block_TXN_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/dbt_expectations_expect_column_d6cca7feb2ef887102de950c06ab49df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d6cca7feb2ef887102de950c06ab49df"}, "created_at": 1667571088.097631, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TXN_ROOT' as \n    varchar\n) as column_name,\n            16 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_ROOT", "file_key_name": "models.core__dim_block"}, "test.algorand_models.not_null_core__dim_block_HEADER.b259d18110": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HEADER", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_block_HEADER"], "unique_id": "test.algorand_models.not_null_core__dim_block_HEADER.b259d18110", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_block_HEADER.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_HEADER", "alias": "dim_block_HEADER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/not_null_core__dim_block_HEADER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.099908, "compiled_sql": "\n    \n    \n\n\n\nselect HEADER\nfrom (select * from ALGORAND_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere HEADER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HEADER", "file_key_name": "models.core__dim_block"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID", "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_block.yml/dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.1007192, "compiled_sql": "with validation_errors as (\n    select\n        DIM_BLOCK_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_block\n    group by DIM_BLOCK_ID\n    having count(*) > 1\n        or DIM_BLOCK_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_block"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID.e4d582f3bb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_838ce072b30ea1d963c5e110f314efef\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_838ce072b30ea1d963c5e110f314efef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID.e4d582f3bb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_838ce072b30ea1d963c5e110f314efef.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID", "alias": "dim_account_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/dbt_expectations_expect_column_838ce072b30ea1d963c5e110f314efef.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_838ce072b30ea1d963c5e110f314efef"}, "created_at": 1667571088.104817, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_ACCOUNT_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_ADDRESS.fe84bdbbfe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__dim_account_ADDRESS.fe84bdbbfe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_ADDRESS.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_ADDRESS", "alias": "dim_account_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.1067939, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.dim_account\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_ACCOUNT_CLOSED.11c85e7078": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_CLOSED", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_ACCOUNT_CLOSED"], "unique_id": "test.algorand_models.not_null_core__dim_account_ACCOUNT_CLOSED.11c85e7078", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_ACCOUNT_CLOSED.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_ACCOUNT_CLOSED", "alias": "dim_account_ACCOUNT_CLOSED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_ACCOUNT_CLOSED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.107559, "compiled_sql": "\n    \n    \n\n\n\nselect ACCOUNT_CLOSED\nfrom ALGORAND_DEV.core.dim_account\nwhere ACCOUNT_CLOSED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_CLOSED", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_BASE.c98ed50245": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_REWARDS_BASE", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_NON_ZERO_REWARDS_BASE"], "unique_id": "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_BASE.c98ed50245", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_NON_ZERO_REWARDS_BASE.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_NON_ZERO_REWARDS_BASE", "alias": "dim_account_NON_ZERO_REWARDS_BASE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_NON_ZERO_REWARDS_BASE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.1089659, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_REWARDS_BASE\nfrom ALGORAND_DEV.core.dim_account\nwhere NON_ZERO_REWARDS_BASE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_REWARDS_BASE", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.baccd253cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_REWARDS_TOTAL", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL"], "unique_id": "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.baccd253cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL", "alias": "dim_account_NON_ZERO_REWARDS_TOTAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.109767, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_REWARDS_TOTAL\nfrom ALGORAND_DEV.core.dim_account\nwhere NON_ZERO_REWARDS_TOTAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_REWARDS_TOTAL", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_NON_ZERO_BALANCE.0e3d02c2d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NON_ZERO_BALANCE", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_NON_ZERO_BALANCE"], "unique_id": "test.algorand_models.not_null_core__dim_account_NON_ZERO_BALANCE.0e3d02c2d7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_NON_ZERO_BALANCE.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_NON_ZERO_BALANCE", "alias": "dim_account_NON_ZERO_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_NON_ZERO_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.110528, "compiled_sql": "\n    \n    \n\n\n\nselect NON_ZERO_BALANCE\nfrom ALGORAND_DEV.core.dim_account\nwhere NON_ZERO_BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NON_ZERO_BALANCE", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.95111c6779": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.95111c6779", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_account_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.111305, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CREATED_AT\nfrom ALGORAND_DEV.core.dim_account\nwhere DIM_BLOCK_ID__CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_account"}, "test.algorand_models.negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.3d2dd75ea1": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ACCOUNT_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ACCOUNT_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.3d2dd75ea1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_account_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ACCOUNT_ID not in ('-1','-2')"}, "created_at": 1667571088.1123729, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.dim_account where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ACCOUNT_ID not in ('-1','-2')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID__CREATED_AT = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.3834bda56e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CLOSED_AT", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.3834bda56e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT", "alias": "dim_account_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.11416, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CLOSED_AT\nfrom ALGORAND_DEV.core.dim_account\nwhere DIM_BLOCK_ID__CLOSED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CLOSED_AT", "file_key_name": "models.core__dim_account"}, "test.algorand_models.not_null_core__dim_account_DIM_WALLET_TYPE_ID.bac483a8d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_WALLET_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_account_DIM_WALLET_TYPE_ID"], "unique_id": "test.algorand_models.not_null_core__dim_account_DIM_WALLET_TYPE_ID.bac483a8d4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_account_DIM_WALLET_TYPE_ID.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "not_null_core__dim_account_DIM_WALLET_TYPE_ID", "alias": "dim_account_DIM_WALLET_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/not_null_core__dim_account_DIM_WALLET_TYPE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.115049, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_WALLET_TYPE_ID\nfrom ALGORAND_DEV.core.dim_account\nwhere DIM_WALLET_TYPE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_WALLET_TYPE_ID", "file_key_name": "models.core__dim_account"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.4fb5a696cc": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.4fb5a696cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID", "alias": "dim_account_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.1158059, "compiled_sql": "with validation_errors as (\n    select\n        DIM_ACCOUNT_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_account\n    group by DIM_ACCOUNT_ID\n    having count(*) > 1\n        or DIM_ACCOUNT_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_account"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_b4d7fb095f006a7550c3b49769cf8fb1\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CREATED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_b4d7fb095f006a7550c3b49769cf8fb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_b4d7fb095f006a7550c3b49769cf8fb1.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_account_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/dbt_constraints_foreign_key_co_b4d7fb095f006a7550c3b49769cf8fb1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_b4d7fb095f006a7550c3b49769cf8fb1"}, "created_at": 1667571088.1176589, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CREATED_AT\n  from ALGORAND_DEV.core.dim_account\n  where 1=1\n        and DIM_BLOCK_ID__CREATED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CREATED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_account"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_9a90d80fe80c5a15d155a5876afdca31\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CLOSED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_9a90d80fe80c5a15d155a5876afdca31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_9a90d80fe80c5a15d155a5876afdca31.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_account_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/dbt_constraints_foreign_key_co_9a90d80fe80c5a15d155a5876afdca31.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_9a90d80fe80c5a15d155a5876afdca31"}, "created_at": 1667571088.120276, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CLOSED_AT\n  from ALGORAND_DEV.core.dim_account\n  where 1=1\n        and DIM_BLOCK_ID__CLOSED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CLOSED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_account"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_9134f48db4e04dc9614ae878dbe8add6\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_WALLET_TYPE_ID", "pk_table_name": "ref('core__dim_wallet_type')", "pk_column_name": "DIM_WALLET_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_account')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_wallet_type", "model.algorand_models.core__dim_account"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_9134f48db4e04dc9614ae878dbe8add6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_9134f48db4e04dc9614ae878dbe8add6.sql", "original_file_path": "models/core/core__dim_account.yml", "name": "dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_", "alias": "dim_account_DIM_WALLET_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_wallet_type"], ["core__dim_account"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_account.yml/dbt_constraints_foreign_key_co_9134f48db4e04dc9614ae878dbe8add6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_9134f48db4e04dc9614ae878dbe8add6"}, "created_at": 1667571088.122881, "compiled_sql": "\nwith child as (\n  select\n    DIM_WALLET_TYPE_ID\n  from ALGORAND_DEV.core.dim_account\n  where 1=1\n        and DIM_WALLET_TYPE_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_WALLET_TYPE_ID\n    from ALGORAND_DEV.core.dim_wallet_type\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_WALLET_TYPE_ID = child.DIM_WALLET_TYPE_ID\n\n    where parent.DIM_WALLET_TYPE_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_account"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.ea4867a007": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77ba1a751d0dbe7929ebefaa2a870720\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSACTION_CLOSE_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77ba1a751d0dbe7929ebefaa2a870720", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.ea4867a007", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_77ba1a751d0dbe7929ebefaa2a870720.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID", "alias": "fact_transaction_close_FACT_TRANSACTION_CLOSE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_expectations_expect_column_77ba1a751d0dbe7929ebefaa2a870720.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_77ba1a751d0dbe7929ebefaa2a870720"}, "created_at": 1667571088.127433, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSACTION_CLOSE_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSACTION_CLOSE_ID", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.negative_one_core__fact_transaction_close_DIM_BLOCK_ID.e6f30ff6cf": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_close_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_close_DIM_BLOCK_ID.e6f30ff6cf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_close_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "negative_one_core__fact_transaction_close_DIM_BLOCK_ID", "alias": "fact_transaction_close_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/negative_one_core__fact_transaction_close_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.1295009, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_close where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.603d62bc2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_close_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.603d62bc2a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "not_null_core__fact_transaction_close_BLOCK_TIMESTAMP", "alias": "fact_transaction_close_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.1314912, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom (select * from ALGORAND_DEV.core.fact_transaction_close where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1.f5816be11a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cf2adb0c796b587e693525eaf1986d87\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cf2adb0c796b587e693525eaf1986d87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1.f5816be11a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_cf2adb0c796b587e693525eaf1986d87.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1", "alias": "fact_transaction_close_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_expectations_expect_row_va_cf2adb0c796b587e693525eaf1986d87.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cf2adb0c796b587e693525eaf1986d87"}, "created_at": 1667571088.1322849, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.fact_transaction_close\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.not_null_core__fact_transaction_close_INTRA.417d3d7f9c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_close_INTRA"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_close_INTRA.417d3d7f9c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_close_INTRA.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "not_null_core__fact_transaction_close_INTRA", "alias": "fact_transaction_close_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/not_null_core__fact_transaction_close_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.134978, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.fact_transaction_close\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.not_null_core__fact_transaction_close_TX_ID.4d13188268": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_close_TX_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_close_TX_ID.4d13188268", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_close_TX_ID.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "not_null_core__fact_transaction_close_TX_ID", "alias": "fact_transaction_close_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/not_null_core__fact_transaction_close_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.135851, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.fact_transaction_close\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.not_null_core__fact_transaction_close_INNER_TX.011a756b37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_close_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_close_INNER_TX.011a756b37", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_close_INNER_TX.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "not_null_core__fact_transaction_close_INNER_TX", "alias": "fact_transaction_close_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/not_null_core__fact_transaction_close_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.136617, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.fact_transaction_close\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.ad91196091": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.ad91196091", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID", "alias": "fact_transaction_close_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.137554, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_close where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.not_null_core__fact_transaction_close_ADDRESS.f082cd3f49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_close_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_close_ADDRESS.f082cd3f49", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_close_ADDRESS.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "not_null_core__fact_transaction_close_ADDRESS", "alias": "fact_transaction_close_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/not_null_core__fact_transaction_close_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.140324, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_transaction_close\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ASSET_ID.33c3ea10cc": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_close_DIM_ASSET_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ASSET_ID.33c3ea10cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_close_DIM_ASSET_ID.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "negative_one_core__fact_transaction_close_DIM_ASSET_ID", "alias": "fact_transaction_close_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/negative_one_core__fact_transaction_close_DIM_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.141294, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_close where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ASSET_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID", "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.a0bf2e76cb": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_88ca941487073fadb8cff1c1ae56d60a\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSACTION_CLOSE_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_88ca941487073fadb8cff1c1ae56d60a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.a0bf2e76cb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_88ca941487073fadb8cff1c1ae56d60a.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID", "alias": "fact_transaction_close_FACT_TRANSACTION_CLOSE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_constraints_primary_key_co_88ca941487073fadb8cff1c1ae56d60a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_88ca941487073fadb8cff1c1ae56d60a"}, "created_at": 1667571088.143602, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSACTION_CLOSE_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_transaction_close\n    group by FACT_TRANSACTION_CLOSE_ID\n    having count(*) > 1\n        or FACT_TRANSACTION_CLOSE_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_cf4bdeab6be799a74aabbdc2f43cfe0f\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_cf4bdeab6be799a74aabbdc2f43cfe0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_cf4bdeab6be799a74aabbdc2f43cfe0f.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transaction_close_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_constraints_foreign_key_co_cf4bdeab6be799a74aabbdc2f43cfe0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_cf4bdeab6be799a74aabbdc2f43cfe0f"}, "created_at": 1667571088.14559, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.core.fact_transaction_close\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0bf67a439072f03cab150959775208c0\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0bf67a439072f03cab150959775208c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_0bf67a439072f03cab150959775208c0.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_close_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_constraints_foreign_key_co_0bf67a439072f03cab150959775208c0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_0bf67a439072f03cab150959775208c0"}, "created_at": 1667571088.14854, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_transaction_close\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_f7ddd4e597505d36c48320a4adcea0f6\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ASSET_ID", "pk_table_name": "ref('core__dim_asset')", "pk_column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_close')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction_close"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_f7ddd4e597505d36c48320a4adcea0f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_f7ddd4e597505d36c48320a4adcea0f6.sql", "original_file_path": "models/core/core__fact_transaction_close.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_", "alias": "fact_transaction_close_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"], ["core__fact_transaction_close"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_close.yml/dbt_constraints_foreign_key_co_f7ddd4e597505d36c48320a4adcea0f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_f7ddd4e597505d36c48320a4adcea0f6"}, "created_at": 1667571088.151743, "compiled_sql": "\nwith child as (\n  select\n    DIM_ASSET_ID\n  from ALGORAND_DEV.core.fact_transaction_close\n  where 1=1\n        and DIM_ASSET_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ASSET_ID\n    from ALGORAND_DEV.core.dim_asset\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ASSET_ID = child.DIM_ASSET_ID\n\n    where parent.DIM_ASSET_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_close"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID.7e8d572c2e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b30d2296e184329240f8e675bfa93044\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_WALLET_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_wallet_type')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_wallet_type"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b30d2296e184329240f8e675bfa93044", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID.7e8d572c2e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_b30d2296e184329240f8e675bfa93044.sql", "original_file_path": "models/core/core__dim_wallet_type.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID", "alias": "dim_wallet_type_DIM_WALLET_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_wallet_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_wallet_type.yml/dbt_expectations_expect_column_b30d2296e184329240f8e675bfa93044.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b30d2296e184329240f8e675bfa93044"}, "created_at": 1667571088.1556952, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_WALLET_TYPE_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_WALLET_TYPE_ID", "file_key_name": "models.core__dim_wallet_type"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID.87af0124fb": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_6906a1b9b4f8cb48a31e36c728c432d7\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_WALLET_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_wallet_type')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_wallet_type"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_6906a1b9b4f8cb48a31e36c728c432d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID.87af0124fb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_6906a1b9b4f8cb48a31e36c728c432d7.sql", "original_file_path": "models/core/core__dim_wallet_type.yml", "name": "dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID", "alias": "dim_wallet_type_DIM_WALLET_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_wallet_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_wallet_type.yml/dbt_constraints_primary_key_co_6906a1b9b4f8cb48a31e36c728c432d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_6906a1b9b4f8cb48a31e36c728c432d7"}, "created_at": 1667571088.157745, "compiled_sql": "with validation_errors as (\n    select\n        DIM_WALLET_TYPE_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_wallet_type\n    group by DIM_WALLET_TYPE_ID\n    having count(*) > 1\n        or DIM_WALLET_TYPE_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_wallet_type"}, "test.algorand_models.not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.1d12b5dccd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_transactio_8a1a16977e7aa1d5b7b8e781e9f68e0f\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_TRANSACTION_PARTICIPATION_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "not_null_core__fact_transactio_8a1a16977e7aa1d5b7b8e781e9f68e0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.1d12b5dccd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transactio_8a1a16977e7aa1d5b7b8e781e9f68e0f.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID", "alias": "fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/not_null_core__fact_transactio_8a1a16977e7aa1d5b7b8e781e9f68e0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_core__fact_transactio_8a1a16977e7aa1d5b7b8e781e9f68e0f"}, "created_at": 1667571088.16187, "compiled_sql": "\n    \n    \n\n\n\nselect FACT_TRANSACTION_PARTICIPATION_ID\nfrom ALGORAND_DEV.core.fact_transaction_participation\nwhere FACT_TRANSACTION_PARTICIPATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSACTION_PARTICIPATION_ID", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP.f4d8ce0744": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b5b3d0b1472c33899d8eb7c4078cdeda\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b5b3d0b1472c33899d8eb7c4078cdeda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP.f4d8ce0744", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_b5b3d0b1472c33899d8eb7c4078cdeda.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP", "alias": "fact_transaction_participation_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/dbt_expectations_expect_column_b5b3d0b1472c33899d8eb7c4078cdeda.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b5b3d0b1472c33899d8eb7c4078cdeda"}, "created_at": 1667571088.162712, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1.65011d7464": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3956a64021a291a9959c7318af60e006\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3956a64021a291a9959c7318af60e006", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1.65011d7464", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_3956a64021a291a9959c7318af60e006.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1", "alias": "fact_transaction_participation_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/dbt_expectations_expect_row_va_3956a64021a291a9959c7318af60e006.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3956a64021a291a9959c7318af60e006"}, "created_at": 1667571088.164685, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.fact_transaction_participation\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.not_null_core__fact_transaction_participation_BLOCK_ID.e7248a39cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_participation_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_participation_BLOCK_ID.e7248a39cb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_participation_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "not_null_core__fact_transaction_participation_BLOCK_ID", "alias": "fact_transaction_participation_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/not_null_core__fact_transaction_participation_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.167291, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.fact_transaction_participation\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.d4efa93762": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_participation_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.d4efa93762", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "negative_one_core__fact_transaction_participation_DIM_BLOCK_ID", "alias": "fact_transaction_participation_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.168352, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_participation where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.not_null_core__fact_transaction_participation_INTRA.2862c2e571": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_participation_INTRA"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_participation_INTRA.2862c2e571", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_participation_INTRA.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "not_null_core__fact_transaction_participation_INTRA", "alias": "fact_transaction_participation_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/not_null_core__fact_transaction_participation_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.1700852, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.fact_transaction_participation\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.not_null_core__fact_transaction_participation_ADDRESS.c36ccaa6a5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_participation_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_participation_ADDRESS.c36ccaa6a5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_participation_ADDRESS.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "not_null_core__fact_transaction_participation_ADDRESS", "alias": "fact_transaction_participation_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/not_null_core__fact_transaction_participation_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.170976, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_transaction_participation\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.ed8c3d095e": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_4942b0ee93c9de7590f1aa87e6eee2b8\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSACTION_PARTICIPATION_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_4942b0ee93c9de7590f1aa87e6eee2b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.ed8c3d095e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_4942b0ee93c9de7590f1aa87e6eee2b8.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID", "alias": "fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/dbt_constraints_primary_key_co_4942b0ee93c9de7590f1aa87e6eee2b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_4942b0ee93c9de7590f1aa87e6eee2b8"}, "created_at": 1667571088.1717398, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSACTION_PARTICIPATION_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_transaction_participation\n    group by FACT_TRANSACTION_PARTICIPATION_ID\n    having count(*) > 1\n        or FACT_TRANSACTION_PARTICIPATION_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_418694ebf0bdfaaf700ee4ee9a570de3\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_418694ebf0bdfaaf700ee4ee9a570de3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_418694ebf0bdfaaf700ee4ee9a570de3.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transaction_participation_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/dbt_constraints_foreign_key_co_418694ebf0bdfaaf700ee4ee9a570de3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_418694ebf0bdfaaf700ee4ee9a570de3"}, "created_at": 1667571088.1737769, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.core.fact_transaction_participation\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_a92207581ecbd15b785f4c43fa54b7e0\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_participation')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_participation"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_a92207581ecbd15b785f4c43fa54b7e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_a92207581ecbd15b785f4c43fa54b7e0.sql", "original_file_path": "models/core/core__fact_transaction_participation.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_participation_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction_participation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_participation.yml/dbt_constraints_foreign_key_co_a92207581ecbd15b785f4c43fa54b7e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_a92207581ecbd15b785f4c43fa54b7e0"}, "created_at": 1667571088.1767418, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_transaction_participation\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_participation"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID.a6df61746c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d9b650d274de0866eec587a4ecfe44c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d9b650d274de0866eec587a4ecfe44c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID.a6df61746c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_8d9b650d274de0866eec587a4ecfe44c.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID", "alias": "dim_asset_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_expectations_expect_column_8d9b650d274de0866eec587a4ecfe44c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d9b650d274de0866eec587a4ecfe44c"}, "created_at": 1667571088.183606, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_ASSET_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_ASSET_ID.1b85e00ff9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_ASSET_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_ASSET_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_ASSET_ID"], "unique_id": "test.algorand_models.not_null_core__dim_asset_ASSET_ID.1b85e00ff9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_ASSET_ID.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_ASSET_ID", "alias": "dim_asset_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_ASSET_ID not in ('-1','-2')"}, "created_at": 1667571088.1859488, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_ID\nfrom (select * from ALGORAND_DEV.core.dim_asset where DIM_ASSET_ID not in ('-1','-2')) dbt_subquery\nwhere ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_ID", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY.1d083e31fe": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5636d3dca5e4f2c5cd70678f682af92d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5636d3dca5e4f2c5cd70678f682af92d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY.1d083e31fe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_5636d3dca5e4f2c5cd70678f682af92d.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY", "alias": "dim_asset_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_expectations_expect_column_5636d3dca5e4f2c5cd70678f682af92d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5636d3dca5e4f2c5cd70678f682af92d"}, "created_at": 1667571088.186752, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL.878e90161e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_09d439552fb190013714844fa92c4dc4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ASSET_URL", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_09d439552fb190013714844fa92c4dc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL.878e90161e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_09d439552fb190013714844fa92c4dc4.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL", "alias": "dim_asset_ASSET_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_expectations_expect_column_09d439552fb190013714844fa92c4dc4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_09d439552fb190013714844fa92c4dc4"}, "created_at": 1667571088.1887512, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ASSET_URL' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_URL", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS.b55eaa38a3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_452d230f36077f00edd2faa53256df66\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_452d230f36077f00edd2faa53256df66", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS.b55eaa38a3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_452d230f36077f00edd2faa53256df66.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS", "alias": "dim_asset_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_expectations_expect_column_452d230f36077f00edd2faa53256df66.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_452d230f36077f00edd2faa53256df66"}, "created_at": 1667571088.190612, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DECIMALS' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_ASSET_DELETED.64e32068ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_ASSET_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_DELETED", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_ASSET_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_ASSET_DELETED"], "unique_id": "test.algorand_models.not_null_core__dim_asset_ASSET_DELETED.64e32068ca", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_ASSET_DELETED.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_ASSET_DELETED", "alias": "dim_asset_ASSET_DELETED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_ASSET_DELETED.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_ASSET_ID not in ('-1','-2')"}, "created_at": 1667571088.1930208, "compiled_sql": "\n    \n    \n\n\n\nselect ASSET_DELETED\nfrom (select * from ALGORAND_DEV.core.dim_asset where DIM_ASSET_ID not in ('-1','-2')) dbt_subquery\nwhere ASSET_DELETED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ASSET_DELETED", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.9516f008fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ACCOUNT_ID__CREATOR", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR"], "unique_id": "test.algorand_models.not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.9516f008fe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR", "alias": "dim_asset_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.193851, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ACCOUNT_ID__CREATOR\nfrom ALGORAND_DEV.core.dim_asset\nwhere DIM_ACCOUNT_ID__CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__CREATOR", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.f539a615ab": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__CREATOR", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR"], "unique_id": "test.algorand_models.negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.f539a615ab", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR", "alias": "dim_asset_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')"}, "created_at": 1667571088.195321, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.dim_asset where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__CREATOR = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__CREATOR", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_CREATOR_ADDRESS.4427e160a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_ASSET_ID not in ('-1','-2') and DIM_ACCOUNT_ID__CREATOR <> '-2'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_ASSET_ID not in ('-1','-2') and DIM_ACCOUNT_ID__CREATOR <> '-2'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_CREATOR_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__dim_asset_CREATOR_ADDRESS.4427e160a9", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_CREATOR_ADDRESS.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_CREATOR_ADDRESS", "alias": "dim_asset_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_ASSET_ID not in ('-1','-2') and DIM_ACCOUNT_ID__CREATOR <> '-2'"}, "created_at": 1667571088.197598, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR_ADDRESS\nfrom (select * from ALGORAND_DEV.core.dim_asset where DIM_ASSET_ID not in ('-1','-2') and DIM_ACCOUNT_ID__CREATOR <> '-2') dbt_subquery\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.5b8c5924f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.5b8c5924f0", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.198557, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CREATED_AT\nfrom ALGORAND_DEV.core.dim_asset\nwhere DIM_BLOCK_ID__CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.a12b4bde0e": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.a12b4bde0e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')"}, "created_at": 1667571088.199521, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.dim_asset where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_ASSET_ID not in ('-1','-2')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID__CREATED_AT = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.d664058a76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CLOSED_AT", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.d664058a76", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT", "alias": "dim_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.2014332, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CLOSED_AT\nfrom ALGORAND_DEV.core.dim_asset\nwhere DIM_BLOCK_ID__CLOSED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CLOSED_AT", "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.3b9b10292a": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.3b9b10292a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID", "alias": "dim_asset_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.20256, "compiled_sql": "with validation_errors as (\n    select\n        DIM_ASSET_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_asset\n    group by DIM_ASSET_ID\n    having count(*) > 1\n        or DIM_ASSET_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_d7ff188524c9b67d7bcbfc2ef0654f93\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__CREATOR", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_d7ff188524c9b67d7bcbfc2ef0654f93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_d7ff188524c9b67d7bcbfc2ef0654f93.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "dim_asset_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_constraints_foreign_key_co_d7ff188524c9b67d7bcbfc2ef0654f93.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_d7ff188524c9b67d7bcbfc2ef0654f93"}, "created_at": 1667571088.20511, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__CREATOR\n  from ALGORAND_DEV.core.dim_asset\n  where 1=1\n        and DIM_ACCOUNT_ID__CREATOR is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__CREATOR\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_4ec7071d5b9142a14f3e850d8a0cb8ef\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CREATED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_4ec7071d5b9142a14f3e850d8a0cb8ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_4ec7071d5b9142a14f3e850d8a0cb8ef.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_constraints_foreign_key_co_4ec7071d5b9142a14f3e850d8a0cb8ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_4ec7071d5b9142a14f3e850d8a0cb8ef"}, "created_at": 1667571088.208229, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CREATED_AT\n  from ALGORAND_DEV.core.dim_asset\n  where 1=1\n        and DIM_BLOCK_ID__CREATED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CREATED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_7045a66bae4d0d270a1b5e2dec10c4a7\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CLOSED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_asset')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_asset"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_7045a66bae4d0d270a1b5e2dec10c4a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_7045a66bae4d0d270a1b5e2dec10c4a7.sql", "original_file_path": "models/core/core__dim_asset.yml", "name": "dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_asset_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_asset"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_asset.yml/dbt_constraints_foreign_key_co_7045a66bae4d0d270a1b5e2dec10c4a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_7045a66bae4d0d270a1b5e2dec10c4a7"}, "created_at": 1667571088.211373, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CLOSED_AT\n  from ALGORAND_DEV.core.dim_asset\n  where 1=1\n        and DIM_BLOCK_ID__CLOSED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CLOSED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_asset"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID.ea4f7647a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ac3a9d8839520172a5ff5c2ae917581\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ac3a9d8839520172a5ff5c2ae917581", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID.ea4f7647a5", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_6ac3a9d8839520172a5ff5c2ae917581.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID", "alias": "fact_transaction_FACT_TRANSACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_expectations_expect_column_6ac3a9d8839520172a5ff5c2ae917581.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ac3a9d8839520172a5ff5c2ae917581"}, "created_at": 1667571088.218931, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSACTION_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSACTION_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_BLOCK_ID.2f8f97ffb1": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_BLOCK_ID.2f8f97ffb1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_BLOCK_ID", "alias": "fact_transaction_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transaction_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.220886, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_BLOCK_ID.0b34bf4323": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_BLOCK_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_BLOCK_ID.0b34bf4323", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_BLOCK_ID", "alias": "fact_transaction_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.223232, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom ALGORAND_DEV.core.fact_transaction\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_BLOCK_TIMESTAMP.3cadcd6f8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_BLOCK_TIMESTAMP.3cadcd6f8f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_BLOCK_TIMESTAMP", "alias": "fact_transaction_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.224292, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom (select * from ALGORAND_DEV.core.fact_transaction where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1.2acf53ad08": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c73a6c08fa0c14333efd4195f185e18c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c73a6c08fa0c14333efd4195f185e18c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1.2acf53ad08", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_c73a6c08fa0c14333efd4195f185e18c.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1", "alias": "fact_transaction_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_expectations_expect_row_va_c73a6c08fa0c14333efd4195f185e18c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c73a6c08fa0c14333efd4195f185e18c"}, "created_at": 1667571088.225261, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.core.fact_transaction\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_INTRA.f4226e7bbd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_INTRA"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_INTRA.f4226e7bbd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_INTRA.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_INTRA", "alias": "fact_transaction_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.228129, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.fact_transaction\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_TX_ID.00dac6ae6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_TX_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_TX_ID.00dac6ae6c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_TX_ID.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_TX_ID", "alias": "fact_transaction_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.228917, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.fact_transaction\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_INNER_TX.55f4626d23": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INNER_TX", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_INNER_TX"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_INNER_TX.55f4626d23", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_INNER_TX.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_INNER_TX", "alias": "fact_transaction_INNER_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_INNER_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.229692, "compiled_sql": "\n    \n    \n\n\n\nselect INNER_TX\nfrom ALGORAND_DEV.core.fact_transaction\nwhere INNER_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_TX", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.2662d0b220": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__TX_SENDER", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.2662d0b220", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.230836, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__TX_SENDER = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__TX_SENDER", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.not_null_core__fact_transaction_TX_SENDER.1325477ced": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_TX_SENDER"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_TX_SENDER.1325477ced", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_TX_SENDER.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "not_null_core__fact_transaction_TX_SENDER", "alias": "fact_transaction_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/not_null_core__fact_transaction_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.232828, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SENDER\nfrom ALGORAND_DEV.core.fact_transaction\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SENDER", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_ASSET_ID.07c0df61ff": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_ASSET_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_ASSET_ID.07c0df61ff", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_DIM_ASSET_ID.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_ASSET_ID", "alias": "fact_transaction_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transaction_DIM_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.234051, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ASSET_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.c1db58e3cc": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_TRANSACTION_TYPE_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.c1db58e3cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID", "alias": "fact_transaction_DIM_TRANSACTION_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.236185, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_TRANSACTION_TYPE_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_TRANSACTION_TYPE_ID", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.fd96045039": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.fd96045039", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.238307, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__RECEIVER = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__RECEIVER", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER.c83e3e902e": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_transa_10dc3527c5c72705d01d010aa54712af\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__ASSET_SENDER", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_transa_10dc3527c5c72705d01d010aa54712af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER.c83e3e902e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transa_10dc3527c5c72705d01d010aa54712af.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transa_10dc3527c5c72705d01d010aa54712af.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_transa_10dc3527c5c72705d01d010aa54712af"}, "created_at": 1667571088.240343, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__ASSET_SENDER = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__ASSET_SENDER", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER.ecab52c07e": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_transa_db752e5e235ad7da21c20f01980c48d1\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__ASSET_RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_transa_db752e5e235ad7da21c20f01980c48d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER.ecab52c07e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transa_db752e5e235ad7da21c20f01980c48d1.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/negative_one_core__fact_transa_db752e5e235ad7da21c20f01980c48d1.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_transa_db752e5e235ad7da21c20f01980c48d1"}, "created_at": 1667571088.242291, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__ASSET_RECEIVER = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__ASSET_RECEIVER", "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID.b51ad78f87": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_1ddf223b24c7ca5ffa00529845a3734f\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_1ddf223b24c7ca5ffa00529845a3734f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID.b51ad78f87", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_1ddf223b24c7ca5ffa00529845a3734f.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID", "alias": "fact_transaction_FACT_TRANSACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_primary_key_co_1ddf223b24c7ca5ffa00529845a3734f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_1ddf223b24c7ca5ffa00529845a3734f"}, "created_at": 1667571088.244308, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSACTION_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_transaction\n    group by FACT_TRANSACTION_ID\n    having count(*) > 1\n        or FACT_TRANSACTION_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_4e621fe33809569ce4493254501bf999\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_4e621fe33809569ce4493254501bf999", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_4e621fe33809569ce4493254501bf999.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transaction_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_4e621fe33809569ce4493254501bf999.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_4e621fe33809569ce4493254501bf999"}, "created_at": 1667571088.246597, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_8c4f6e0bf1853647ba2531bb09e4088c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_TRANSACTION_TYPE_ID", "pk_table_name": "ref('core__dim_transaction_type')", "pk_column_name": "DIM_TRANSACTION_TYPE_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_transaction_type", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_8c4f6e0bf1853647ba2531bb09e4088c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_8c4f6e0bf1853647ba2531bb09e4088c.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_", "alias": "fact_transaction_DIM_TRANSACTION_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_transaction_type"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_8c4f6e0bf1853647ba2531bb09e4088c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_8c4f6e0bf1853647ba2531bb09e4088c"}, "created_at": 1667571088.249522, "compiled_sql": "\nwith child as (\n  select\n    DIM_TRANSACTION_TYPE_ID\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_TRANSACTION_TYPE_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_TRANSACTION_TYPE_ID\n    from ALGORAND_DEV.core.dim_transaction_type\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_TRANSACTION_TYPE_ID = child.DIM_TRANSACTION_TYPE_ID\n\n    where parent.DIM_TRANSACTION_TYPE_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0235c9f9781682ca85d812059e63db94\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__TX_SENDER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0235c9f9781682ca85d812059e63db94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_0235c9f9781682ca85d812059e63db94.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_0235c9f9781682ca85d812059e63db94.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_0235c9f9781682ca85d812059e63db94"}, "created_at": 1667571088.252112, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__TX_SENDER\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_ACCOUNT_ID__TX_SENDER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__TX_SENDER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_d5a3a27fe31e4fde8d292aedf7bbfe0e\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__RECEIVER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_d5a3a27fe31e4fde8d292aedf7bbfe0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_d5a3a27fe31e4fde8d292aedf7bbfe0e.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_d5a3a27fe31e4fde8d292aedf7bbfe0e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_d5a3a27fe31e4fde8d292aedf7bbfe0e"}, "created_at": 1667571088.2549682, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__RECEIVER\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_ACCOUNT_ID__RECEIVER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__RECEIVER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_8c3588ef43dc40cee025e845a4d5507d\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__ASSET_SENDER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_8c3588ef43dc40cee025e845a4d5507d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_8c3588ef43dc40cee025e845a4d5507d.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_8c3588ef43dc40cee025e845a4d5507d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_8c3588ef43dc40cee025e845a4d5507d"}, "created_at": 1667571088.258168, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__ASSET_SENDER\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_ACCOUNT_ID__ASSET_SENDER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__ASSET_SENDER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_56407e7341a9992b29967959e7b8e675\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__ASSET_RECEIVER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_56407e7341a9992b29967959e7b8e675", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_56407e7341a9992b29967959e7b8e675.sql", "original_file_path": "models/core/core__fact_transaction.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction.yml/dbt_constraints_foreign_key_co_56407e7341a9992b29967959e7b8e675.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_56407e7341a9992b29967959e7b8e675"}, "created_at": 1667571088.26101, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__ASSET_RECEIVER\n  from ALGORAND_DEV.core.fact_transaction\n  where 1=1\n        and DIM_ACCOUNT_ID__ASSET_RECEIVER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__ASSET_RECEIVER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID.e99cec695c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b742755a014ae135e633aa3c4a003e84\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b742755a014ae135e633aa3c4a003e84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID.e99cec695c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_b742755a014ae135e633aa3c4a003e84.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID", "alias": "dim_application_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_expectations_expect_column_b742755a014ae135e633aa3c4a003e84.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b742755a014ae135e633aa3c4a003e84"}, "created_at": 1667571088.265755, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_APPLICATION_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_APPLICATION_ID", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_APP_ID.9fd6bedaba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_APP_ID"], "unique_id": "test.algorand_models.not_null_core__dim_application_APP_ID.9fd6bedaba", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_APP_ID.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_APP_ID", "alias": "dim_application_APP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_APP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.2677429, "compiled_sql": "\n    \n    \n\n\n\nselect APP_ID\nfrom (select * from ALGORAND_DEV.core.dim_application where DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nwhere APP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_ID", "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS.371f4326c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6830a4c1aef1623e386aaa52f10d58af\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PARAMS", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6830a4c1aef1623e386aaa52f10d58af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS.371f4326c3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_6830a4c1aef1623e386aaa52f10d58af.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS", "alias": "dim_application_PARAMS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_expectations_expect_column_6830a4c1aef1623e386aaa52f10d58af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6830a4c1aef1623e386aaa52f10d58af"}, "created_at": 1667571088.268678, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PARAMS' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PARAMS", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_APP_CLOSED.12260b32bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "APP_CLOSED", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_APP_CLOSED"], "unique_id": "test.algorand_models.not_null_core__dim_application_APP_CLOSED.12260b32bd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_APP_CLOSED.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_APP_CLOSED", "alias": "dim_application_APP_CLOSED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_APP_CLOSED.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.270677, "compiled_sql": "\n    \n    \n\n\n\nselect APP_CLOSED\nfrom (select * from ALGORAND_DEV.core.dim_application where DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nwhere APP_CLOSED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "APP_CLOSED", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.016d487909": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ACCOUNT_ID__CREATOR", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR"], "unique_id": "test.algorand_models.not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.016d487909", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR", "alias": "dim_application_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.271796, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ACCOUNT_ID__CREATOR\nfrom ALGORAND_DEV.core.dim_application\nwhere DIM_ACCOUNT_ID__CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__CREATOR", "file_key_name": "models.core__dim_application"}, "test.algorand_models.negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.7b5db3ddfe": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '28 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__CREATOR", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '28 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR"], "unique_id": "test.algorand_models.negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.7b5db3ddfe", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR", "alias": "dim_application_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '28 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.273109, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.dim_application where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '28 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__CREATOR = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__CREATOR", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_CREATOR_ADDRESS.5fee087722": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_CREATOR_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__dim_application_CREATOR_ADDRESS.5fee087722", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_CREATOR_ADDRESS.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_CREATOR_ADDRESS", "alias": "dim_application_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.275367, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR_ADDRESS\nfrom (select * from ALGORAND_DEV.core.dim_application where DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.3aeb069ac2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.3aeb069ac2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.2761788, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CREATED_AT\nfrom ALGORAND_DEV.core.dim_application\nwhere DIM_BLOCK_ID__CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_application"}, "test.algorand_models.negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.c26d6cde09": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.c26d6cde09", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT", "alias": "dim_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.2771368, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.dim_application where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') and DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID__CREATED_AT = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_CREATED_AT.075e7184cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_APPLICATION_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_APPLICATION_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_application_CREATED_AT.075e7184cc", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_CREATED_AT.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_CREATED_AT", "alias": "dim_application_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_APPLICATION_ID not in ('-1','-2')"}, "created_at": 1667571088.2792, "compiled_sql": "\n    \n    \n\n\n\nselect CREATED_AT\nfrom (select * from ALGORAND_DEV.core.dim_application where DIM_APPLICATION_ID not in ('-1','-2')) dbt_subquery\nwhere CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT", "file_key_name": "models.core__dim_application"}, "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.ef42eaadd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CLOSED_AT", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT"], "unique_id": "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.ef42eaadd3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT", "alias": "dim_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.279986, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CLOSED_AT\nfrom ALGORAND_DEV.core.dim_application\nwhere DIM_BLOCK_ID__CLOSED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CLOSED_AT", "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT.359a7deabb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61d04441f9db3561364f970790041e35\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CLOSED_AT", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61d04441f9db3561364f970790041e35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT.359a7deabb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_61d04441f9db3561364f970790041e35.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT", "alias": "dim_application_CLOSED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_expectations_expect_column_61d04441f9db3561364f970790041e35.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_61d04441f9db3561364f970790041e35"}, "created_at": 1667571088.2808058, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CLOSED_AT' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSED_AT", "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID.14b99b2559": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_0caab0b823af53d947496940f9b0a194\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_APPLICATION_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_0caab0b823af53d947496940f9b0a194", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID.14b99b2559", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_0caab0b823af53d947496940f9b0a194.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID", "alias": "dim_application_DIM_APPLICATION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_constraints_primary_key_co_0caab0b823af53d947496940f9b0a194.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_0caab0b823af53d947496940f9b0a194"}, "created_at": 1667571088.2827442, "compiled_sql": "with validation_errors as (\n    select\n        DIM_APPLICATION_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_application\n    group by DIM_APPLICATION_ID\n    having count(*) > 1\n        or DIM_APPLICATION_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_03e9607e69a09877965a200db8b62f96\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__CREATOR", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_03e9607e69a09877965a200db8b62f96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_03e9607e69a09877965a200db8b62f96.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "dim_application_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_constraints_foreign_key_co_03e9607e69a09877965a200db8b62f96.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_03e9607e69a09877965a200db8b62f96"}, "created_at": 1667571088.285177, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__CREATOR\n  from ALGORAND_DEV.core.dim_application\n  where 1=1\n        and DIM_ACCOUNT_ID__CREATOR is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__CREATOR\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_fd0dd1f983fc750aabc8065f02f6f944\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CREATED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_fd0dd1f983fc750aabc8065f02f6f944", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_fd0dd1f983fc750aabc8065f02f6f944.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_constraints_foreign_key_co_fd0dd1f983fc750aabc8065f02f6f944.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_fd0dd1f983fc750aabc8065f02f6f944"}, "created_at": 1667571088.288102, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CREATED_AT\n  from ALGORAND_DEV.core.dim_application\n  where 1=1\n        and DIM_BLOCK_ID__CREATED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CREATED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_7e2ee497b68ff4a80a160d5daedfa82c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CLOSED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_application')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_application"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_7e2ee497b68ff4a80a160d5daedfa82c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_7e2ee497b68ff4a80a160d5daedfa82c.sql", "original_file_path": "models/core/core__dim_application.yml", "name": "dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "dim_application_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__dim_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_application.yml/dbt_constraints_foreign_key_co_7e2ee497b68ff4a80a160d5daedfa82c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_7e2ee497b68ff4a80a160d5daedfa82c"}, "created_at": 1667571088.290795, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CLOSED_AT\n  from ALGORAND_DEV.core.dim_application\n  where 1=1\n        and DIM_BLOCK_ID__CLOSED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CLOSED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_application"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.38d3e554ce": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d42cedb59896a1056dace781c3beb82\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_TRANSACTION_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_transaction_type')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_transaction_type"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d42cedb59896a1056dace781c3beb82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.38d3e554ce", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_9d42cedb59896a1056dace781c3beb82.sql", "original_file_path": "models/core/core__dim_transaction_type.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID", "alias": "dim_transaction_type_DIM_TRANSACTION_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_transaction_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_transaction_type.yml/dbt_expectations_expect_column_9d42cedb59896a1056dace781c3beb82.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9d42cedb59896a1056dace781c3beb82"}, "created_at": 1667571088.2941592, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_TRANSACTION_TYPE_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_TRANSACTION_TYPE_ID", "file_key_name": "models.core__dim_transaction_type"}, "test.algorand_models.dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.a3a8ac0e76": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_73ef282a22b3ed696d0497c3c0754f86\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_TRANSACTION_TYPE_ID", "model": "{{ get_where_subquery(ref('core__dim_transaction_type')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_transaction_type"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_73ef282a22b3ed696d0497c3c0754f86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.a3a8ac0e76", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_73ef282a22b3ed696d0497c3c0754f86.sql", "original_file_path": "models/core/core__dim_transaction_type.yml", "name": "dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID", "alias": "dim_transaction_type_DIM_TRANSACTION_TYPE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_transaction_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__dim_transaction_type.yml/dbt_constraints_primary_key_co_73ef282a22b3ed696d0497c3c0754f86.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_73ef282a22b3ed696d0497c3c0754f86"}, "created_at": 1667571088.2965708, "compiled_sql": "with validation_errors as (\n    select\n        DIM_TRANSACTION_TYPE_ID, count(*) as row_count\n    from ALGORAND_DEV.core.dim_transaction_type\n    group by DIM_TRANSACTION_TYPE_ID\n    having count(*) > 1\n        or DIM_TRANSACTION_TYPE_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_transaction_type"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.3c93967a7c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea7a8a95f03d4d30cf3cd98268e44524\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSACTION_REWARD_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea7a8a95f03d4d30cf3cd98268e44524", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.3c93967a7c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_ea7a8a95f03d4d30cf3cd98268e44524.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID", "alias": "fact_transaction_reward_FACT_TRANSACTION_REWARD_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/dbt_expectations_expect_column_ea7a8a95f03d4d30cf3cd98268e44524.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ea7a8a95f03d4d30cf3cd98268e44524"}, "created_at": 1667571088.3005419, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSACTION_REWARD_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSACTION_REWARD_ID", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.4f76186f2c": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_reward_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.4f76186f2c", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "negative_one_core__fact_transaction_reward_DIM_BLOCK_ID", "alias": "fact_transaction_reward_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.302681, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_reward where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.12512b0d24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.12512b0d24", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP", "alias": "fact_transaction_reward_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1667571088.304789, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom (select * from ALGORAND_DEV.core.fact_transaction_reward where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.not_null_core__fact_transaction_reward_INTRA.677f4b2caa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTRA", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_reward_INTRA"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_reward_INTRA.677f4b2caa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_reward_INTRA.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "not_null_core__fact_transaction_reward_INTRA", "alias": "fact_transaction_reward_INTRA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/not_null_core__fact_transaction_reward_INTRA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.3055959, "compiled_sql": "\n    \n    \n\n\n\nselect INTRA\nfrom ALGORAND_DEV.core.fact_transaction_reward\nwhere INTRA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INTRA", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.not_null_core__fact_transaction_reward_TX_ID.2e0b99871d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_reward_TX_ID"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_reward_TX_ID.2e0b99871d", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_reward_TX_ID.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "not_null_core__fact_transaction_reward_TX_ID", "alias": "fact_transaction_reward_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/not_null_core__fact_transaction_reward_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.306493, "compiled_sql": "\n    \n    \n\n\n\nselect TX_ID\nfrom ALGORAND_DEV.core.fact_transaction_reward\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.df64eb3789": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.df64eb3789", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID", "alias": "fact_transaction_reward_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.30741, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.core.fact_transaction_reward where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.not_null_core__fact_transaction_reward_ADDRESS.5ea787acf8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_transaction_reward_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_transaction_reward_ADDRESS.5ea787acf8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_transaction_reward_ADDRESS.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "not_null_core__fact_transaction_reward_ADDRESS", "alias": "fact_transaction_reward_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/not_null_core__fact_transaction_reward_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.30916, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_transaction_reward\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.986de25489": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_034c2f39c2d28e54c6811572f8dd420f\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSACTION_REWARD_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_034c2f39c2d28e54c6811572f8dd420f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.986de25489", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_034c2f39c2d28e54c6811572f8dd420f.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID", "alias": "fact_transaction_reward_FACT_TRANSACTION_REWARD_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/dbt_constraints_primary_key_co_034c2f39c2d28e54c6811572f8dd420f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_034c2f39c2d28e54c6811572f8dd420f"}, "created_at": 1667571088.310084, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSACTION_REWARD_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_transaction_reward\n    group by FACT_TRANSACTION_REWARD_ID\n    having count(*) > 1\n        or FACT_TRANSACTION_REWARD_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_b6c6e00547d067fb8221b3e36f7adcfe\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_b6c6e00547d067fb8221b3e36f7adcfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_b6c6e00547d067fb8221b3e36f7adcfe.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transaction_reward_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/dbt_constraints_foreign_key_co_b6c6e00547d067fb8221b3e36f7adcfe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_b6c6e00547d067fb8221b3e36f7adcfe"}, "created_at": 1667571088.3119848, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.core.fact_transaction_reward\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_28cf4769b32c21ffd219fcb33f53cc6b\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_reward')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_reward"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_28cf4769b32c21ffd219fcb33f53cc6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_28cf4769b32c21ffd219fcb33f53cc6b.sql", "original_file_path": "models/core/core__fact_transaction_reward.yml", "name": "dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_transaction_reward_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_transaction_reward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_transaction_reward.yml/dbt_constraints_foreign_key_co_28cf4769b32c21ffd219fcb33f53cc6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_28cf4769b32c21ffd219fcb33f53cc6b"}, "created_at": 1667571088.314822, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_transaction_reward\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transaction_reward"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.eacd2e86ea": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_88678e38febb1f4663ee00b66fee2b79\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ACCOUNT_CURRENT_BALANCE_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_88678e38febb1f4663ee00b66fee2b79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.eacd2e86ea", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_88678e38febb1f4663ee00b66fee2b79.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID", "alias": "fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/dbt_expectations_expect_column_88678e38febb1f4663ee00b66fee2b79.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_88678e38febb1f4663ee00b66fee2b79"}, "created_at": 1667571088.319533, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ACCOUNT_CURRENT_BALANCE_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_ACCOUNT_CURRENT_BALANCE_ID", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.47a074fbee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.47a074fbee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID", "alias": "fact_account_current_balance_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.321444, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_ACCOUNT_ID\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere DIM_ACCOUNT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.92360d53b4": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_core", "fqn": ["algorand_models", "core", "negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID"], "unique_id": "test.algorand_models.negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.92360d53b4", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID", "alias": "fact_account_current_balance_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.322212, "compiled_sql": "\nSELECT\n    *\nFROM\n    ALGORAND_DEV.core.fact_account_current_balance\nWHERE\n    DIM_ACCOUNT_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_ADDRESS.b651ef5fe3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_ADDRESS"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_ADDRESS.b651ef5fe3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_ADDRESS.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_ADDRESS", "alias": "fact_account_current_balance_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.323987, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_BASE.64351dcc0f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS_BASE", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_REWARDS_BASE"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_BASE.64351dcc0f", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_REWARDS_BASE.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_REWARDS_BASE", "alias": "fact_account_current_balance_REWARDS_BASE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_REWARDS_BASE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.324817, "compiled_sql": "\n    \n    \n\n\n\nselect REWARDS_BASE\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere REWARDS_BASE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REWARDS_BASE", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_TOTAL.e8833447bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS_TOTAL", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_REWARDS_TOTAL"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_TOTAL.e8833447bb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_REWARDS_TOTAL.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_REWARDS_TOTAL", "alias": "fact_account_current_balance_REWARDS_TOTAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_REWARDS_TOTAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.325662, "compiled_sql": "\n    \n    \n\n\n\nselect REWARDS_TOTAL\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere REWARDS_TOTAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REWARDS_TOTAL", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_BALANCE.1d6fdeae7b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_BALANCE"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_BALANCE.1d6fdeae7b", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_BALANCE.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_BALANCE", "alias": "fact_account_current_balance_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_BALANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.3265548, "compiled_sql": "\n    \n    \n\n\n\nselect BALANCE\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere BALANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float.781a65230e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_65f49e1c4563ac5bea199a9dfe8f0ec4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float"], "column_name": "BALANCE", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_65f49e1c4563ac5bea199a9dfe8f0ec4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["algorand_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float.781a65230e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_65f49e1c4563ac5bea199a9dfe8f0ec4.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float", "alias": "fact_account_current_balance_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/dbt_expectations_expect_column_65f49e1c4563ac5bea199a9dfe8f0ec4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_65f49e1c4563ac5bea199a9dfe8f0ec4"}, "created_at": 1667571088.3273191, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('FACT_ACCOUNT_CURRENT_BALANCE_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_ACCOUNT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARDS_BASE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('REWARDS_TOTAL' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BALANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIM_BLOCK_ID__CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_AUDIT_RUN_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BALANCE'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BALANCE", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT.6c2db950e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_account_cu_887b76fe0bdf1b3ba333a5ebba3a72ec\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_BLOCK_ID__CREATED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "not_null_core__fact_account_cu_887b76fe0bdf1b3ba333a5ebba3a72ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT.6c2db950e3", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_cu_887b76fe0bdf1b3ba333a5ebba3a72ec.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT", "alias": "fact_account_current_balance_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_cu_887b76fe0bdf1b3ba333a5ebba3a72ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_core__fact_account_cu_887b76fe0bdf1b3ba333a5ebba3a72ec"}, "created_at": 1667571088.3295722, "compiled_sql": "\n    \n    \n\n\n\nselect DIM_BLOCK_ID__CREATED_AT\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere DIM_BLOCK_ID__CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID__CREATED_AT", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_core__fact_account_current_balance_CREATED_AT.ca2f8550e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_core", "fqn": ["algorand_models", "core", "not_null_core__fact_account_current_balance_CREATED_AT"], "unique_id": "test.algorand_models.not_null_core__fact_account_current_balance_CREATED_AT.ca2f8550e1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_core__fact_account_current_balance_CREATED_AT.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "not_null_core__fact_account_current_balance_CREATED_AT", "alias": "fact_account_current_balance_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/not_null_core__fact_account_current_balance_CREATED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.3303459, "compiled_sql": "\n    \n    \n\n\n\nselect CREATED_AT\nfrom ALGORAND_DEV.core.fact_account_current_balance\nwhere CREATED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT", "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.acfd598d86": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_c442f8cd013c4439bef93a8af362f403\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ACCOUNT_CURRENT_BALANCE_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_c442f8cd013c4439bef93a8af362f403", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.acfd598d86", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_co_c442f8cd013c4439bef93a8af362f403.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID", "alias": "fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/dbt_constraints_primary_key_co_c442f8cd013c4439bef93a8af362f403.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_co_c442f8cd013c4439bef93a8af362f403"}, "created_at": 1667571088.331124, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ACCOUNT_CURRENT_BALANCE_ID, count(*) as row_count\n    from ALGORAND_DEV.core.fact_account_current_balance\n    group by FACT_ACCOUNT_CURRENT_BALANCE_ID\n    having count(*) > 1\n        or FACT_ACCOUNT_CURRENT_BALANCE_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_1e6011425b33f9d88219e2d47e9ba1cc\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_1e6011425b33f9d88219e2d47e9ba1cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_1e6011425b33f9d88219e2d47e9ba1cc.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_account_current_balance_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/dbt_constraints_foreign_key_co_1e6011425b33f9d88219e2d47e9ba1cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_1e6011425b33f9d88219e2d47e9ba1cc"}, "created_at": 1667571088.333125, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID\n  from ALGORAND_DEV.core.fact_account_current_balance\n  where 1=1\n        and DIM_ACCOUNT_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_cd26ae30095a2e6b6fa0b6ecc694f5f0\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID__CREATED_AT", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_account_current_balance')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_current_balance"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_cd26ae30095a2e6b6fa0b6ecc694f5f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["algorand_models", "core", "dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_co_cd26ae30095a2e6b6fa0b6ecc694f5f0.sql", "original_file_path": "models/core/core__fact_account_current_balance.yml", "name": "dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_account_current_balance_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_account_current_balance"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/core__fact_account_current_balance.yml/dbt_constraints_foreign_key_co_cd26ae30095a2e6b6fa0b6ecc694f5f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_co_cd26ae30095a2e6b6fa0b6ecc694f5f0"}, "created_at": 1667571088.335731, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID__CREATED_AT\n  from ALGORAND_DEV.core.fact_account_current_balance\n  where 1=1\n        and DIM_BLOCK_ID__CREATED_AT is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID__CREATED_AT\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_account_current_balance"}, "test.algorand_models.not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.d3847fb981": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_NFT_SALES_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.d3847fb981", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID", "alias": "fact_nft_sales_FACT_NFT_SALES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.340607, "compiled_sql": "\n    \n    \n\n\n\nselect FACT_NFT_SALES_ID\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere FACT_NFT_SALES_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_NFT_SALES_ID", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_NFT_MARKETPLACE.a92dbc63d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_MARKETPLACE", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_NFT_MARKETPLACE"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_NFT_MARKETPLACE.a92dbc63d8", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_NFT_MARKETPLACE.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_NFT_MARKETPLACE", "alias": "fact_nft_sales_NFT_MARKETPLACE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_NFT_MARKETPLACE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.341446, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_MARKETPLACE\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere NFT_MARKETPLACE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_MARKETPLACE", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP.493cf3464a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_23ce745f372b0f0545e78c4516263d36\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_23ce745f372b0f0545e78c4516263d36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_column_to_exist_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP"], "unique_id": "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP.493cf3464a", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_column_23ce745f372b0f0545e78c4516263d36.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP", "alias": "fact_nft_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_expectations_expect_column_23ce745f372b0f0545e78c4516263d36.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_23ce745f372b0f0545e78c4516263d36"}, "created_at": 1667571088.342325, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1.5d72d7cbeb": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_078d2badb1bf22b0a0c602852706c0af\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_078d2badb1bf22b0a0c602852706c0af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1.5d72d7cbeb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_expectations_expect_row_va_078d2badb1bf22b0a0c602852706c0af.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1", "alias": "fact_nft_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_expectations_expect_row_va_078d2badb1bf22b0a0c602852706c0af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_078d2badb1bf22b0a0c602852706c0af"}, "created_at": 1667571088.344222, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ALGORAND_DEV.nft.fact_nft_sales\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.f02b7cb0a7": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_nft", "fqn": ["algorand_models", "core", "NFT", "negative_one_nft__fact_nft_sales_DIM_BLOCK_ID"], "unique_id": "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.f02b7cb0a7", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "negative_one_nft__fact_nft_sales_DIM_BLOCK_ID", "alias": "fact_nft_sales_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.3470879, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.nft.fact_nft_sales where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_TX_GROUP_ID.af34d7fde1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_GROUP_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_TX_GROUP_ID"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_TX_GROUP_ID.af34d7fde1", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_TX_GROUP_ID.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_TX_GROUP_ID", "alias": "fact_nft_sales_TX_GROUP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_TX_GROUP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.348926, "compiled_sql": "\n    \n    \n\n\n\nselect TX_GROUP_ID\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere TX_GROUP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_GROUP_ID", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_PURCHASER.41c5166c2e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_PURCHASER"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_PURCHASER.41c5166c2e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_PURCHASER.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_PURCHASER", "alias": "fact_nft_sales_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.3496919, "compiled_sql": "\n    \n    \n\n\n\nselect PURCHASER\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.c4b3e5f8ab": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ACCOUNT_ID__PURCHASER", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_nft", "fqn": ["algorand_models", "core", "NFT", "negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER"], "unique_id": "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.c4b3e5f8ab", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER", "alias": "fact_nft_sales_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1667571088.3511171, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.nft.fact_nft_sales where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_ACCOUNT_ID__PURCHASER = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ACCOUNT_ID__PURCHASER", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_NFT_ASSET_ID.58d08fc598": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_NFT_ASSET_ID"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_NFT_ASSET_ID.58d08fc598", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_NFT_ASSET_ID.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_NFT_ASSET_ID", "alias": "fact_nft_sales_NFT_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_NFT_ASSET_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.352972, "compiled_sql": "\n    \n    \n\n\n\nselect NFT_ASSET_ID\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere NFT_ASSET_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ASSET_ID", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.4083c668bd": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') AND NFT_ASSET_ID IS NULL\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_ASSET_ID__NFT", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.algorand_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') AND NFT_ASSET_ID IS NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "negative_one_nft", "fqn": ["algorand_models", "core", "NFT", "negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT"], "unique_id": "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.4083c668bd", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT", "alias": "fact_nft_sales_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') AND NFT_ASSET_ID IS NULL"}, "created_at": 1667571088.354134, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from ALGORAND_DEV.nft.fact_nft_sales where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS') AND NFT_ASSET_ID IS NULL) dbt_subquery\nWHERE\n    DIM_ASSET_ID__NFT = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_ASSET_ID__NFT", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.7e788a19ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER_OF_NFTS", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_NUMBER_OF_NFTS"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.7e788a19ab", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_NUMBER_OF_NFTS", "alias": "fact_nft_sales_NUMBER_OF_NFTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667571088.356034, "compiled_sql": "\n    \n    \n\n\n\nselect NUMBER_OF_NFTS\nfrom ALGORAND_DEV.nft.fact_nft_sales\nwhere NUMBER_OF_NFTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUMBER_OF_NFTS", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.6e09fd033e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"NFT_MARKETPLACE <> 'fifa collect'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SALES_AMOUNT", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "NFT_MARKETPLACE <> 'fifa collect'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "not_null_nft", "fqn": ["algorand_models", "core", "NFT", "not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT"], "unique_id": "test.algorand_models.not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.6e09fd033e", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT", "alias": "fact_nft_sales_TOTAL_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "NFT_MARKETPLACE <> 'fifa collect'"}, "created_at": 1667571088.3571332, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SALES_AMOUNT\nfrom (select * from ALGORAND_DEV.nft.fact_nft_sales where NFT_MARKETPLACE <> 'fifa collect') dbt_subquery\nwhere TOTAL_SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SALES_AMOUNT", "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID.8fc2e94dca": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_nf_2af289c86732d971f367f285e09995a2\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_NFT_SALES_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_nf_2af289c86732d971f367f285e09995a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_primary_key_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID"], "unique_id": "test.algorand_models.dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID.8fc2e94dca", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_primary_key_nf_2af289c86732d971f367f285e09995a2.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID", "alias": "fact_nft_sales_FACT_NFT_SALES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_constraints_primary_key_nf_2af289c86732d971f367f285e09995a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_nf_2af289c86732d971f367f285e09995a2"}, "created_at": 1667571088.3579001, "compiled_sql": "with validation_errors as (\n    select\n        FACT_NFT_SALES_ID, count(*) as row_count\n    from ALGORAND_DEV.nft.fact_nft_sales\n    group by FACT_NFT_SALES_ID\n    having count(*) > 1\n        or FACT_NFT_SALES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_nf_2df06a28c3d954dad644034189387b4c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_block", "model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_nf_2df06a28c3d954dad644034189387b4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_nf_2df06a28c3d954dad644034189387b4c.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_nft_sales_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_constraints_foreign_key_nf_2df06a28c3d954dad644034189387b4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_nf_2df06a28c3d954dad644034189387b4c"}, "created_at": 1667571088.359892, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from ALGORAND_DEV.nft.fact_nft_sales\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from ALGORAND_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_nf_009f01bffb51e17da51d0e4f0a19c068\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ACCOUNT_ID__PURCHASER", "pk_table_name": "ref('core__dim_account')", "pk_column_name": "DIM_ACCOUNT_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_account", "model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_nf_009f01bffb51e17da51d0e4f0a19c068", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_nf_009f01bffb51e17da51d0e4f0a19c068.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_", "alias": "fact_nft_sales_DIM_ACCOUNT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_account"], ["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_constraints_foreign_key_nf_009f01bffb51e17da51d0e4f0a19c068.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_nf_009f01bffb51e17da51d0e4f0a19c068"}, "created_at": 1667571088.36251, "compiled_sql": "\nwith child as (\n  select\n    DIM_ACCOUNT_ID__PURCHASER\n  from ALGORAND_DEV.nft.fact_nft_sales\n  where 1=1\n        and DIM_ACCOUNT_ID__PURCHASER is not null\n        \n),\n\nparent as (\n    select\n        DIM_ACCOUNT_ID\n    from ALGORAND_DEV.core.dim_account\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ACCOUNT_ID = child.DIM_ACCOUNT_ID__PURCHASER\n\n    where parent.DIM_ACCOUNT_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.nft__fact_nft_sales"}, "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_nf_6a216ec3ea0dae583b8c0e2c1bb1482a\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_ASSET_ID__NFT", "pk_table_name": "ref('core__dim_asset')", "pk_column_name": "DIM_ASSET_ID", "model": "{{ get_where_subquery(ref('nft__fact_nft_sales')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.algorand_models.core__dim_asset", "model.algorand_models.nft__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_nf_6a216ec3ea0dae583b8c0e2c1bb1482a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ALGORAND_DEV", "schema": "dbt_constraints_foreign_key_nft", "fqn": ["algorand_models", "core", "NFT", "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_"], "unique_id": "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "dbt_constraints_foreign_key_nf_6a216ec3ea0dae583b8c0e2c1bb1482a.sql", "original_file_path": "models/core/NFT/nft__fact_nft_sales.yml", "name": "dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_", "alias": "fact_nft_sales_DIM_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset"], ["nft__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/algorand_models/models/core/NFT/nft__fact_nft_sales.yml/dbt_constraints_foreign_key_nf_6a216ec3ea0dae583b8c0e2c1bb1482a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_nf_6a216ec3ea0dae583b8c0e2c1bb1482a"}, "created_at": 1667571088.365263, "compiled_sql": "\nwith child as (\n  select\n    DIM_ASSET_ID__NFT\n  from ALGORAND_DEV.nft.fact_nft_sales\n  where 1=1\n        and DIM_ASSET_ID__NFT is not null\n        \n),\n\nparent as (\n    select\n        DIM_ASSET_ID\n    from ALGORAND_DEV.core.dim_asset\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_ASSET_ID = child.DIM_ASSET_ID__NFT\n\n    where parent.DIM_ASSET_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.nft__fact_nft_sales"}}, "sources": {"source.algorand_models.shared.prices": {"fqn": ["algorand_models", "shared", "prices"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.prices", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices", "created_at": 1667512712.0498009}, "source.algorand_models.shared.prices_v2": {"fqn": ["algorand_models", "shared", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.prices_v2", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1667512712.0498781}, "source.algorand_models.shared.cmc_assets": {"fqn": ["algorand_models", "shared", "cmc_assets"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.cmc_assets", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "cmc_assets", "source_name": "shared", "source_description": "", "loader": "", "identifier": "cmc_assets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.cmc_assets", "created_at": 1667512712.049932}, "source.algorand_models.shared.market_asset_metadata": {"fqn": ["algorand_models", "shared", "market_asset_metadata"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.market_asset_metadata", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "market_asset_metadata", "source_name": "shared", "source_description": "", "loader": "", "identifier": "market_asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.market_asset_metadata", "created_at": 1667512712.04998}, "source.algorand_models.shared.coingecko_prices": {"fqn": ["algorand_models", "shared", "coingecko_prices"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.coingecko_prices", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "coingecko_prices", "source_name": "shared", "source_description": "", "loader": "", "identifier": "coingecko_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.coingecko_prices", "created_at": 1667512712.050026}, "source.algorand_models.shared.hours": {"fqn": ["algorand_models", "shared", "hours"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.hours", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "hours", "source_name": "shared", "source_description": "", "loader": "", "identifier": "hours", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.hours", "created_at": 1667512712.05007}, "source.algorand_models.shared.udm_address_labels": {"fqn": ["algorand_models", "shared", "udm_address_labels"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_address_labels", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_address_labels", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_address_labels", "created_at": 1667512712.050117}, "source.algorand_models.shared.udm_address_labels_new": {"fqn": ["algorand_models", "shared", "udm_address_labels_new"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_address_labels_new", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_address_labels_new", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_address_labels_new", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_address_labels_new", "created_at": 1667512712.0501618}, "source.algorand_models.shared.udm_address_tags": {"fqn": ["algorand_models", "shared", "udm_address_tags"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_address_tags", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_address_tags", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_address_tags", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_address_tags", "created_at": 1667512712.050207}, "source.algorand_models.shared.udm_balances": {"fqn": ["algorand_models", "shared", "udm_balances"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_balances", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_balances", "created_at": 1667512712.0502532}, "source.algorand_models.shared.udm_decimal_adjustments": {"fqn": ["algorand_models", "shared", "udm_decimal_adjustments"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_decimal_adjustments", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_decimal_adjustments", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_decimal_adjustments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_decimal_adjustments", "created_at": 1667512712.0503669}, "source.algorand_models.shared.udm_velocity": {"fqn": ["algorand_models", "shared", "udm_velocity"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.udm_velocity", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "udm_velocity", "source_name": "shared", "source_description": "", "loader": "", "identifier": "udm_velocity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.udm_velocity", "created_at": 1667512712.0504162}, "source.algorand_models.shared.uniswapv2factory_event_paircreated": {"fqn": ["algorand_models", "shared", "uniswapv2factory_event_paircreated"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.uniswapv2factory_event_paircreated", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "uniswapv2factory_event_paircreated", "source_name": "shared", "source_description": "", "loader": "", "identifier": "uniswapv2factory_event_paircreated", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.uniswapv2factory_event_paircreated", "created_at": 1667512712.0504599}, "source.algorand_models.shared.flow_balances": {"fqn": ["algorand_models", "shared", "flow_balances"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.flow_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "flow_balances", "source_name": "shared", "source_description": "", "loader": "", "identifier": "flow_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.flow_balances", "created_at": 1667512712.0505059}, "source.algorand_models.shared.near_balances": {"fqn": ["algorand_models", "shared", "near_balances"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.near_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "near_balances", "source_name": "shared", "source_description": "", "loader": "", "identifier": "near_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.near_balances", "created_at": 1667512712.05055}, "source.algorand_models.shared.algorand_balances": {"fqn": ["algorand_models", "shared", "algorand_balances"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.algorand_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "algorand_balances", "source_name": "shared", "source_description": "", "loader": "", "identifier": "algorand_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.algorand_balances", "created_at": 1667512712.050594}, "source.algorand_models.shared.terra_balances": {"fqn": ["algorand_models", "shared", "terra_balances"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.algorand_models.shared.terra_balances", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_balances", "source_name": "shared", "source_description": "", "loader": "", "identifier": "terra_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.terra_balances", "created_at": 1667512712.0506382}, "source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827": {"fqn": ["algorand_models", "bronze", "prod_nft_metadata_uploads_1828572827"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prod_nft_metadata_uploads_1828572827", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "prod_nft_metadata_uploads_1828572827", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827", "created_at": 1667512712.0506828}, "source.algorand_models.crosschain.address_labels": {"fqn": ["algorand_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.algorand_models.crosschain.address_labels", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1667512712.050727}, "source.algorand_models.algorand.ACCOUNT": {"fqn": ["algorand_models", "algorand", "ACCOUNT"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.ACCOUNT", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ACCOUNT", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "ACCOUNT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT", "created_at": 1667512712.050773}, "source.algorand_models.algorand.ACCOUNT_APP": {"fqn": ["algorand_models", "algorand", "ACCOUNT_APP"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.ACCOUNT_APP", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ACCOUNT_APP", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "ACCOUNT_APP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT_APP", "created_at": 1667512712.0508192}, "source.algorand_models.algorand.ACCOUNT_ASSET": {"fqn": ["algorand_models", "algorand", "ACCOUNT_ASSET"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.ACCOUNT_ASSET", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ACCOUNT_ASSET", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "ACCOUNT_ASSET", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ACCOUNT_ASSET", "created_at": 1667512712.0508642}, "source.algorand_models.algorand.APP": {"fqn": ["algorand_models", "algorand", "APP"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.APP", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "APP", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "APP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.APP", "created_at": 1667512712.050909}, "source.algorand_models.algorand.ASSET": {"fqn": ["algorand_models", "algorand", "ASSET"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.ASSET", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ASSET", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "ASSET", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.ASSET", "created_at": 1667512712.050953}, "source.algorand_models.algorand.BLOCK_HEADER": {"fqn": ["algorand_models", "algorand", "BLOCK_HEADER"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.BLOCK_HEADER", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "BLOCK_HEADER", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "BLOCK_HEADER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.BLOCK_HEADER", "created_at": 1667512712.050997}, "source.algorand_models.algorand.METASTATE": {"fqn": ["algorand_models", "algorand", "METASTATE"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.METASTATE", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "METASTATE", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "METASTATE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.METASTATE", "created_at": 1667512712.05104}, "source.algorand_models.algorand.TXN": {"fqn": ["algorand_models", "algorand", "TXN"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.TXN", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "TXN", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "TXN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.TXN", "created_at": 1667512712.051083}, "source.algorand_models.algorand.TXN_PARTICIPATION": {"fqn": ["algorand_models", "algorand", "TXN_PARTICIPATION"], "database": "hevo", "schema": "BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL", "unique_id": "source.algorand_models.algorand.TXN_PARTICIPATION", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "TXN_PARTICIPATION", "source_name": "algorand", "source_description": "", "loader": "", "identifier": "TXN_PARTICIPATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hevo.BRONZE_ALGORAND_2_8_0__HEVO_PARALLEL.TXN_PARTICIPATION", "created_at": 1667512712.051127}, "source.algorand_models.prod.solana_blocks": {"fqn": ["algorand_models", "prod", "solana_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.algorand_models.prod.solana_blocks", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "solana_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_blocks", "created_at": 1667512712.051171}, "source.algorand_models.prod.solana_txs": {"fqn": ["algorand_models", "prod", "solana_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.algorand_models.prod.solana_txs", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "solana_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_txs", "created_at": 1667512712.0512152}, "source.algorand_models.prod.ethereum_blocks": {"fqn": ["algorand_models", "prod", "ethereum_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.algorand_models.prod.ethereum_blocks", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "ethereum_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.ethereum_blocks", "created_at": 1667512712.051258}, "source.algorand_models.prod.ethereum_txs": {"fqn": ["algorand_models", "prod", "ethereum_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.algorand_models.prod.ethereum_txs", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "ethereum_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.ethereum_txs", "created_at": 1667512712.051301}, "source.algorand_models.algorand_db_external.algorand_indexer_tx": {"fqn": ["algorand_models", "algorand_db_external", "algorand_indexer_tx"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.algorand_models.algorand_db_external.algorand_indexer_tx", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "algorand_indexer_tx", "source_name": "algorand_db_external", "source_description": "", "loader": "S3", "identifier": "algorand_indexer_tx", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@ALGORAND_DEV.bronze.ANALYTICS_EXTERNAL_TABLES/ALGORAND_INDEXER_dev/TX", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": [{"name": "_partition_by_date", "description": "", "data_type": "date", "meta": {}, "expression": "to_date(split_part(metadata$filename, '/', 3) || split_part(metadata$filename, '/', 4) || split_part(metadata$filename, '/', 5), 'YYYYMMDD')"}], "auto_refresh": false}, "description": "", "columns": {"account_id": {"name": "account_id", "description": "account_id used in request", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:account_id::string"}, "tx_id": {"name": "tx_id", "description": "txid used in request", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:tx_id::string"}, "metadata": {"name": "metadata", "description": "raw indexer response", "meta": {}, "data_type": "variant", "quote": null, "tags": [], "expression": "value:metadata::variant"}, "data": {"name": "data", "description": "raw indexer response", "meta": {}, "data_type": "variant", "quote": null, "tags": [], "expression": "value:data::variant"}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.algorand_indexer_tx", "created_at": 1667512712.0513558}}, "macros": {"macro.algorand_models.create_sps": {"unique_id": "macro.algorand_models.create_sps", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'ALGORAND' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.algorand_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.81745}, "macro.algorand_models.generate_schema_name": {"unique_id": "macro.algorand_models.generate_schema_name", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8180091}, "macro.algorand_models.generate_alias_name": {"unique_id": "macro.algorand_models.generate_alias_name", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8183029}, "macro.algorand_models.create_algorand_decode_hex_addr": {"unique_id": "macro.algorand_models.create_algorand_decode_hex_addr", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/algorand_decode_hex_addr.sql", "original_file_path": "macros/algorand_decode_hex_addr.sql", "name": "create_algorand_decode_hex_addr", "macro_sql": "{% macro create_algorand_decode_hex_addr() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION algorand_decode_hex_addr(\n        addr STRING\n    ) returns STRING api_integration = analytics_serverless_api max_batch_rows = 300 AS 'https://yww9kipdth.execute-api.us-east-1.amazonaws.com/api/algorand/decode-hex-address';\n{% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.818636}, "macro.algorand_models.run_sp_create_prod_clone": {"unique_id": "macro.algorand_models.run_sp_create_prod_clone", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call algorand._internal.create_prod_clone(\n        'algorand',\n        'algorand_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.818933}, "macro.algorand_models.create_udfs": {"unique_id": "macro.algorand_models.create_udfs", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% set sql %}\n    {{ create_algorand_udf_bulk_get_tx_info() }};\n{{ create_algorand_udf_bulk_get_tx_info() }};\n{% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.algorand_models.create_algorand_udf_bulk_get_tx_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8192909}, "macro.algorand_models.create_algorand_sp_bulk_get_contract_info": {"unique_id": "macro.algorand_models.create_algorand_sp_bulk_get_contract_info", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/sp_bulk_get_contract_info.sql", "original_file_path": "macros/sp_bulk_get_contract_info.sql", "name": "create_algorand_sp_bulk_get_contract_info", "macro_sql": "{% macro create_algorand_sp_bulk_get_contract_info() %}\n  {% set sql %}\n  CREATE\n  OR REPLACE PROCEDURE silver.sp_bulk_get_tx() returns variant LANGUAGE SQL AS $$\nDECLARE\n  RESULT variant;\nrow_cnt INTEGER;\nBEGIN\n  row_cnt:= (\n    SELECT\n      COUNT(1)\n    FROM\n      {{ ref('silver__get_tx') }}\n  );\nif (\n    row_cnt > 0\n  ) THEN RESULT:= (\n    SELECT\n      silver.udf_bulk_get_tx()\n  );\n  ELSE RESULT:= NULL;\nEND if;\nRETURN RESULT;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.819714}, "macro.algorand_models.sp_create_prod_clone": {"unique_id": "macro.algorand_models.sp_create_prod_clone", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1)\n            var function_name = existing_functions.getColumnValue(2)\n            var argument_signature = existing_functions.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1)\n            var procedure_name = existing_procedures.getColumnValue(2)\n            var argument_signature = existing_procedures.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.820441}, "macro.algorand_models.create_algorand_udf_bulk_get_tx_info": {"unique_id": "macro.algorand_models.create_algorand_udf_bulk_get_tx_info", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/all_udfs.sql", "original_file_path": "macros/all_udfs.sql", "name": "create_algorand_udf_bulk_get_tx_info", "macro_sql": "{% macro create_algorand_udf_bulk_get_tx_info() %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_tx() returns text api_integration = aws_algorand_api AS {% if target.name == \"prod\" -%}\n        'https://koklizm6jc.execute-api.us-east-1.amazonaws.com/prod/bulk_get_tx_info'\n    {% else %}\n        'https://vfc3eyv16g.execute-api.us-east-1.amazonaws.com/dev/bulk_get_tx_info'\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.820742}, "macro.algorand_models.create_algorand_decode_b64_addr": {"unique_id": "macro.algorand_models.create_algorand_decode_b64_addr", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/algorand_decode_b64_addr.sql", "original_file_path": "macros/algorand_decode_b64_addr.sql", "name": "create_algorand_decode_b64_addr", "macro_sql": "{% macro create_algorand_decode_b64_addr() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION algorand_decode_b64_addr(\n        addr STRING\n    ) returns STRING api_integration = analytics_serverless_api max_batch_rows = 300 AS 'https://yww9kipdth.execute-api.us-east-1.amazonaws.com/api/algorand/decode-b64-address';\n{% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8210409}, "macro.algorand_models.sequence_gaps_buffered_look_back": {"unique_id": "macro.algorand_models.sequence_gaps_buffered_look_back", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/tests/sequence_gaps_buffered_look_back.sql", "original_file_path": "macros/tests/sequence_gaps_buffered_look_back.sql", "name": "sequence_gaps_buffered_look_back", "macro_sql": "{% macro sequence_gaps_buffered_look_back(\n        table,\n        partition_by,\n        column,\n        delayed_column,\n        delayed_period\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }},\n            LAG(\n                {{ delayed_column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ delayed_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nAND \n    {{ delayed_column }} < (\n        SELECT\n            MAX(\n                {{ delayed_column }}\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '{{ delayed_period }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.822922}, "macro.algorand_models.sequence_gaps": {"unique_id": "macro.algorand_models.sequence_gaps", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8239949}, "macro.algorand_models.test_negative_one": {"unique_id": "macro.algorand_models.test_negative_one", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/tests/negative_one.sql", "original_file_path": "macros/tests/negative_one.sql", "name": "test_negative_one", "macro_sql": "{% test negative_one(\n    model,\n    column_name\n) %}\nSELECT\n    *\nFROM\n    {{ model }}\nWHERE\n    {{ column_name }} = '-1' {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8242502}, "macro.algorand_models.sequence_distinct_gaps": {"unique_id": "macro.algorand_models.sequence_distinct_gaps", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/tests/sequence_distinct_gaps.sql", "original_file_path": "macros/tests/sequence_distinct_gaps.sql", "name": "sequence_distinct_gaps", "macro_sql": "{% macro sequence_distinct_gaps(\n        table,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM (\n            SELECT DISTINCT {{ column }} FROM {{ table }}\n        )\n           \n    )\nSELECT\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.825203}, "macro.algorand_models.date_gaps": {"unique_id": "macro.algorand_models.date_gaps", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "macros/tests/date_gaps.sql", "original_file_path": "macros/tests/date_gaps.sql", "name": "date_gaps", "macro_sql": "{% macro date_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) - 1 AS gap\nFROM\n    source\n    {% if varargs -%}\nLEFT JOIN (\n        {% for x in varargs %}\n            (\n            {{ dbt_utils.date_spine(\n                datepart = \"day\",\n                start_date = x.start_date,\n                end_date = x.end_date\n            ) }}\n            )\n            {{- \"UNION ALL\" if not loop.last -}}\n        {% endfor %}\n) exclude\n    ON source.day = exclude.date_day\n    {%- endif %}\nWHERE\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) > 1 \n    {{ \"AND source.day != exclude.date_day\" if varargs }}\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.826983}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.827878}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8402529}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.841047}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.841318}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.842043}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.842797}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.843359}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.843863}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.844177}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8442519}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.844417}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.844515}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.844696}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.844938}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.845133}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.845643}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.845836}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.845997}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.846455}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.846632}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.847094}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8478851}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.848093}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.848325}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.848518}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8486211}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8498828}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8501601}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.850409}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8524852}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.852768}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.853348}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.855024}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.856448}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.856988}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.859265}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.859722}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.859967}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8602471}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8604648}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.860648}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.861741}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8619368}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8620732}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.862207}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8623402}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.862744}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.863033}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.86332}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.863779}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.864039}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.867332}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8674948}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.867703}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.86784}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.867931}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.868622}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.868783}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.868945}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.870535}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8719301}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.875615}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.875905}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.876074}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.87616}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8763}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.876408}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8766122}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.877462}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8776472}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.877892}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8783202}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.884362}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.886537}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.88707}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8873842}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.887809}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.888184}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8890848}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.889622}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.890215}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8950841}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.896569}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.896874}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.8976011}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.897865}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.898481}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.899196}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.90367}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.90799}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.909272}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9105139}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.911226}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9137359}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9142148}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.914397}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.914592}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9149902}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9174569}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.917807}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.918026}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.919528}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.919929}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.920089}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.920267}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9205189}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9237592}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9282482}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.929146}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9293811}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.929847}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.930034}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9301581}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.930293}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.930403}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.930559}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9306722}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9311318}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9313111}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.932739}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9332101}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.933428}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9339771}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.934229}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.934505}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.934943}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.935182}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.935574}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.935932}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.936239}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9368582}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.937964}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.938528}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.938814}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.940491}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.941718}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.942445}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.942678}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.942989}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.943059}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.943433}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9435892}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.943885}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.944006}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9443069}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.944407}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.944788}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9449432}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.945214}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.945287}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.945597}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.945728}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9460669}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.946196}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.946843}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.947299}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.947676}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.947835}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9481852}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.94832}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.948639}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.948792}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9490821}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.949234}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9495318}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.949638}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.949971}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.950098}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.950388}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.950488}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.951333}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.951482}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.951639}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.951786}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.951998}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9521458}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.952301}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.952472}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9526248}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.952775}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9529321}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.953069}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9533691}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.953469}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.953847}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.954104}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9542458}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9547808}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.954939}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.955148}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9554691}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.955596}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.955998}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9561741}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.956334}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9565802}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.957064}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.957192}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.957345}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.957739}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.960674}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9608378}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.96105}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.961334}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9615731}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.961884}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.962063}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.962267}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.962442}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9625971}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.962813}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.963084}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9633238}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.963924}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.964148}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.964283}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9644742}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.964967}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.965108}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9653308}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.965738}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.967315}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.967425}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.967587}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.967696}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9680269}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9682088}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9683032}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9685178}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.968696}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.968912}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.969096}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9693189}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9700322}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.970217}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9704478}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.970668}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9717739}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.972464}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.972629}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.972826}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9729888}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.973254}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.973724}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9751182}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9753752}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.975557}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.975703}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.975879}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9761121}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.976311}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9766028}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.976782}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.976933}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9785018}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.97872}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.979022}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.979202}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.979532}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.979754}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.980337}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.980587}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98134}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.981896}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9821482}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.982541}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.982836}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.983243}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98332}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.983388}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9837818}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9839418}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98425}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.984373}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985067}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985137}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985281}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9853492}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9854138}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985568}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98564}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985705}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985771}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9859252}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.985994}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9860601}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986211}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986281}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986345}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986497}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9865642}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986628}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98678}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.986849}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9869142}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9874072}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9878469}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98805}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98835}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9884899}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9885912}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.988929}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.989034}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.989131}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.989716}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.98988}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.990046}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.990226}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.990429}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.990761}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.990834}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9909}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.991282}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.991423}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.991553}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.991683}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.992244}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9923751}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9925902}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.992741}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.99488}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.995276}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9955468}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.995927}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.996883}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9993348}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.9994931}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512709.99965}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.001357}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.001558}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0019908}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.002134}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.002263}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.002391}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.002765}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.002914}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0030432}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.003411}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.003544}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.003662}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.00418}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.004291}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.004392}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0047622}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.004867}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.00497}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0053918}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0055292}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0056682}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0062468}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.00635}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.006919}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007024}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007092}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007158}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007311}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007413}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007551}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007655}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.007778}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.009175}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0096278}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0100741}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0102558}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0106702}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.010797}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.01092}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.011041}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.01141}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.011511}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.01167}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0117671}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.01234}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.012604}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.012748}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.013131}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.013299}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0147269}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.014891}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.015111}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.015442}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.015771}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.016138}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.016553}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.01679}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.016951}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.017618}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.017858}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0180008}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.018135}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.018264}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0192268}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.019648}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.019776}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.019954}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.020138}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.025567}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.026068}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0263832}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.027037}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0322518}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.032801}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.033278}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.033807}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0344489}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0348248}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.035136}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0357041}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.035927}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.03636}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.036653}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.037326}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0376651}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.038115}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0384462}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.038812}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.038976}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0396018}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.040122}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.04069}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.041118}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0416372}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.041816}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0422132}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.042387}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0430248}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0436668}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.04432}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.044662}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0451899}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.045485}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.045985}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.046489}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0471702}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0478358}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0482938}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.048458}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0492082}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.050076}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.053004}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0544572}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0547829}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.054944}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.055264}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.055454}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0557592}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.055937}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.056482}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.057235}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0578141}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0580401}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0583942}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.058763}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.059179}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.05987}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.060698}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.061526}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0619562}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.062142}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.062647}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.063338}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0641658}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.064611}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0648892}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0655859}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0665479}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0682108}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.070338}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.072801}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.075718}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.076066}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.076309}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.078659}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.078868}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.079059}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0792441}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.079403}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0795689}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.08017}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.081078}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0814998}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.081773}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.082165}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0824971}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.084042}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.084314}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0851572}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.085752}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.087063}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.088639}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0897331}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0905652}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.091083}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0918021}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.092236}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.092818}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.093316}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0934}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.093482}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.0935628}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.094574}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.094949}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.095637}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.096577}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.104704}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1069472}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.109518}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1107268}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.111491}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.112149}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.113821}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1143758}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.115306}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1155882}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1158311}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1161401}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1163762}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.117003}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.117203}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.11741}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1176121}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.117813}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.11817}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.118309}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.118443}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1185439}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.118905}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.11941}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.119553}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.119837}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.120095}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.120616}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.120768}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.120899}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1210291}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1211588}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.121629}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.121867}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.122123}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1224399}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.122665}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1229498}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1234}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.123552}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.123696}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.123888}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1252239}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1255062}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1257899}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.126268}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.126666}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.12715}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.127507}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.127638}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1277618}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.128165}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.128432}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1286058}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.128881}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.130507}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.130791}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.131184}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.131469}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1318789}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.132311}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.132808}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.133019}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.133151}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.133279}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.133715}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.134225}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.134421}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.134613}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.134809}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.135007}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.135322}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.135778}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1360042}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.136169}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1374788}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1378188}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1379762}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.138131}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.138544}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1387331}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.13919}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.139767}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.139956}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1400928}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1402318}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1403751}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1408682}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.141003}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.141196}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.141393}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1416771}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.141957}, "macro.dbt_constraints.postgres__create_primary_key": {"unique_id": "macro.dbt_constraints.postgres__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.147352}, "macro.dbt_constraints.postgres__create_unique_key": {"unique_id": "macro.dbt_constraints.postgres__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.148705}, "macro.dbt_constraints.postgres__create_not_null": {"unique_id": "macro.dbt_constraints.postgres__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.149718}, "macro.dbt_constraints.postgres__create_foreign_key": {"unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.151437}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1523619}, "macro.dbt_constraints.postgres__foreign_key_exists": {"unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.153257}, "macro.dbt_constraints.postgres__have_references_priv": {"unique_id": "macro.dbt_constraints.postgres__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1538801}, "macro.dbt_constraints.postgres__have_ownership_priv": {"unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.154495}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.15511}, "macro.dbt_constraints.postgres__truncate_relation": {"unique_id": "macro.dbt_constraints.postgres__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.155326}, "macro.dbt_constraints.postgres__drop_relation": {"unique_id": "macro.dbt_constraints.postgres__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1555462}, "macro.dbt_constraints.default__test_primary_key": {"unique_id": "macro.dbt_constraints.default__test_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1570492}, "macro.dbt_constraints.default__test_unique_key": {"unique_id": "macro.dbt_constraints.default__test_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.15732}, "macro.dbt_constraints.default__test_foreign_key": {"unique_id": "macro.dbt_constraints.default__test_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.158278}, "macro.dbt_constraints.get_quoted_column_list": {"unique_id": "macro.dbt_constraints.get_quoted_column_list", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.158772}, "macro.dbt_constraints.get_quoted_column_csv": {"unique_id": "macro.dbt_constraints.get_quoted_column_csv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.159043}, "macro.dbt_constraints.test_primary_key": {"unique_id": "macro.dbt_constraints.test_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.164534}, "macro.dbt_constraints.test_unique_key": {"unique_id": "macro.dbt_constraints.test_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.164931}, "macro.dbt_constraints.test_foreign_key": {"unique_id": "macro.dbt_constraints.test_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1657689}, "macro.dbt_constraints.create_primary_key": {"unique_id": "macro.dbt_constraints.create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1667512712.045713}, "macro.dbt_constraints.create_unique_key": {"unique_id": "macro.dbt_constraints.create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1667512712.046627}, "macro.dbt_constraints.create_foreign_key": {"unique_id": "macro.dbt_constraints.create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_model, pk_column_names, fk_model, fk_column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_model, pk_column_names, fk_model, fk_column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1667512712.048322}, "macro.dbt_constraints.create_not_null": {"unique_id": "macro.dbt_constraints.create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_not_null", "macro_sql": "{%- macro create_not_null(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.166828}, "macro.dbt_constraints.unique_constraint_exists": {"unique_id": "macro.dbt_constraints.unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1667512712.048995}, "macro.dbt_constraints.foreign_key_exists": {"unique_id": "macro.dbt_constraints.foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1667512712.049663}, "macro.dbt_constraints.have_references_priv": {"unique_id": "macro.dbt_constraints.have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1674109}, "macro.dbt_constraints.have_ownership_priv": {"unique_id": "macro.dbt_constraints.have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions)) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.167611}, "macro.dbt_constraints.truncate_relation": {"unique_id": "macro.dbt_constraints.truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.167858}, "macro.dbt_constraints.drop_relation": {"unique_id": "macro.dbt_constraints.drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.168021}, "macro.dbt_constraints.create_constraints": {"unique_id": "macro.dbt_constraints.create_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1667512712.0447528}, "macro.dbt_constraints.create_constraints_by_type": {"unique_id": "macro.dbt_constraints.create_constraints_by_type", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.status == \"pass\"\n            and res.node.config.materialized == \"test\"\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and res.node.config.where is none -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1768801}, "macro.dbt_constraints.table_columns_all_exist": {"unique_id": "macro.dbt_constraints.table_columns_all_exist", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list) -%}\n    {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n    {%- set tab_column_list = [] -%}\n    {%- for column in tab_Columns -%}\n        {{ tab_column_list.append(column.name|upper) }}\n    {%- endfor -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.17745}, "macro.dbt_constraints.column_list_matches": {"unique_id": "macro.dbt_constraints.column_list_matches", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.177974}, "macro.dbt_constraints.snowflake__create_primary_key": {"unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.182198}, "macro.dbt_constraints.snowflake__create_unique_key": {"unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1831129}, "macro.dbt_constraints.snowflake__create_foreign_key": {"unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.18447}, "macro.dbt_constraints.snowflake__create_not_null": {"unique_id": "macro.dbt_constraints.snowflake__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.185361}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1868181}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1876638}, "macro.dbt_constraints.snowflake__have_references_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n            and t.privilege_type = 'REFERENCES'\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.188284}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from {{table_relation.database}}.information_schema.tables t\n        join {{table_relation.database}}.information_schema.enabled_roles er on t.table_owner = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1889448}, "macro.dbt_constraints.redshift__create_primary_key": {"unique_id": "macro.dbt_constraints.redshift__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.193985}, "macro.dbt_constraints.redshift__create_unique_key": {"unique_id": "macro.dbt_constraints.redshift__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1952598}, "macro.dbt_constraints.redshift__create_not_null": {"unique_id": "macro.dbt_constraints.redshift__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.1955929}, "macro.dbt_constraints.redshift__create_foreign_key": {"unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.19721}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.19814}, "macro.dbt_constraints.redshift__foreign_key_exists": {"unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.199038}, "macro.dbt_constraints.redshift__have_references_priv": {"unique_id": "macro.dbt_constraints.redshift__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.19965}, "macro.dbt_constraints.redshift__have_ownership_priv": {"unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2002501}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2007911}, "macro.dbt_constraints.redshift__truncate_relation": {"unique_id": "macro.dbt_constraints.redshift__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.201014}, "macro.dbt_constraints.redshift__drop_relation": {"unique_id": "macro.dbt_constraints.redshift__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.201229}, "macro.dbt_constraints.oracle__create_primary_key": {"unique_id": "macro.dbt_constraints.oracle__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.205439}, "macro.dbt_constraints.oracle__create_unique_key": {"unique_id": "macro.dbt_constraints.oracle__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.206728}, "macro.dbt_constraints.oracle__create_foreign_key": {"unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.208354}, "macro.dbt_constraints.oracle__create_not_null": {"unique_id": "macro.dbt_constraints.oracle__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2092512}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.210158}, "macro.dbt_constraints.oracle__foreign_key_exists": {"unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2110531}, "macro.dbt_constraints.oracle__have_references_priv": {"unique_id": "macro.dbt_constraints.oracle__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.211182}, "macro.dbt_constraints.oracle__have_ownership_priv": {"unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.211305}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = upper('{{relation.schema}}')\n            AND upper(cons.table_name) = upper('{{relation.identifier}}')\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE {{relation}} DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2115352}, "macro.dbt_constraints.oracle__truncate_relation": {"unique_id": "macro.dbt_constraints.oracle__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.211751}, "macro.dbt_constraints.oracle__drop_relation": {"unique_id": "macro.dbt_constraints.oracle__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2119648}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.214696}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2155929}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2180102}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.219058}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.220618}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.221357}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2219799}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.222721}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.224271}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2269928}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2284522}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.233133}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2339652}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2350562}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2354171}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.23706}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.237278}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.23766}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.237848}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2380118}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.239007}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.240576}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.241493}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.241932}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2441752}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.244559}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2457159}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.246237}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.246583}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.246877}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.247007}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.247305}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2474399}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.247753}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.247884}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.252922}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.253241}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.253365}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.253651}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.253761}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2541702}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2542431}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2543092}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.254377}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.254532}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2545989}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.254667}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.254734}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.25534}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.255522}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2557042}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2558458}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.25599}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.256323}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2564218}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.256516}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.256672}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.257015}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.257086}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2571561}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.25723}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2572968}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.257361}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.257609}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.258068}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.258265}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.258466}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.259594}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.260309}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2612228}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.261508}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.262096}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.267033}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.267665}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2681448}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.269436}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2698188}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.269972}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.270609}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.271671}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2723148}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2728782}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2737129}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.274344}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.275328}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.27632}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.277335}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2776399}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2782028}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2793028}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.279907}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.281056}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.281486}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.282685}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2847419}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.285446}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.286657}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.287692}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.28797}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.288702}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.289064}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.290255}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2906828}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.292052}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2925062}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2930171}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.29342}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2943842}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.295263}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.296182}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2975922}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.298097}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.2984}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.29917}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.300333}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.301396}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.301677}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.30212}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3026009}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.303398}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.304203}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.305069}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.305888}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.306753}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.307629}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3091898}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.310035}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.310954}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3116102}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3123999}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.313696}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.31407}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.314867}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.315657}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3163269}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.317204}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3179882}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.32181}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.325147}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.325666}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3267589}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3277178}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3282251}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.329938}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3311949}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.333822}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3347259}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3353522}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.336054}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/algorand-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667512710.3376472}}, "docs": {"algorand_models.decimals": {"unique_id": "algorand_models.decimals", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/decimals.md", "original_file_path": "models/descriptions/decimals.md", "name": "decimals", "block_contents": "The number of decimals for the asset"}, "algorand_models.intra": {"unique_id": "algorand_models.intra", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/intra.md", "original_file_path": "models/descriptions/intra.md", "name": "intra", "block_contents": "Transaction # into the block where this transaction was confirmed"}, "algorand_models.sk": {"unique_id": "algorand_models.sk", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/sk.md", "original_file_path": "models/descriptions/sk.md", "name": "sk", "block_contents": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables"}, "algorand_models.tx_id": {"unique_id": "algorand_models.tx_id", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "An identifier tied to a transaction and its inner transactions"}, "algorand_models.asset_name": {"unique_id": "algorand_models.asset_name", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/asset_name.md", "original_file_path": "models/descriptions/asset_name.md", "name": "asset_name", "block_contents": "Name associated with the asset"}, "algorand_models.tx_sender": {"unique_id": "algorand_models.tx_sender", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_sender.md", "original_file_path": "models/descriptions/tx_sender.md", "name": "tx_sender", "block_contents": "Address of the wallet creating the transaction"}, "algorand_models.app_id": {"unique_id": "algorand_models.app_id", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/app_id.md", "original_file_path": "models/descriptions/app_id.md", "name": "app_id", "block_contents": "ID of the application"}, "algorand_models.block_date": {"unique_id": "algorand_models.block_date", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/block_date.md", "original_file_path": "models/descriptions/block_date.md", "name": "block_date", "block_contents": "Date of block minting(without a timezone)"}, "algorand_models.asset_id": {"unique_id": "algorand_models.asset_id", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/asset_id.md", "original_file_path": "models/descriptions/asset_id.md", "name": "asset_id", "block_contents": "ID associated with the asset"}, "algorand_models.genesis_hash": {"unique_id": "algorand_models.genesis_hash", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/genesis_hash.md", "original_file_path": "models/descriptions/genesis_hash.md", "name": "genesis_hash", "block_contents": "The hash of the genesis block of the network for which the transaction is valid"}, "algorand_models.tx_type_name": {"unique_id": "algorand_models.tx_type_name", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_type_name.md", "original_file_path": "models/descriptions/tx_type_name.md", "name": "tx_type_name", "block_contents": "Transaction type name"}, "algorand_models.tx_group_id": {"unique_id": "algorand_models.tx_group_id", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_group_id.md", "original_file_path": "models/descriptions/tx_group_id.md", "name": "tx_group_id", "block_contents": "Transaction group ID, can be NULL. Exists when a group of transactions are tied together"}, "algorand_models.tx_type": {"unique_id": "algorand_models.tx_type", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_type.md", "original_file_path": "models/descriptions/tx_type.md", "name": "tx_type", "block_contents": "Number associated with transaction type"}, "algorand_models.address": {"unique_id": "algorand_models.address", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "name": "address", "block_contents": "The account public key"}, "algorand_models.extra": {"unique_id": "algorand_models.extra", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/extra.md", "original_file_path": "models/descriptions/extra.md", "name": "extra", "block_contents": "Extra json associated with transaction"}, "algorand_models.fee": {"unique_id": "algorand_models.fee", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/fee.md", "original_file_path": "models/descriptions/fee.md", "name": "fee", "block_contents": "Fee associated with the transaction, in ALGOs"}, "algorand_models.block_id": {"unique_id": "algorand_models.block_id", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "ID of the confirmed block"}, "algorand_models.tx_message": {"unique_id": "algorand_models.tx_message", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/tx_message.md", "original_file_path": "models/descriptions/tx_message.md", "name": "tx_message", "block_contents": "Encoded JSON message associated with the transaction"}, "algorand_models.inner_tx": {"unique_id": "algorand_models.inner_tx", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/inner_tx.md", "original_file_path": "models/descriptions/inner_tx.md", "name": "inner_tx", "block_contents": "A boolean true or false on whether or not this transaction has a parent transaction. The TX_ID will be the same as the parent transaction but will have it's own intra"}, "algorand_models.block_timestamp": {"unique_id": "algorand_models.block_timestamp", "package_name": "algorand_models", "root_path": "/Users/ericlaurello/git/algorand-models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "Timestamp of block minting(without a timezone)"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.algorand_models.core__ez_price_pool_balances": ["model.algorand_models.silver__price_pool_balances"], "model.algorand_models.core__ez_transaction_asset_freeze": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__ez_transaction_application_call": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__fact_daily_balances": ["model.algorand_models.core__dim_account", "model.algorand_models.silver__daily_balances"], "model.algorand_models.core__ez_transfer": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__ez_transaction_key_registration": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__ez_transaction_asset_configuration": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__ez_price_swap": ["model.algorand_models.core__dim_asset", "model.algorand_models.silver__price_swap"], "model.algorand_models.core__ez_transaction_payment": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.core__dim_label": ["model.algorand_models.silver__pool_addresses", "source.algorand_models.crosschain.address_labels"], "model.algorand_models.core__ez_transaction_asset_transfer": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction"], "model.algorand_models.nft__ez_nft_sales": ["model.algorand_models.core__dim_account", "model.algorand_models.nft__ez_nft_asset", "model.algorand_models.nft__fact_nft_sales"], "model.algorand_models.bronze__transaction": ["source.algorand_models.algorand.TXN"], "model.algorand_models.bronze__application": ["source.algorand_models.algorand.APP"], "model.algorand_models.bronze__account": ["source.algorand_models.algorand.ACCOUNT"], "model.algorand_models.bronze__block": ["source.algorand_models.algorand.BLOCK_HEADER"], "model.algorand_models.bronze__account_asset": ["source.algorand_models.algorand.ACCOUNT_ASSET"], "model.algorand_models.bronze__account_application": ["source.algorand_models.algorand.ACCOUNT_APP"], "model.algorand_models.bronze__asset": ["source.algorand_models.algorand.ASSET"], "model.algorand_models.silver__transaction_reward": ["model.algorand_models.silver__indexer_tx"], "model.algorand_models.silver__swaps_wagmiswap_dex": ["model.algorand_models.silver__application", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__asset": ["model.algorand_models.bronze__asset", "model.algorand_models.silver__asset_config", "model.algorand_models.silver__nft_metadata_fifa", "model.algorand_models.silver__transaction", "source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827"], "model.algorand_models.silver__pool_addresses": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__swap"], "model.algorand_models.silver__swaps_algofi_dex": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__nft_sales_nftdomains": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__transaction_participation": ["model.algorand_models.silver__account", "source.algorand_models.algorand.TXN_PARTICIPATION"], "model.algorand_models.silver__hourly_pool_balances": ["model.algorand_models.silver__account", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction_close", "model.algorand_models.silver__transaction_reward", "source.algorand_models.shared.hours"], "model.algorand_models.silver__account": ["model.algorand_models.bronze__account"], "model.algorand_models.silver__nft_sales_algoxnft": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__nft_atomic_swaps": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__account_asset": ["model.algorand_models.bronze__account_asset", "model.algorand_models.silver__account"], "model.algorand_models.silver__nft_sales_octorand": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__block": ["model.algorand_models.bronze__block"], "model.algorand_models.silver__indexer_tx": ["source.algorand_models.algorand_db_external.algorand_indexer_tx", "source.algorand_models.algorand_db_external.algorand_indexer_tx"], "model.algorand_models.silver__daily_balances": ["model.algorand_models.silver__account", "model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction_close", "model.algorand_models.silver__transaction_reward", "source.algorand_models.shared.hours"], "model.algorand_models.silver__swaps_humble_swap_dex": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__swaps_pactfi_dex": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__transaction": ["model.algorand_models.bronze__transaction", "model.algorand_models.bronze__transaction"], "model.algorand_models.silver__price_swap": ["model.algorand_models.silver__asset", "model.algorand_models.silver__block", "model.algorand_models.silver__swap", "source.algorand_models.shared.hours"], "model.algorand_models.silver__nft_sales_rand_gallery": ["model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__application": ["model.algorand_models.bronze__application"], "model.algorand_models.silver__asset_config": ["model.algorand_models.silver__transaction"], "model.algorand_models.silver__swaps_tinyman_dex": ["model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__swaps_fxdx_dex": ["model.algorand_models.silver__transaction"], "model.algorand_models.silver__swap": ["model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_fxdx_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_wagmiswap_dex"], "model.algorand_models.silver__price_pool_balances": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__pool_addresses", "source.algorand_models.shared.prices_v2"], "model.algorand_models.silver__transaction_close": ["model.algorand_models.silver__transaction"], "model.algorand_models.silver__nft_sales_shufl": ["model.algorand_models.silver__asset", "model.algorand_models.silver__transaction"], "model.algorand_models.silver__get_tx": ["model.algorand_models.core__fact_transaction", "model.algorand_models.silver__indexer_tx"], "model.algorand_models.silver__nft_sales_ab2_gallery": ["model.algorand_models.silver__asset", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "test.algorand_models.silver__prices_swap__block_hour_date_gap": ["model.algorand_models.silver__price_swap"], "test.algorand_models.silver__block__block_id-assert_no_gap": ["model.algorand_models.silver__block"], "test.algorand_models.silver__transaction__intra-assert_no_gap": ["model.algorand_models.silver__transaction"], "operation.algorand_models.algorand_models-on-run-start-0": [], "operation.algorand_models.algorand_models-on-run-start-1": [], "operation.algorand_models.algorand_models-on-run-start-2": [], "operation.algorand_models.algorand_models-on-run-start-3": [], "operation.algorand_models.algorand_models-on-run-start-4": [], "operation.algorand_models.algorand_models-on-run-start-5": ["model.algorand_models.silver__get_tx"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.algorand_models.not_null_core__ez_price_pool_balances_BLOCK_HOUR.65a4ec01d8": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1.3c6fd823f7": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_ID.5a0cecfca4": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_NAME.e93f9d7baa": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_PRICE_USD.689b0f64d6": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_ALGO_BALANCE.130ef67b2f": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.44bd5b86c2": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances_POOL_ADDRESS.61c9eb9923": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_price_pool_balances__ALGO_PRICE.f3167e2732": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id.4f2d2b0e2d": ["model.algorand_models.core__ez_price_pool_balances"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.a62c68390e": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_ID.27fc8f0cb1": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INTRA.2278cbbd31": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_ID.3932262287": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INNER_TX.a635918c75": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_SENDER.019c272168": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_FEE.6d31e3f39f": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ID.21ae7a0602": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.0a461165fa": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE.d8cf8c4979": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.5abc0fc1a3": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.20077bd4f5": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_EXTRA.9621b2f384": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA.a1833e16f8": ["model.algorand_models.core__ez_transaction_asset_freeze"], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.94c35fbf2d": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1.0ce9eebbe0": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_DATE.cf26c9d438": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_ID.6d9b55a668": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_INTRA.d256c01e4f": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_ID.3616c17fc3": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_INNER_TX.f95bd93a9f": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_SENDER.d2bc5a1cce": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_FEE.9b521a0379": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_APP_ID.a6a5913a77": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE.7e9703e869": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE_NAME.b30d6e4b04": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_MESSAGE.9973fee51d": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_application_call_EXTRA.ba946720e6": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA.18235d8ccb": ["model.algorand_models.core__ez_transaction_application_call"], "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.627c5b210d": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_ID.b9a991457b": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_INTRA.d559a2d263": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_TX_ID.ec0e28e5c2": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_INNER_TX.3a03467a9b": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_TX_SENDER.c08e3a40fe": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_FEE.5081637300": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_ASSET_ID.545b42d135": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE.a804c933c4": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE_NAME.75fffa9544": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_TX_MESSAGE.383c86dc2a": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__ez_transaction_payment_EXTRA.129fdd057a": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA.0cb7216682": ["model.algorand_models.core__ez_transaction_payment"], "test.algorand_models.not_null_core__dim_label_BLOCKCHAIN.5bd95a5803": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_CREATOR.a858abbf25": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_LABEL_TYPE.758edac4ce": ["model.algorand_models.core__dim_label"], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.640c0c4f19": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_LABEL_SUBTYPE.140d145fa6": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_LABEL.dc39ed6300": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_ADDRESS_NAME.33b678595b": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__dim_label_ADDRESS.a141e9c919": ["model.algorand_models.core__dim_label"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58.bcab1cbb59": ["model.algorand_models.core__dim_label"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS.9871cdad51": ["model.algorand_models.core__dim_label"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.96a5309d26": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_ID.ae05f3e428": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INTRA.14b27eb0ce": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_ID.faa56917a7": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INNER_TX.669908444f": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_SENDER.59fbcd6150": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_FEE.712f6ed3e2": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_ASSET_ID.685f8a3e48": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.27575a6ef8": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.f1f23cc5c8": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_EXTRA.1dca57af7a": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA.a9d7b14e3e": ["model.algorand_models.core__ez_transaction_asset_transfer"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.624e3c4758": ["model.algorand_models.core__fact_daily_balances"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS.9cd8d844e3": ["model.algorand_models.core__fact_daily_balances"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE.afc6a97495": ["model.algorand_models.core__fact_daily_balances"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE.f710557cee": ["model.algorand_models.core__fact_daily_balances"], "test.algorand_models.dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.6941e91d8d": ["model.algorand_models.core__fact_daily_balances"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_daily_balances"], "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.92762c6312": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_ID.19f0a15e9e": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_INTRA.7b65e7ec41": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_ID.879155e33a": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_INNER_TX.9352a97397": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_SENDER.093ce5da35": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_FEE.1ae7e72b6c": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE.96ff0f746f": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.94428a1165": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_MESSAGE.48a1737633": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transaction_key_registration_EXTRA.bfcdc9f6ec": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA.eb90862a91": ["model.algorand_models.core__ez_transaction_key_registration"], "test.algorand_models.not_null_core__ez_transfer_BLOCK_TIMESTAMP.ef2a7d36ac": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1.8a5535a280": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_BLOCK_ID.930114da3a": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_INTRA.d96a3944c2": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_TX_ID.aa1eb10d50": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_INNER_TX.42db758402": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_TX_SENDER.19693fb239": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_ASSET_SENDER.0c1f69edfb": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER.77711f5f81": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_ASSET_ID.cb2d007069": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_AMOUNT.50f4d0465d": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_FEE.0f9ecf7bb9": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_TX_TYPE.be39a785a6": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_TX_TYPE_NAME.5724af2df7": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_TX_MESSAGE.3220458a5c": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transfer_EXTRA.d69b2648eb": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA.cef2fce936": ["model.algorand_models.core__ez_transfer"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP.952529712f": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_ID.a0db6509e2": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INTRA.eb034641c6": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_ID.d0a3dc1632": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INNER_TX.dbe256feb6": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_SENDER.fc0593c12a": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_FEE.25dda7b42f": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE.d9cac02343": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.eb74c254f8": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.140f0d3e10": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_EXTRA.a2cf14d230": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA.2f6e96a0ed": ["model.algorand_models.core__ez_transaction_asset_configuration"], "test.algorand_models.not_null_core__ez_price_swap_BLOCK_HOUR.27a724c596": ["model.algorand_models.core__ez_price_swap"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1.e1a5eac5b1": ["model.algorand_models.core__ez_price_swap"], "test.algorand_models.not_null_core__ez_price_swap_ASSET_ID.832f2300ae": ["model.algorand_models.core__ez_price_swap"], "test.algorand_models.not_null_core__ez_price_swap_PRICE_USD.1d04499bd5": ["model.algorand_models.core__ez_price_swap"], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id.4130f5bb19": ["model.algorand_models.core__ez_price_swap"], "test.algorand_models.not_null_silver__account_asset_ADDRESS.b67595512f": ["model.algorand_models.silver__account_asset"], "test.algorand_models.not_null_silver__account_asset_ASSET_ID.8d8aa00446": ["model.algorand_models.silver__account_asset"], "test.algorand_models.not_null_silver__account_asset_AMOUNT.01f350b758": ["model.algorand_models.silver__account_asset"], "test.algorand_models.not_null_silver__account_asset_CREATED_AT.7085dd0081": ["model.algorand_models.silver__account_asset"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID.ec717582cd": ["model.algorand_models.silver__account_asset"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_BLOCK_ID.83c4d84d2a": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_intra.9037966b0a": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_tx_group_id.473522018c": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_app_id.65856a04b6": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swapper.dfebe8bf0c": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58.23a2be55f0": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.854390378d": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_amount.2201d6aa4c": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_pool_address.b464b1cd22": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58.028cc94f2a": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.143b912223": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_amount.0dd26e28d8": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra.6de7c5970b": ["model.algorand_models.silver__swaps_humble_swap_dex"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS.08dbd9f043": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.not_null_silver__daily_balances_ADDRESS.2502493350": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE.f372e00094": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.not_null_silver__daily_balances_DATE.85b329c0c5": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1.15ad81f7fc": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE.dc2067bdbd": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.not_null_silver__daily_balances_BALANCE.a2177bc39f": ["model.algorand_models.silver__daily_balances"], "test.algorand_models.not_null_silver__indexer_tx_TX_ID.a94096f4f5": ["model.algorand_models.silver__indexer_tx"], "test.algorand_models.not_null_silver__indexer_tx_ACCOUNT_ID.66a8a1eb08": ["model.algorand_models.silver__indexer_tx"], "test.algorand_models.not_null_silver__indexer_tx_BLOCK_ID.30c7db10d4": ["model.algorand_models.silver__indexer_tx"], "test.algorand_models.not_null_silver__indexer_tx__INSERTED_TIMESTAMP.b6b6dc7476": ["model.algorand_models.silver__indexer_tx"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id.d7a3a79f7c": ["model.algorand_models.silver__indexer_tx"], "test.algorand_models.not_null_silver__block_BLOCK_ID.a83167397e": ["model.algorand_models.silver__block"], "test.algorand_models.unique_silver__block_BLOCK_ID.01de2ad4fc": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_BLOCK_TIMESTAMP.7583c96190": ["model.algorand_models.silver__block"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1.f44d7c8cee": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_BLOCK_DATE.c1926ed12a": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_REWARDS_LEVEL.0a8d0a67f5": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_NETWORK.6166f81c40": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_GENESIS_HASH.6d511c76e5": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__block_PREV_BLOCK_HASH.6728550630": ["model.algorand_models.silver__block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.2b0f250b3e": ["model.algorand_models.silver__block"], "test.algorand_models.not_null_silver__nft_sales_octorand_BLOCK_ID.ef8c73a020": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__nft_sales_octorand_TX_GROUP_ID.d7a0c0b8cd": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__nft_sales_octorand_PURCHASER.f812ed492a": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__nft_sales_octorand_NFT_ASSET_ID.d630b4b99e": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.3095bef650": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.e21a706379": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id.bbd3ab6c2e": ["model.algorand_models.silver__nft_sales_octorand"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_BLOCK_ID.e7a45d5997": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_intra.5506b0f43c": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_tx_group_id.62967a4eff": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swapper.393df11234": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58.6a3cbd4b8d": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_asset_id.2dc309f64f": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_amount.19a7b3a19f": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_pool_address.ecd7ff2842": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58.d85e6df9cf": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_asset_id.524cb829ba": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_amount.45d1647f55": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra.8ccc491a92": ["model.algorand_models.silver__swaps_pactfi_dex"], "test.algorand_models.not_null_silver__transaction_BLOCK_ID.73847273f7": ["model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__transaction_INTRA.23b710b3ad": ["model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__transaction_TX_ID.9e8d1f1573": ["model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__transaction_INNER_TX.c48b59c073": ["model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__transaction_TX_TYPE.cfe523843a": ["model.algorand_models.silver__transaction"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA.f4b59b8edf": ["model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__price_swap_BLOCK_HOUR.6349e4ca1c": ["model.algorand_models.silver__price_swap"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1.682631679a": ["model.algorand_models.silver__price_swap"], "test.algorand_models.not_null_silver__price_swap_ASSET_ID.b7bb14bef1": ["model.algorand_models.silver__price_swap"], "test.algorand_models.not_null_silver__price_swap_PRICE_USD.8aa1fa2d31": ["model.algorand_models.silver__price_swap"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id.92926e4bfc": ["model.algorand_models.silver__price_swap"], "test.algorand_models.not_null_silver__application_APP_ID.08ff7e7ae1": ["model.algorand_models.silver__application"], "test.algorand_models.unique_silver__application_APP_ID.f820ae939f": ["model.algorand_models.silver__application"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_PARAMS.1c9bd89cee": ["model.algorand_models.silver__application"], "test.algorand_models.not_null_silver__application_APP_CLOSED.6fe9e79b99": ["model.algorand_models.silver__application"], "test.algorand_models.not_null_silver__application_CREATOR_ADDRESS.04da7d360f": ["model.algorand_models.silver__application"], "test.algorand_models.not_null_silver__application_CREATED_AT.bb24db5ca8": ["model.algorand_models.silver__application"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT.c58fb3849d": ["model.algorand_models.silver__application"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_BLOCK_ID.c5b61b87d4": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.a326ed7248": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_PURCHASER.306d4a35eb": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.76b7258306": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.19e7255ea0": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.2d9c0c44df": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id.f14d68fdfa": ["model.algorand_models.silver__nft_sales_rand_gallery"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.b4cbd7d657": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_intra.3d9c52b43b": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_tx_group_id.e7e94ff81a": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swapper.6ae46af8a3": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58.dc85bcb0f6": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.67b2dff21e": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_amount.e884b5a4e3": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_pool_address.63760c77a3": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58.fc9934fcfd": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.6fa1945ee9": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_amount.d10ba0bda6": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra.fdd99e35bb": ["model.algorand_models.silver__swaps_wagmiswap_dex"], "test.algorand_models.not_null_silver__transaction_reward_BLOCK_ID.859a62bbbb": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.not_null_silver__transaction_reward_INTRA.cd79743d98": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.not_null_silver__transaction_reward_TX_ID.8194087f63": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.not_null_silver__transaction_reward_ACCOUNT.1863bbe76a": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.not_null_silver__transaction_reward_AMOUNT.24f4563f6b": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT.0090e98c54": ["model.algorand_models.silver__transaction_reward"], "test.algorand_models.not_null_silver__swaps_algofi_dex_BLOCK_ID.98dd0bdc0a": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_intra.98d93ae8b7": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_tx_group_id.3d5dd1ff0d": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_swapper.421346ea97": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58.a6ac153861": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_asset_id.c1a6419420": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_amount.3d25d19044": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_pool_address.67d3750512": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58.93df58b5bd": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_asset_id.dbe640dcb6": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_amount.44952a511b": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra.f354df7981": ["model.algorand_models.silver__swaps_algofi_dex"], "test.algorand_models.not_null_silver__pool_addresses_BLOCKCHAIN.8fd4ef2a99": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_CREATOR.0ff3d70081": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_LABEL_TYPE.d90a726e77": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.4f780a52a1": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_LABEL_SUBTYPE.6aebecdf34": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_LABEL.5c3688625f": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_ADDRESS_NAME.8c7c022029": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__pool_addresses_ADDRESS.d99ec0b796": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58.d5b2c4aaed": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS.31edac2886": ["model.algorand_models.silver__pool_addresses"], "test.algorand_models.not_null_silver__asset_ASSET_ID.e971a1fdb2": ["model.algorand_models.silver__asset"], "test.algorand_models.unique_silver__asset_ASSET_ID.0836fe2d9c": ["model.algorand_models.silver__asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY.bb6db25b12": ["model.algorand_models.silver__asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.33c56fa891": ["model.algorand_models.silver__asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.f605f51959": ["model.algorand_models.silver__asset"], "test.algorand_models.not_null_silver__asset_ASSET_DELETED.f24d24907a": ["model.algorand_models.silver__asset"], "test.algorand_models.not_null_silver__asset_CREATOR_ADDRESS.dc8aa21238": ["model.algorand_models.silver__asset"], "test.algorand_models.not_null_silver__hourly_pool_balances_ADDRESS.a2de2c4657": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.not_null_silver__hourly_pool_balances_DATE.709c6a9e62": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1.f554545e46": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.not_null_silver__hourly_pool_balances_ASSET_ID.dfce0aa5dc": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.not_null_silver__hourly_pool_balances_BALANCE.a6c2070cca": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID.f70e558863": ["model.algorand_models.silver__hourly_pool_balances"], "test.algorand_models.not_null_silver__transaction_participation_intra.945c791c91": ["model.algorand_models.silver__transaction_participation"], "test.algorand_models.not_null_silver__transaction_participation_BLOCK_ID.1aea6e628b": ["model.algorand_models.silver__transaction_participation"], "test.algorand_models.not_null_silver__transaction_participation_ADDRESS.672784f40f": ["model.algorand_models.silver__transaction_participation"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA.c01379657f": ["model.algorand_models.silver__transaction_participation"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_BLOCK_ID.8949c67df2": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.409efff1ad": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_PURCHASER.3a00107c53": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.e65675dda5": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.e8aa0fb38a": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.5613eac93a": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id.fd9462bf3f": ["model.algorand_models.silver__nft_sales_nftdomains"], "test.algorand_models.not_null_silver__nft_atomic_swaps_BLOCK_ID.07727af353": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_atomic_swaps_TX_GROUP_ID.2eefef9533": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_atomic_swaps_PURCHASER.0a3bf64aac": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.04d59374ba": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.fb805c0885": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.488d456c48": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id.a6448d1fe4": ["model.algorand_models.silver__nft_atomic_swaps"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_BLOCK_ID.f33e57838b": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.73c6955f60": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_PURCHASER.3575feb666": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.9ed59f40e0": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.340404e53b": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.1a9660483f": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id.f1521defca": ["model.algorand_models.silver__nft_sales_algoxnft"], "test.algorand_models.not_null_silver__account_ADDRESS.d1e28d6819": ["model.algorand_models.silver__account"], "test.algorand_models.unique_silver__account_ADDRESS.9ceb706a00": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__account_ADDRESS_RAW.d08a2402e7": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__account_ACCOUNT_CLOSED.13a3468e19": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_BASE.231ac621af": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_TOTAL.41323d2d55": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__account_NON_ZERO_BALANCE.778794d321": ["model.algorand_models.silver__account"], "test.algorand_models.not_null_silver__nft_sales_shufl_BLOCK_ID.b89e2e75aa": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__nft_sales_shufl_TX_GROUP_ID.2ce22b8fe9": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__nft_sales_shufl_PURCHASER.477ed9b890": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__nft_sales_shufl_NFT_ASSET_ID.b4bc9df3ac": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.3c4e61432e": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.1a9765f957": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id.54653b8ac1": ["model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.not_null_silver__transaction_close_BLOCK_ID.72301b1c99": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__transaction_close_INTRA.d88c0ad995": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__transaction_close_TX_ID.c035f36d16": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__transaction_close_ACCOUNT.98d8989fd1": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__transaction_close_ASSET_ID.cde2c35534": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__transaction_close_AMOUNT.aff2c6ec1e": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID.8abe5804e4": ["model.algorand_models.silver__transaction_close"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.ddf896bbb4": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.34cd6f2f48": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_PURCHASER.9cfec0ecb7": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.0d7ea781b9": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.0bee5b1c62": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.d294567592": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id.ec0bf20e85": ["model.algorand_models.silver__nft_sales_ab2_gallery"], "test.algorand_models.not_null_silver__asset_config_ASSET_ID.d90f759643": ["model.algorand_models.silver__asset_config"], "test.algorand_models.not_null_silver__asset_config_ASSET_NAME.594c42ab0e": ["model.algorand_models.silver__asset_config"], "test.algorand_models.not_null_silver__asset_config_ASSET_AMOUNT.4c0d85712c": ["model.algorand_models.silver__asset_config"], "test.algorand_models.not_null_silver__asset_config_DECIMALS.c787fdb322": ["model.algorand_models.silver__asset_config"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id.e66d602a24": ["model.algorand_models.silver__asset_config"], "test.algorand_models.not_null_silver__swap_SWAP_PROGRAM.093a37c7af": ["model.algorand_models.silver__swap"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_BLOCK_ID.f0efa050b4": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_intra.16f1674be2": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_tx_group_id.7f2744d7dd": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swapper.2d27267b79": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58.cf44f55bd6": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_asset_id.d7466f1e28": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_amount.c88e18c611": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_pool_address.53bb04f4f4": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58.ff1238dd52": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_asset_id.292fe1d4c2": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_amount.7e4735c72b": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra.fedf3d48f6": ["model.algorand_models.silver__swaps_fxdx_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_BLOCK_ID.1e44ce613e": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_intra.7b7197ed1b": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_tx_group_id.6ae5f40265": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swapper.ca8fd72431": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58.40f8639ba8": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_asset_id.2d035b5768": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_amount.c0e1a7e5b7": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_pool_address.fb8b0b7c93": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58.4ed9db3298": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_asset_id.ec20e42a15": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_amount.d35eabbe84": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra.ad8f68ce40": ["model.algorand_models.silver__swaps_tinyman_dex"], "test.algorand_models.not_null_silver__price_pool_balances_BLOCK_HOUR.b229c9d1cb": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1.723d9639e7": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances_ASSET_NAME.8638554ffd": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances_PRICE_USD.989d9e0691": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances_ALGO_BALANCE.330ccc3fd1": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances_NON_ALGO_BALANCE.e564fff9c3": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances_POOL_ADDRESS.82b2456515": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.not_null_silver__price_pool_balances__ALGO_PRICE.05d9bcd5f1": ["model.algorand_models.silver__price_pool_balances"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id.d2c284fb3d": ["model.algorand_models.silver__price_pool_balances"], "model.algorand_models.silver__nft_metadata_fifa": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.a21a1dc6e4": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.87699066ea": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_URL.a06be7f249": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_METADATA_URL.8525cb7326": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL.d3768c6e10": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.84e7e04331": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_DESCRIPTION.40f8eecd76": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL.e577285b3a": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.9b67b3e3f4": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE.fcba710397": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.7094abd9d6": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.d85d2fe756": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_NAME.11ed0ba6ab": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_REKEY_CHECKED.5a1c5c6d17": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_APPLICATION_ID.ef32827ab4": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NUMBER.65dd8aaf4d": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NAME.8e5d5343a8": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_ITEM_NO.e5f37c8f6c": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_EDITIONS.48391d4fa0": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_RARITY.1dcb645879": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.c6b874a02c": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_YEAR.378e8b1fb4": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_HOST.5d08e9e7dd": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1.69b7e35594": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.06fdef440a": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2.1367680b0e": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.d12a423579": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_EVENT_TYPE.634752ab1d": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_PLAYER.b6e9fd0b78": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_silver__nft_metadata_fifa_MINUTE.35761f211a": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id.1c7a37241c": ["model.algorand_models.silver__nft_metadata_fifa"], "model.algorand_models.nft__ez_nft_asset": ["model.algorand_models.core__dim_asset"], "model.algorand_models.nft__ez_nft_metadata_fifa": ["model.algorand_models.silver__nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_asset_NFT_ASSET_ID.86514aa937": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.unique_nft__ez_nft_asset_NFT_ASSET_ID.1adaba1b87": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY.7acf4dc964": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS.bc568d9753": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.not_null_nft__ez_nft_asset_CREATOR_ADDRESS.7d740bd1ff": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.not_null_nft__ez_nft_asset_ASSET_DELETED.d8130b69d3": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL.b416d7fc89": ["model.algorand_models.nft__ez_nft_asset"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.ad1b4d5c73": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.551f60771b": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_URL.33c8351954": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_METADATA_URL.28ef305510": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.fe11e31f2a": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.781bc07591": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.aa4a795e44": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.995351b2f9": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.45c86ef1d5": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE.d32c5a5fe3": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.214260d3ac": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.63ce565ce9": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NAME.5ee55076b3": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.af7d8c3f61": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.4a34860615": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.0f4561ebd7": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NAME.05b98ecda0": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ITEM_NO.389fd3ac7c": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EDITIONS.ce0884acf4": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_RARITY.7ba99a6ecb": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.63e5846b20": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_YEAR.52d387195c": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_HOST.f1909d4665": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.c18c6c03b5": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.d762e17a01": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.ddeec6ddb4": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.852bd0042b": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.eb154be284": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_PLAYER.161cd08a3b": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_MINUTE.0d99862806": ["model.algorand_models.nft__ez_nft_metadata_fifa"], "model.algorand_models.silver__nft_sales_fifa_collect": ["model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__nft_metadata_fifa", "model.algorand_models.silver__nft_metadata_fifa", "model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_BLOCK_ID.7d96c4aec0": ["model.algorand_models.silver__nft_sales_fifa_collect"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.0093025cc8": ["model.algorand_models.silver__nft_sales_fifa_collect"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_PURCHASER.83c13e8818": ["model.algorand_models.silver__nft_sales_fifa_collect"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.f7a5d3ee2a": ["model.algorand_models.silver__nft_sales_fifa_collect"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.6fb6529272": ["model.algorand_models.silver__nft_sales_fifa_collect"], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id.9fa3b0dd33": ["model.algorand_models.silver__nft_sales_fifa_collect"], "model.algorand_models.core__fact_account_asset": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.silver__account", "model.algorand_models.silver__account_asset"], "model.algorand_models.core__fact_account_application": ["model.algorand_models.bronze__account_application", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block"], "model.algorand_models.core__fact_block": ["model.algorand_models.core__dim_block", "model.algorand_models.silver__block", "model.algorand_models.silver__transaction"], "model.algorand_models.core__fact_swap": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block", "model.algorand_models.silver__swap"], "model.algorand_models.core__dim_block": ["model.algorand_models.silver__block"], "model.algorand_models.core__dim_account": ["model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_wallet_type", "model.algorand_models.silver__account"], "model.algorand_models.core__fact_transaction_close": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block", "model.algorand_models.silver__transaction_close"], "model.algorand_models.core__dim_wallet_type": ["model.algorand_models.silver__account"], "model.algorand_models.core__fact_transaction_participation": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block", "model.algorand_models.silver__transaction_participation"], "model.algorand_models.core__dim_asset": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset", "model.algorand_models.silver__transaction"], "model.algorand_models.core__fact_transaction": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_transaction_type", "model.algorand_models.silver__transaction"], "model.algorand_models.core__dim_application": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block", "model.algorand_models.core__dim_block", "model.algorand_models.silver__application"], "model.algorand_models.core__dim_transaction_type": ["model.algorand_models.silver__transaction"], "model.algorand_models.core__fact_transaction_reward": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block", "model.algorand_models.silver__transaction_reward"], "model.algorand_models.core__fact_account_current_balance": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block", "model.algorand_models.silver__account"], "model.algorand_models.nft__fact_nft_sales": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_shufl"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ead921a8d": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_DIM_ACCOUNT_ID.ef7f5bee2c": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_ADDRESS.2fb62466a1": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_DIM_ASSET_ID.9ff76e60c9": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_ASSET_ID.3aea0c0135": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_AMOUNT.ef5fdc71d6": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT.597703be38": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_ASSET_ADDED_AT.c52060be1f": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED.6f72982717": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED.fcfe5adddb": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_ASSET_CLOSED.c1a67ef164": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.not_null_core__fact_account_asset_FROZEN.5e726af5b0": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ee00d0290": ["model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_account_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.716ceb98d9": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_DIM_ACCOUNT_ID.4897712a9a": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_ADDRESS.7984f5ac55": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_DIM_APPLICATION_ID.f02218a4a9": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.negative_one_core__fact_account_application_DIM_APPLICATION_ID.c71f32a635": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_APP_ID.cb34da215a": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_APP_INFO.a05149294e": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.1b562cd2bf": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.d9d0a3f46a": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.b223c523ef": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT.d188d4fbe6": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.cf5862e2d6": ["model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277": ["model.algorand_models.core__dim_application", "model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_application"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_application"], "test.algorand_models.not_null_core__fact_block_FACT_BLOCK_ID.27245331ae": ["model.algorand_models.core__fact_block"], "test.algorand_models.not_null_core__fact_block_BLOCK_ID.7a114f396c": ["model.algorand_models.core__fact_block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP.e29e19ead3": ["model.algorand_models.core__fact_block"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1.db0ac774cc": ["model.algorand_models.core__fact_block"], "test.algorand_models.negative_one_core__fact_block_DIM_BLOCK_ID.ce779fd4a4": ["model.algorand_models.core__fact_block"], "test.algorand_models.not_null_core__fact_block_TX_COUNT.a0b3964e1c": ["model.algorand_models.core__fact_block"], "test.algorand_models.not_null_core__fact_block_TX_SENDER_COUNT.5d9001e0b4": ["model.algorand_models.core__fact_block"], "test.algorand_models.not_null_core__fact_block_FEE_TOTAL.9bf05d0902": ["model.algorand_models.core__fact_block"], "test.algorand_models.dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.22d32fdac2": ["model.algorand_models.core__fact_block"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_block"], "test.algorand_models.not_null_core__fact_swap_FACT_SWAP_ID.c6313c3a69": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAP_PROGRAM.0bfa114632": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP.1f26576360": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1.5cbe20491e": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_INTRA.7936884abf": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_TX_GROUP_ID.e26c69edf1": ["model.algorand_models.core__fact_swap"], "test.algorand_models.negative_one_core__fact_swap_DIM_APPLICATION_ID.b8df602cbe": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAPPER.3cacb91aee": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58.cb5f3fc19d": ["model.algorand_models.core__fact_swap"], "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.b8db857362": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_ASSET_ID.d49bb1b100": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_AMOUNT.16330981ff": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_POOL_ADDRESS.2bf1473a6b": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58.2ee611d6c8": ["model.algorand_models.core__fact_swap"], "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.0bee8c4652": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAP_TO_ASSET_ID.658b1a948d": ["model.algorand_models.core__fact_swap"], "test.algorand_models.not_null_core__fact_swap_SWAP_TO_AMOUNT.1ac273aa3e": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.974f8a94cd": ["model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116": ["model.algorand_models.core__dim_application", "model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_swap"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": ["model.algorand_models.core__dim_block"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_REWARDS_LEVEL.b3731fc143": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_NETWORK.1d650e9ff8": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_GENESIS_HASH.ea4bdf6004": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_PREV_BLOCK_HASH.18da8805b1": ["model.algorand_models.core__dim_block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT.207627e194": ["model.algorand_models.core__dim_block"], "test.algorand_models.not_null_core__dim_block_HEADER.b259d18110": ["model.algorand_models.core__dim_block"], "test.algorand_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": ["model.algorand_models.core__dim_block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID.e4d582f3bb": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_ADDRESS.fe84bdbbfe": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_ACCOUNT_CLOSED.11c85e7078": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_BASE.c98ed50245": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.baccd253cc": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_NON_ZERO_BALANCE.0e3d02c2d7": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.95111c6779": ["model.algorand_models.core__dim_account"], "test.algorand_models.negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.3d2dd75ea1": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.3834bda56e": ["model.algorand_models.core__dim_account"], "test.algorand_models.not_null_core__dim_account_DIM_WALLET_TYPE_ID.bac483a8d4": ["model.algorand_models.core__dim_account"], "test.algorand_models.dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.4fb5a696cc": ["model.algorand_models.core__dim_account"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_wallet_type"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.ea4867a007": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_BLOCK_ID.e6f30ff6cf": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.603d62bc2a": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1.f5816be11a": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.not_null_core__fact_transaction_close_INTRA.417d3d7f9c": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.not_null_core__fact_transaction_close_TX_ID.4d13188268": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.not_null_core__fact_transaction_close_INNER_TX.011a756b37": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.ad91196091": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.not_null_core__fact_transaction_close_ADDRESS.f082cd3f49": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ASSET_ID.33c3ea10cc": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.a0bf2e76cb": ["model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_transaction_close"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID.7e8d572c2e": ["model.algorand_models.core__dim_wallet_type"], "test.algorand_models.dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID.87af0124fb": ["model.algorand_models.core__dim_wallet_type"], "test.algorand_models.not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.1d12b5dccd": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP.f4d8ce0744": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1.65011d7464": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.not_null_core__fact_transaction_participation_BLOCK_ID.e7248a39cb": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.d4efa93762": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.not_null_core__fact_transaction_participation_INTRA.2862c2e571": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.not_null_core__fact_transaction_participation_ADDRESS.c36ccaa6a5": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.ed8c3d095e": ["model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_participation"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID.a6df61746c": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_ASSET_ID.1b85e00ff9": ["model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY.1d083e31fe": ["model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL.878e90161e": ["model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS.b55eaa38a3": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_ASSET_DELETED.64e32068ca": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.9516f008fe": ["model.algorand_models.core__dim_asset"], "test.algorand_models.negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.f539a615ab": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_CREATOR_ADDRESS.4427e160a9": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.5b8c5924f0": ["model.algorand_models.core__dim_asset"], "test.algorand_models.negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.a12b4bde0e": ["model.algorand_models.core__dim_asset"], "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.d664058a76": ["model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.3b9b10292a": ["model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_asset"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID.ea4f7647a5": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_BLOCK_ID.2f8f97ffb1": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_BLOCK_ID.0b34bf4323": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_BLOCK_TIMESTAMP.3cadcd6f8f": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1.2acf53ad08": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_INTRA.f4226e7bbd": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_TX_ID.00dac6ae6c": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_INNER_TX.55f4626d23": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.2662d0b220": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.not_null_core__fact_transaction_TX_SENDER.1325477ced": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_ASSET_ID.07c0df61ff": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.c1db58e3cc": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.fd96045039": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER.c83e3e902e": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER.ecab52c07e": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID.b51ad78f87": ["model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa": ["model.algorand_models.core__dim_transaction_type", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID.e99cec695c": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_APP_ID.9fd6bedaba": ["model.algorand_models.core__dim_application"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS.371f4326c3": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_APP_CLOSED.12260b32bd": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.016d487909": ["model.algorand_models.core__dim_application"], "test.algorand_models.negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.7b5db3ddfe": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_CREATOR_ADDRESS.5fee087722": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.3aeb069ac2": ["model.algorand_models.core__dim_application"], "test.algorand_models.negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.c26d6cde09": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_CREATED_AT.075e7184cc": ["model.algorand_models.core__dim_application"], "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.ef42eaadd3": ["model.algorand_models.core__dim_application"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT.359a7deabb": ["model.algorand_models.core__dim_application"], "test.algorand_models.dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID.14b99b2559": ["model.algorand_models.core__dim_application"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7": ["model.algorand_models.core__dim_application", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd": ["model.algorand_models.core__dim_application", "model.algorand_models.core__dim_block"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.38d3e554ce": ["model.algorand_models.core__dim_transaction_type"], "test.algorand_models.dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.a3a8ac0e76": ["model.algorand_models.core__dim_transaction_type"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.3c93967a7c": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.4f76186f2c": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.12512b0d24": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.not_null_core__fact_transaction_reward_INTRA.677f4b2caa": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.not_null_core__fact_transaction_reward_TX_ID.2e0b99871d": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.df64eb3789": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.not_null_core__fact_transaction_reward_ADDRESS.5ea787acf8": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.986de25489": ["model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_transaction_reward"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.eacd2e86ea": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.47a074fbee": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.92360d53b4": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_ADDRESS.b651ef5fe3": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_BASE.64351dcc0f": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_TOTAL.e8833447bb": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_BALANCE.1d6fdeae7b": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float.781a65230e": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT.6c2db950e3": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_core__fact_account_current_balance_CREATED_AT.ca2f8550e1": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.acfd598d86": ["model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573": ["model.algorand_models.core__dim_account", "model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_account_current_balance"], "test.algorand_models.not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.d3847fb981": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_NFT_MARKETPLACE.a92dbc63d8": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP.493cf3464a": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1.5d72d7cbeb": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.f02b7cb0a7": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_TX_GROUP_ID.af34d7fde1": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_PURCHASER.41c5166c2e": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.c4b3e5f8ab": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_NFT_ASSET_ID.58d08fc598": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.4083c668bd": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.7e788a19ab": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.6e09fd033e": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID.8fc2e94dca": ["model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb": ["model.algorand_models.core__dim_block", "model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664": ["model.algorand_models.core__dim_account", "model.algorand_models.nft__fact_nft_sales"], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35": ["model.algorand_models.core__dim_asset", "model.algorand_models.nft__fact_nft_sales"], "source.algorand_models.shared.prices": [], "source.algorand_models.shared.prices_v2": [], "source.algorand_models.shared.cmc_assets": [], "source.algorand_models.shared.market_asset_metadata": [], "source.algorand_models.shared.coingecko_prices": [], "source.algorand_models.shared.hours": [], "source.algorand_models.shared.udm_address_labels": [], "source.algorand_models.shared.udm_address_labels_new": [], "source.algorand_models.shared.udm_address_tags": [], "source.algorand_models.shared.udm_balances": [], "source.algorand_models.shared.udm_decimal_adjustments": [], "source.algorand_models.shared.udm_velocity": [], "source.algorand_models.shared.uniswapv2factory_event_paircreated": [], "source.algorand_models.shared.flow_balances": [], "source.algorand_models.shared.near_balances": [], "source.algorand_models.shared.algorand_balances": [], "source.algorand_models.shared.terra_balances": [], "source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827": [], "source.algorand_models.crosschain.address_labels": [], "source.algorand_models.algorand.ACCOUNT": [], "source.algorand_models.algorand.ACCOUNT_APP": [], "source.algorand_models.algorand.ACCOUNT_ASSET": [], "source.algorand_models.algorand.APP": [], "source.algorand_models.algorand.ASSET": [], "source.algorand_models.algorand.BLOCK_HEADER": [], "source.algorand_models.algorand.METASTATE": [], "source.algorand_models.algorand.TXN": [], "source.algorand_models.algorand.TXN_PARTICIPATION": [], "source.algorand_models.prod.solana_blocks": [], "source.algorand_models.prod.solana_txs": [], "source.algorand_models.prod.ethereum_blocks": [], "source.algorand_models.prod.ethereum_txs": [], "source.algorand_models.algorand_db_external.algorand_indexer_tx": []}, "child_map": {"model.algorand_models.core__ez_price_pool_balances": ["test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1.3c6fd823f7", "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id.4f2d2b0e2d", "test.algorand_models.not_null_core__ez_price_pool_balances_ALGO_BALANCE.130ef67b2f", "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_ID.5a0cecfca4", "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_NAME.e93f9d7baa", "test.algorand_models.not_null_core__ez_price_pool_balances_BLOCK_HOUR.65a4ec01d8", "test.algorand_models.not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.44bd5b86c2", "test.algorand_models.not_null_core__ez_price_pool_balances_POOL_ADDRESS.61c9eb9923", "test.algorand_models.not_null_core__ez_price_pool_balances_PRICE_USD.689b0f64d6", "test.algorand_models.not_null_core__ez_price_pool_balances__ALGO_PRICE.f3167e2732"], "model.algorand_models.core__ez_transaction_asset_freeze": ["test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA.a1833e16f8", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.0a461165fa", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ID.21ae7a0602", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_ID.27fc8f0cb1", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.a62c68390e", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_EXTRA.9621b2f384", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_FEE.6d31e3f39f", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INNER_TX.a635918c75", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INTRA.2278cbbd31", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_ID.3932262287", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.20077bd4f5", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_SENDER.019c272168", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE.d8cf8c4979", "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.5abc0fc1a3"], "model.algorand_models.core__ez_transaction_application_call": ["test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1.0ce9eebbe0", "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA.18235d8ccb", "test.algorand_models.not_null_core__ez_transaction_application_call_APP_ID.a6a5913a77", "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_DATE.cf26c9d438", "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_ID.6d9b55a668", "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.94c35fbf2d", "test.algorand_models.not_null_core__ez_transaction_application_call_EXTRA.ba946720e6", "test.algorand_models.not_null_core__ez_transaction_application_call_FEE.9b521a0379", "test.algorand_models.not_null_core__ez_transaction_application_call_INNER_TX.f95bd93a9f", "test.algorand_models.not_null_core__ez_transaction_application_call_INTRA.d256c01e4f", "test.algorand_models.not_null_core__ez_transaction_application_call_TX_ID.3616c17fc3", "test.algorand_models.not_null_core__ez_transaction_application_call_TX_MESSAGE.9973fee51d", "test.algorand_models.not_null_core__ez_transaction_application_call_TX_SENDER.d2bc5a1cce", "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE.7e9703e869", "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE_NAME.b30d6e4b04"], "model.algorand_models.core__fact_daily_balances": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d", "test.algorand_models.dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.6941e91d8d", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS.9cd8d844e3", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE.f710557cee", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE.afc6a97495", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.624e3c4758"], "model.algorand_models.core__ez_transfer": ["test.algorand_models.dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER.77711f5f81", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1.8a5535a280", "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA.cef2fce936", "test.algorand_models.not_null_core__ez_transfer_AMOUNT.50f4d0465d", "test.algorand_models.not_null_core__ez_transfer_ASSET_ID.cb2d007069", "test.algorand_models.not_null_core__ez_transfer_ASSET_SENDER.0c1f69edfb", "test.algorand_models.not_null_core__ez_transfer_BLOCK_ID.930114da3a", "test.algorand_models.not_null_core__ez_transfer_BLOCK_TIMESTAMP.ef2a7d36ac", "test.algorand_models.not_null_core__ez_transfer_EXTRA.d69b2648eb", "test.algorand_models.not_null_core__ez_transfer_FEE.0f9ecf7bb9", "test.algorand_models.not_null_core__ez_transfer_INNER_TX.42db758402", "test.algorand_models.not_null_core__ez_transfer_INTRA.d96a3944c2", "test.algorand_models.not_null_core__ez_transfer_TX_ID.aa1eb10d50", "test.algorand_models.not_null_core__ez_transfer_TX_MESSAGE.3220458a5c", "test.algorand_models.not_null_core__ez_transfer_TX_SENDER.19693fb239", "test.algorand_models.not_null_core__ez_transfer_TX_TYPE.be39a785a6", "test.algorand_models.not_null_core__ez_transfer_TX_TYPE_NAME.5724af2df7"], "model.algorand_models.core__ez_transaction_key_registration": ["test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA.eb90862a91", "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_ID.19f0a15e9e", "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.92762c6312", "test.algorand_models.not_null_core__ez_transaction_key_registration_EXTRA.bfcdc9f6ec", "test.algorand_models.not_null_core__ez_transaction_key_registration_FEE.1ae7e72b6c", "test.algorand_models.not_null_core__ez_transaction_key_registration_INNER_TX.9352a97397", "test.algorand_models.not_null_core__ez_transaction_key_registration_INTRA.7b65e7ec41", "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_ID.879155e33a", "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_MESSAGE.48a1737633", "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_SENDER.093ce5da35", "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE.96ff0f746f", "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.94428a1165"], "model.algorand_models.core__ez_transaction_asset_configuration": ["test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA.2f6e96a0ed", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_ID.a0db6509e2", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP.952529712f", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_EXTRA.a2cf14d230", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_FEE.25dda7b42f", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INNER_TX.dbe256feb6", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INTRA.eb034641c6", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_ID.d0a3dc1632", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.140f0d3e10", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_SENDER.fc0593c12a", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE.d9cac02343", "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.eb74c254f8"], "model.algorand_models.core__ez_price_swap": ["test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1.e1a5eac5b1", "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id.4130f5bb19", "test.algorand_models.not_null_core__ez_price_swap_ASSET_ID.832f2300ae", "test.algorand_models.not_null_core__ez_price_swap_BLOCK_HOUR.27a724c596", "test.algorand_models.not_null_core__ez_price_swap_PRICE_USD.1d04499bd5"], "model.algorand_models.core__ez_transaction_payment": ["test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA.0cb7216682", "test.algorand_models.not_null_core__ez_transaction_payment_ASSET_ID.545b42d135", "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_ID.b9a991457b", "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.627c5b210d", "test.algorand_models.not_null_core__ez_transaction_payment_EXTRA.129fdd057a", "test.algorand_models.not_null_core__ez_transaction_payment_FEE.5081637300", "test.algorand_models.not_null_core__ez_transaction_payment_INNER_TX.3a03467a9b", "test.algorand_models.not_null_core__ez_transaction_payment_INTRA.d559a2d263", "test.algorand_models.not_null_core__ez_transaction_payment_TX_ID.ec0e28e5c2", "test.algorand_models.not_null_core__ez_transaction_payment_TX_MESSAGE.383c86dc2a", "test.algorand_models.not_null_core__ez_transaction_payment_TX_SENDER.c08e3a40fe", "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE.a804c933c4", "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE_NAME.75fffa9544"], "model.algorand_models.core__dim_label": ["test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58.bcab1cbb59", "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.640c0c4f19", "test.algorand_models.dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS.9871cdad51", "test.algorand_models.not_null_core__dim_label_ADDRESS.a141e9c919", "test.algorand_models.not_null_core__dim_label_ADDRESS_NAME.33b678595b", "test.algorand_models.not_null_core__dim_label_BLOCKCHAIN.5bd95a5803", "test.algorand_models.not_null_core__dim_label_CREATOR.a858abbf25", "test.algorand_models.not_null_core__dim_label_LABEL.dc39ed6300", "test.algorand_models.not_null_core__dim_label_LABEL_SUBTYPE.140d145fa6", "test.algorand_models.not_null_core__dim_label_LABEL_TYPE.758edac4ce"], "model.algorand_models.core__ez_transaction_asset_transfer": ["test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA.a9d7b14e3e", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_ASSET_ID.685f8a3e48", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_ID.ae05f3e428", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.96a5309d26", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_EXTRA.1dca57af7a", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_FEE.712f6ed3e2", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INNER_TX.669908444f", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INTRA.14b27eb0ce", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_ID.faa56917a7", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.f1f23cc5c8", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_SENDER.59fbcd6150", "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.27575a6ef8"], "model.algorand_models.nft__ez_nft_sales": [], "model.algorand_models.bronze__transaction": ["model.algorand_models.silver__transaction", "model.algorand_models.silver__transaction"], "model.algorand_models.bronze__application": ["model.algorand_models.silver__application"], "model.algorand_models.bronze__account": ["model.algorand_models.silver__account"], "model.algorand_models.bronze__block": ["model.algorand_models.silver__block"], "model.algorand_models.bronze__account_asset": ["model.algorand_models.silver__account_asset"], "model.algorand_models.bronze__account_application": ["model.algorand_models.core__fact_account_application"], "model.algorand_models.bronze__asset": ["model.algorand_models.silver__asset"], "model.algorand_models.silver__transaction_reward": ["model.algorand_models.core__fact_transaction_reward", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT.0090e98c54", "test.algorand_models.not_null_silver__transaction_reward_ACCOUNT.1863bbe76a", "test.algorand_models.not_null_silver__transaction_reward_AMOUNT.24f4563f6b", "test.algorand_models.not_null_silver__transaction_reward_BLOCK_ID.859a62bbbb", "test.algorand_models.not_null_silver__transaction_reward_INTRA.cd79743d98", "test.algorand_models.not_null_silver__transaction_reward_TX_ID.8194087f63"], "model.algorand_models.silver__swaps_wagmiswap_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58.fc9934fcfd", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58.dc85bcb0f6", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra.fdd99e35bb", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.b4cbd7d657", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_intra.3d9c52b43b", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_pool_address.63760c77a3", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_amount.e884b5a4e3", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.67b2dff21e", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_amount.d10ba0bda6", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.6fa1945ee9", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swapper.6ae46af8a3", "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_tx_group_id.e7e94ff81a"], "model.algorand_models.silver__asset": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_asset", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_shufl", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__price_pool_balances", "model.algorand_models.silver__price_pool_balances", "model.algorand_models.silver__price_swap", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.33c56fa891", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.f605f51959", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY.bb6db25b12", "test.algorand_models.not_null_silver__asset_ASSET_DELETED.f24d24907a", "test.algorand_models.not_null_silver__asset_ASSET_ID.e971a1fdb2", "test.algorand_models.not_null_silver__asset_CREATOR_ADDRESS.dc8aa21238", "test.algorand_models.unique_silver__asset_ASSET_ID.0836fe2d9c"], "model.algorand_models.silver__pool_addresses": ["model.algorand_models.core__dim_label", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__price_pool_balances", "model.algorand_models.silver__price_pool_balances", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58.d5b2c4aaed", "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.4f780a52a1", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS.31edac2886", "test.algorand_models.not_null_silver__pool_addresses_ADDRESS.d99ec0b796", "test.algorand_models.not_null_silver__pool_addresses_ADDRESS_NAME.8c7c022029", "test.algorand_models.not_null_silver__pool_addresses_BLOCKCHAIN.8fd4ef2a99", "test.algorand_models.not_null_silver__pool_addresses_CREATOR.0ff3d70081", "test.algorand_models.not_null_silver__pool_addresses_LABEL.5c3688625f", "test.algorand_models.not_null_silver__pool_addresses_LABEL_SUBTYPE.6aebecdf34", "test.algorand_models.not_null_silver__pool_addresses_LABEL_TYPE.d90a726e77"], "model.algorand_models.silver__swaps_algofi_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58.93df58b5bd", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58.a6ac153861", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra.f354df7981", "test.algorand_models.not_null_silver__swaps_algofi_dex_BLOCK_ID.98dd0bdc0a", "test.algorand_models.not_null_silver__swaps_algofi_dex_intra.98d93ae8b7", "test.algorand_models.not_null_silver__swaps_algofi_dex_pool_address.67d3750512", "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_amount.3d25d19044", "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_asset_id.c1a6419420", "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_amount.44952a511b", "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_asset_id.dbe640dcb6", "test.algorand_models.not_null_silver__swaps_algofi_dex_swapper.421346ea97", "test.algorand_models.not_null_silver__swaps_algofi_dex_tx_group_id.3d5dd1ff0d"], "model.algorand_models.silver__nft_sales_nftdomains": ["test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id.fd9462bf3f", "test.algorand_models.not_null_silver__nft_sales_nftdomains_BLOCK_ID.8949c67df2", "test.algorand_models.not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.e65675dda5", "test.algorand_models.not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.5613eac93a", "test.algorand_models.not_null_silver__nft_sales_nftdomains_PURCHASER.3a00107c53", "test.algorand_models.not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.e8aa0fb38a", "test.algorand_models.not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.409efff1ad"], "model.algorand_models.silver__transaction_participation": ["model.algorand_models.core__fact_transaction_participation", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA.c01379657f", "test.algorand_models.not_null_silver__transaction_participation_ADDRESS.672784f40f", "test.algorand_models.not_null_silver__transaction_participation_BLOCK_ID.1aea6e628b", "test.algorand_models.not_null_silver__transaction_participation_intra.945c791c91"], "model.algorand_models.silver__hourly_pool_balances": ["model.algorand_models.silver__price_pool_balances", "model.algorand_models.silver__price_pool_balances", "model.algorand_models.silver__price_pool_balances", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1.f554545e46", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID.f70e558863", "test.algorand_models.not_null_silver__hourly_pool_balances_ADDRESS.a2de2c4657", "test.algorand_models.not_null_silver__hourly_pool_balances_ASSET_ID.dfce0aa5dc", "test.algorand_models.not_null_silver__hourly_pool_balances_BALANCE.a6c2070cca", "test.algorand_models.not_null_silver__hourly_pool_balances_DATE.709c6a9e62"], "model.algorand_models.silver__account": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_wallet_type", "model.algorand_models.core__fact_account_asset", "model.algorand_models.core__fact_account_current_balance", "model.algorand_models.silver__account_asset", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__transaction_participation", "test.algorand_models.not_null_silver__account_ACCOUNT_CLOSED.13a3468e19", "test.algorand_models.not_null_silver__account_ADDRESS.d1e28d6819", "test.algorand_models.not_null_silver__account_ADDRESS_RAW.d08a2402e7", "test.algorand_models.not_null_silver__account_NON_ZERO_BALANCE.778794d321", "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_BASE.231ac621af", "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_TOTAL.41323d2d55", "test.algorand_models.unique_silver__account_ADDRESS.9ceb706a00"], "model.algorand_models.silver__nft_sales_algoxnft": ["model.algorand_models.nft__fact_nft_sales", "model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id.f1521defca", "test.algorand_models.not_null_silver__nft_sales_algoxnft_BLOCK_ID.f33e57838b", "test.algorand_models.not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.9ed59f40e0", "test.algorand_models.not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.1a9660483f", "test.algorand_models.not_null_silver__nft_sales_algoxnft_PURCHASER.3575feb666", "test.algorand_models.not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.340404e53b", "test.algorand_models.not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.73c6955f60"], "model.algorand_models.silver__nft_atomic_swaps": ["model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id.a6448d1fe4", "test.algorand_models.not_null_silver__nft_atomic_swaps_BLOCK_ID.07727af353", "test.algorand_models.not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.04d59374ba", "test.algorand_models.not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.fb805c0885", "test.algorand_models.not_null_silver__nft_atomic_swaps_PURCHASER.0a3bf64aac", "test.algorand_models.not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.488d456c48", "test.algorand_models.not_null_silver__nft_atomic_swaps_TX_GROUP_ID.2eefef9533"], "model.algorand_models.silver__account_asset": ["model.algorand_models.core__fact_account_asset", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID.ec717582cd", "test.algorand_models.not_null_silver__account_asset_ADDRESS.b67595512f", "test.algorand_models.not_null_silver__account_asset_AMOUNT.01f350b758", "test.algorand_models.not_null_silver__account_asset_ASSET_ID.8d8aa00446", "test.algorand_models.not_null_silver__account_asset_CREATED_AT.7085dd0081"], "model.algorand_models.silver__nft_sales_octorand": ["model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id.bbd3ab6c2e", "test.algorand_models.not_null_silver__nft_sales_octorand_BLOCK_ID.ef8c73a020", "test.algorand_models.not_null_silver__nft_sales_octorand_NFT_ASSET_ID.d630b4b99e", "test.algorand_models.not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.e21a706379", "test.algorand_models.not_null_silver__nft_sales_octorand_PURCHASER.f812ed492a", "test.algorand_models.not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.3095bef650", "test.algorand_models.not_null_silver__nft_sales_octorand_TX_GROUP_ID.d7a0c0b8cd"], "model.algorand_models.silver__block": ["model.algorand_models.core__dim_block", "model.algorand_models.core__fact_block", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__price_swap", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.2b0f250b3e", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1.f44d7c8cee", "test.algorand_models.not_null_silver__block_BLOCK_DATE.c1926ed12a", "test.algorand_models.not_null_silver__block_BLOCK_ID.a83167397e", "test.algorand_models.not_null_silver__block_BLOCK_TIMESTAMP.7583c96190", "test.algorand_models.not_null_silver__block_GENESIS_HASH.6d511c76e5", "test.algorand_models.not_null_silver__block_NETWORK.6166f81c40", "test.algorand_models.not_null_silver__block_PREV_BLOCK_HASH.6728550630", "test.algorand_models.not_null_silver__block_REWARDS_LEVEL.0a8d0a67f5", "test.algorand_models.silver__block__block_id-assert_no_gap", "test.algorand_models.unique_silver__block_BLOCK_ID.01de2ad4fc"], "model.algorand_models.silver__indexer_tx": ["model.algorand_models.silver__get_tx", "model.algorand_models.silver__transaction_reward", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id.d7a3a79f7c", "test.algorand_models.not_null_silver__indexer_tx_ACCOUNT_ID.66a8a1eb08", "test.algorand_models.not_null_silver__indexer_tx_BLOCK_ID.30c7db10d4", "test.algorand_models.not_null_silver__indexer_tx_TX_ID.a94096f4f5", "test.algorand_models.not_null_silver__indexer_tx__INSERTED_TIMESTAMP.b6b6dc7476"], "model.algorand_models.silver__daily_balances": ["model.algorand_models.core__fact_daily_balances", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS.08dbd9f043", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE.dc2067bdbd", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE.f372e00094", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1.15ad81f7fc", "test.algorand_models.not_null_silver__daily_balances_ADDRESS.2502493350", "test.algorand_models.not_null_silver__daily_balances_BALANCE.a2177bc39f", "test.algorand_models.not_null_silver__daily_balances_DATE.85b329c0c5"], "model.algorand_models.silver__swaps_humble_swap_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58.028cc94f2a", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58.23a2be55f0", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra.6de7c5970b", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_BLOCK_ID.83c4d84d2a", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_app_id.65856a04b6", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_intra.9037966b0a", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_pool_address.b464b1cd22", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_amount.2201d6aa4c", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.854390378d", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_amount.0dd26e28d8", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.143b912223", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swapper.dfebe8bf0c", "test.algorand_models.not_null_silver__swaps_humble_swap_dex_tx_group_id.473522018c"], "model.algorand_models.silver__swaps_pactfi_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58.d85e6df9cf", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58.6a3cbd4b8d", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra.8ccc491a92", "test.algorand_models.not_null_silver__swaps_pactfi_dex_BLOCK_ID.e7a45d5997", "test.algorand_models.not_null_silver__swaps_pactfi_dex_intra.5506b0f43c", "test.algorand_models.not_null_silver__swaps_pactfi_dex_pool_address.ecd7ff2842", "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_amount.19a7b3a19f", "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_asset_id.2dc309f64f", "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_amount.45d1647f55", "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_asset_id.524cb829ba", "test.algorand_models.not_null_silver__swaps_pactfi_dex_swapper.393df11234", "test.algorand_models.not_null_silver__swaps_pactfi_dex_tx_group_id.62967a4eff"], "model.algorand_models.silver__transaction": ["model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_transaction_type", "model.algorand_models.core__fact_block", "model.algorand_models.core__fact_transaction", "model.algorand_models.silver__asset", "model.algorand_models.silver__asset_config", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_atomic_swaps", "model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_ab2_gallery", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_algoxnft", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_nftdomains", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_octorand", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_rand_gallery", "model.algorand_models.silver__nft_sales_shufl", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_algofi_dex", "model.algorand_models.silver__swaps_fxdx_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_humble_swap_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_pactfi_dex", "model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_tinyman_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "model.algorand_models.silver__swaps_wagmiswap_dex", "model.algorand_models.silver__transaction_close", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA.f4b59b8edf", "test.algorand_models.not_null_silver__transaction_BLOCK_ID.73847273f7", "test.algorand_models.not_null_silver__transaction_INNER_TX.c48b59c073", "test.algorand_models.not_null_silver__transaction_INTRA.23b710b3ad", "test.algorand_models.not_null_silver__transaction_TX_ID.9e8d1f1573", "test.algorand_models.not_null_silver__transaction_TX_TYPE.cfe523843a", "test.algorand_models.silver__transaction__intra-assert_no_gap"], "model.algorand_models.silver__price_swap": ["model.algorand_models.core__ez_price_swap", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1.682631679a", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id.92926e4bfc", "test.algorand_models.not_null_silver__price_swap_ASSET_ID.b7bb14bef1", "test.algorand_models.not_null_silver__price_swap_BLOCK_HOUR.6349e4ca1c", "test.algorand_models.not_null_silver__price_swap_PRICE_USD.8aa1fa2d31", "test.algorand_models.silver__prices_swap__block_hour_date_gap"], "model.algorand_models.silver__nft_sales_rand_gallery": ["model.algorand_models.nft__fact_nft_sales", "model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id.f14d68fdfa", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_BLOCK_ID.c5b61b87d4", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.76b7258306", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.2d9c0c44df", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_PURCHASER.306d4a35eb", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.19e7255ea0", "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.a326ed7248"], "model.algorand_models.silver__application": ["model.algorand_models.core__dim_application", "model.algorand_models.silver__swaps_wagmiswap_dex", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT.c58fb3849d", "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_PARAMS.1c9bd89cee", "test.algorand_models.not_null_silver__application_APP_CLOSED.6fe9e79b99", "test.algorand_models.not_null_silver__application_APP_ID.08ff7e7ae1", "test.algorand_models.not_null_silver__application_CREATED_AT.bb24db5ca8", "test.algorand_models.not_null_silver__application_CREATOR_ADDRESS.04da7d360f", "test.algorand_models.unique_silver__application_APP_ID.f820ae939f"], "model.algorand_models.silver__asset_config": ["model.algorand_models.silver__asset", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id.e66d602a24", "test.algorand_models.not_null_silver__asset_config_ASSET_AMOUNT.4c0d85712c", "test.algorand_models.not_null_silver__asset_config_ASSET_ID.d90f759643", "test.algorand_models.not_null_silver__asset_config_ASSET_NAME.594c42ab0e", "test.algorand_models.not_null_silver__asset_config_DECIMALS.c787fdb322"], "model.algorand_models.silver__swaps_tinyman_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58.4ed9db3298", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58.40f8639ba8", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra.ad8f68ce40", "test.algorand_models.not_null_silver__swaps_tinyman_dex_BLOCK_ID.1e44ce613e", "test.algorand_models.not_null_silver__swaps_tinyman_dex_intra.7b7197ed1b", "test.algorand_models.not_null_silver__swaps_tinyman_dex_pool_address.fb8b0b7c93", "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_amount.c0e1a7e5b7", "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_asset_id.2d035b5768", "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_amount.d35eabbe84", "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_asset_id.ec20e42a15", "test.algorand_models.not_null_silver__swaps_tinyman_dex_swapper.ca8fd72431", "test.algorand_models.not_null_silver__swaps_tinyman_dex_tx_group_id.6ae5f40265"], "model.algorand_models.silver__swaps_fxdx_dex": ["model.algorand_models.silver__swap", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58.ff1238dd52", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58.cf44f55bd6", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra.fedf3d48f6", "test.algorand_models.not_null_silver__swaps_fxdx_dex_BLOCK_ID.f0efa050b4", "test.algorand_models.not_null_silver__swaps_fxdx_dex_intra.16f1674be2", "test.algorand_models.not_null_silver__swaps_fxdx_dex_pool_address.53bb04f4f4", "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_amount.c88e18c611", "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_asset_id.d7466f1e28", "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_amount.7e4735c72b", "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_asset_id.292fe1d4c2", "test.algorand_models.not_null_silver__swaps_fxdx_dex_swapper.2d27267b79", "test.algorand_models.not_null_silver__swaps_fxdx_dex_tx_group_id.7f2744d7dd"], "model.algorand_models.silver__swap": ["model.algorand_models.core__fact_swap", "model.algorand_models.silver__pool_addresses", "model.algorand_models.silver__price_swap", "test.algorand_models.not_null_silver__swap_SWAP_PROGRAM.093a37c7af"], "model.algorand_models.silver__price_pool_balances": ["model.algorand_models.core__ez_price_pool_balances", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1.723d9639e7", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id.d2c284fb3d", "test.algorand_models.not_null_silver__price_pool_balances_ALGO_BALANCE.330ccc3fd1", "test.algorand_models.not_null_silver__price_pool_balances_ASSET_NAME.8638554ffd", "test.algorand_models.not_null_silver__price_pool_balances_BLOCK_HOUR.b229c9d1cb", "test.algorand_models.not_null_silver__price_pool_balances_NON_ALGO_BALANCE.e564fff9c3", "test.algorand_models.not_null_silver__price_pool_balances_POOL_ADDRESS.82b2456515", "test.algorand_models.not_null_silver__price_pool_balances_PRICE_USD.989d9e0691", "test.algorand_models.not_null_silver__price_pool_balances__ALGO_PRICE.05d9bcd5f1"], "model.algorand_models.silver__transaction_close": ["model.algorand_models.core__fact_transaction_close", "model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID.8abe5804e4", "test.algorand_models.not_null_silver__transaction_close_ACCOUNT.98d8989fd1", "test.algorand_models.not_null_silver__transaction_close_AMOUNT.aff2c6ec1e", "test.algorand_models.not_null_silver__transaction_close_ASSET_ID.cde2c35534", "test.algorand_models.not_null_silver__transaction_close_BLOCK_ID.72301b1c99", "test.algorand_models.not_null_silver__transaction_close_INTRA.d88c0ad995", "test.algorand_models.not_null_silver__transaction_close_TX_ID.c035f36d16"], "model.algorand_models.silver__nft_sales_shufl": ["model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id.54653b8ac1", "test.algorand_models.not_null_silver__nft_sales_shufl_BLOCK_ID.b89e2e75aa", "test.algorand_models.not_null_silver__nft_sales_shufl_NFT_ASSET_ID.b4bc9df3ac", "test.algorand_models.not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.1a9765f957", "test.algorand_models.not_null_silver__nft_sales_shufl_PURCHASER.477ed9b890", "test.algorand_models.not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.3c4e61432e", "test.algorand_models.not_null_silver__nft_sales_shufl_TX_GROUP_ID.2ce22b8fe9"], "model.algorand_models.silver__get_tx": ["operation.algorand_models.algorand_models-on-run-start-5"], "model.algorand_models.silver__nft_sales_ab2_gallery": ["model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id.ec0bf20e85", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.ddf896bbb4", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.0d7ea781b9", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.d294567592", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_PURCHASER.9cfec0ecb7", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.0bee5b1c62", "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.34cd6f2f48"], "test.algorand_models.silver__prices_swap__block_hour_date_gap": [], "test.algorand_models.silver__block__block_id-assert_no_gap": [], "test.algorand_models.silver__transaction__intra-assert_no_gap": [], "operation.algorand_models.algorand_models-on-run-start-0": [], "operation.algorand_models.algorand_models-on-run-start-1": [], "operation.algorand_models.algorand_models-on-run-start-2": [], "operation.algorand_models.algorand_models-on-run-start-3": [], "operation.algorand_models.algorand_models-on-run-start-4": [], "operation.algorand_models.algorand_models-on-run-start-5": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.algorand_models.not_null_core__ez_price_pool_balances_BLOCK_HOUR.65a4ec01d8": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_pool_balances_BLOCK_HOUR__day__1.3c6fd823f7": [], "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_ID.5a0cecfca4": [], "test.algorand_models.not_null_core__ez_price_pool_balances_ASSET_NAME.e93f9d7baa": [], "test.algorand_models.not_null_core__ez_price_pool_balances_PRICE_USD.689b0f64d6": [], "test.algorand_models.not_null_core__ez_price_pool_balances_ALGO_BALANCE.130ef67b2f": [], "test.algorand_models.not_null_core__ez_price_pool_balances_NON_ALGO_BALANCE.44bd5b86c2": [], "test.algorand_models.not_null_core__ez_price_pool_balances_POOL_ADDRESS.61c9eb9923": [], "test.algorand_models.not_null_core__ez_price_pool_balances__ALGO_PRICE.f3167e2732": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_pool_balances_block_hour__asset_id.4f2d2b0e2d": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_TIMESTAMP.a62c68390e": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_BLOCK_ID.27fc8f0cb1": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INTRA.2278cbbd31": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_ID.3932262287": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_INNER_TX.a635918c75": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_SENDER.019c272168": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_FEE.6d31e3f39f": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ID.21ae7a0602": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_ASSET_ADDRESS.0a461165fa": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE.d8cf8c4979": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_TYPE_NAME.5abc0fc1a3": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_TX_MESSAGE.20077bd4f5": [], "test.algorand_models.not_null_core__ez_transaction_asset_freeze_EXTRA.9621b2f384": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_freeze_BLOCK_ID__INTRA.a1833e16f8": [], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_TIMESTAMP.94c35fbf2d": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transaction_application_call_BLOCK_TIMESTAMP__day__1.0ce9eebbe0": [], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_DATE.cf26c9d438": [], "test.algorand_models.not_null_core__ez_transaction_application_call_BLOCK_ID.6d9b55a668": [], "test.algorand_models.not_null_core__ez_transaction_application_call_INTRA.d256c01e4f": [], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_ID.3616c17fc3": [], "test.algorand_models.not_null_core__ez_transaction_application_call_INNER_TX.f95bd93a9f": [], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_SENDER.d2bc5a1cce": [], "test.algorand_models.not_null_core__ez_transaction_application_call_FEE.9b521a0379": [], "test.algorand_models.not_null_core__ez_transaction_application_call_APP_ID.a6a5913a77": [], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE.7e9703e869": [], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_TYPE_NAME.b30d6e4b04": [], "test.algorand_models.not_null_core__ez_transaction_application_call_TX_MESSAGE.9973fee51d": [], "test.algorand_models.not_null_core__ez_transaction_application_call_EXTRA.ba946720e6": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_application_call_BLOCK_ID__INTRA.18235d8ccb": [], "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_TIMESTAMP.627c5b210d": [], "test.algorand_models.not_null_core__ez_transaction_payment_BLOCK_ID.b9a991457b": [], "test.algorand_models.not_null_core__ez_transaction_payment_INTRA.d559a2d263": [], "test.algorand_models.not_null_core__ez_transaction_payment_TX_ID.ec0e28e5c2": [], "test.algorand_models.not_null_core__ez_transaction_payment_INNER_TX.3a03467a9b": [], "test.algorand_models.not_null_core__ez_transaction_payment_TX_SENDER.c08e3a40fe": [], "test.algorand_models.not_null_core__ez_transaction_payment_FEE.5081637300": [], "test.algorand_models.not_null_core__ez_transaction_payment_ASSET_ID.545b42d135": [], "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE.a804c933c4": [], "test.algorand_models.not_null_core__ez_transaction_payment_TX_TYPE_NAME.75fffa9544": [], "test.algorand_models.not_null_core__ez_transaction_payment_TX_MESSAGE.383c86dc2a": [], "test.algorand_models.not_null_core__ez_transaction_payment_EXTRA.129fdd057a": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_payment_BLOCK_ID__INTRA.0cb7216682": [], "test.algorand_models.not_null_core__dim_label_BLOCKCHAIN.5bd95a5803": [], "test.algorand_models.not_null_core__dim_label_CREATOR.a858abbf25": [], "test.algorand_models.not_null_core__dim_label_LABEL_TYPE.758edac4ce": [], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_label_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.640c0c4f19": [], "test.algorand_models.not_null_core__dim_label_LABEL_SUBTYPE.140d145fa6": [], "test.algorand_models.not_null_core__dim_label_LABEL.dc39ed6300": [], "test.algorand_models.not_null_core__dim_label_ADDRESS_NAME.33b678595b": [], "test.algorand_models.not_null_core__dim_label_ADDRESS.a141e9c919": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__dim_label_ADDRESS__58.bcab1cbb59": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__dim_label_BLOCKCHAIN__CREATOR__ADDRESS.9871cdad51": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_TIMESTAMP.96a5309d26": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_BLOCK_ID.ae05f3e428": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INTRA.14b27eb0ce": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_ID.faa56917a7": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_INNER_TX.669908444f": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_SENDER.59fbcd6150": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_FEE.712f6ed3e2": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_ASSET_ID.685f8a3e48": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_TYPE_NAME.27575a6ef8": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_TX_MESSAGE.f1f23cc5c8": [], "test.algorand_models.not_null_core__ez_transaction_asset_transfer_EXTRA.1dca57af7a": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_transfer_BLOCK_ID__INTRA.a9d7b14e3e": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.624e3c4758": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_ADDRESS.9cd8d844e3": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_DATE.afc6a97495": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_daily_balances_BALANCE.f710557cee": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_daily_balances_FACT_DAILY_BALANCE_ID.6941e91d8d": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_TIMESTAMP.92762c6312": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_BLOCK_ID.19f0a15e9e": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_INTRA.7b65e7ec41": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_ID.879155e33a": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_INNER_TX.9352a97397": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_SENDER.093ce5da35": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_FEE.1ae7e72b6c": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE.96ff0f746f": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_TYPE_NAME.94428a1165": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_TX_MESSAGE.48a1737633": [], "test.algorand_models.not_null_core__ez_transaction_key_registration_EXTRA.bfcdc9f6ec": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_key_registration_BLOCK_ID__INTRA.eb90862a91": [], "test.algorand_models.not_null_core__ez_transfer_BLOCK_TIMESTAMP.ef2a7d36ac": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_transfer_BLOCK_TIMESTAMP__day__1.8a5535a280": [], "test.algorand_models.not_null_core__ez_transfer_BLOCK_ID.930114da3a": [], "test.algorand_models.not_null_core__ez_transfer_INTRA.d96a3944c2": [], "test.algorand_models.not_null_core__ez_transfer_TX_ID.aa1eb10d50": [], "test.algorand_models.not_null_core__ez_transfer_INNER_TX.42db758402": [], "test.algorand_models.not_null_core__ez_transfer_TX_SENDER.19693fb239": [], "test.algorand_models.not_null_core__ez_transfer_ASSET_SENDER.0c1f69edfb": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__ez_transfer_RECEIVER.77711f5f81": [], "test.algorand_models.not_null_core__ez_transfer_ASSET_ID.cb2d007069": [], "test.algorand_models.not_null_core__ez_transfer_AMOUNT.50f4d0465d": [], "test.algorand_models.not_null_core__ez_transfer_FEE.0f9ecf7bb9": [], "test.algorand_models.not_null_core__ez_transfer_TX_TYPE.be39a785a6": [], "test.algorand_models.not_null_core__ez_transfer_TX_TYPE_NAME.5724af2df7": [], "test.algorand_models.not_null_core__ez_transfer_TX_MESSAGE.3220458a5c": [], "test.algorand_models.not_null_core__ez_transfer_EXTRA.d69b2648eb": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transfer_BLOCK_ID__INTRA.cef2fce936": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_TIMESTAMP.952529712f": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_BLOCK_ID.a0db6509e2": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INTRA.eb034641c6": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_ID.d0a3dc1632": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_INNER_TX.dbe256feb6": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_SENDER.fc0593c12a": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_FEE.25dda7b42f": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE.d9cac02343": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_TYPE_NAME.eb74c254f8": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_TX_MESSAGE.140f0d3e10": [], "test.algorand_models.not_null_core__ez_transaction_asset_configuration_EXTRA.a2cf14d230": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_transaction_asset_configuration_BLOCK_ID__INTRA.2f6e96a0ed": [], "test.algorand_models.not_null_core__ez_price_swap_BLOCK_HOUR.27a724c596": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_price_swap_BLOCK_HOUR__day__1.e1a5eac5b1": [], "test.algorand_models.not_null_core__ez_price_swap_ASSET_ID.832f2300ae": [], "test.algorand_models.not_null_core__ez_price_swap_PRICE_USD.1d04499bd5": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_core__ez_price_swap_block_hour__asset_id.4130f5bb19": [], "test.algorand_models.not_null_silver__account_asset_ADDRESS.b67595512f": [], "test.algorand_models.not_null_silver__account_asset_ASSET_ID.8d8aa00446": [], "test.algorand_models.not_null_silver__account_asset_AMOUNT.01f350b758": [], "test.algorand_models.not_null_silver__account_asset_CREATED_AT.7085dd0081": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__account_asset_ADDRESS__ASSET_ID.ec717582cd": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_BLOCK_ID.83c4d84d2a": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_intra.9037966b0a": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_tx_group_id.473522018c": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_app_id.65856a04b6": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swapper.dfebe8bf0c": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_swapper__58.23a2be55f0": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_asset_id.854390378d": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_from_amount.2201d6aa4c": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_pool_address.b464b1cd22": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_humble_swap_dex_pool_address__58.028cc94f2a": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_asset_id.143b912223": [], "test.algorand_models.not_null_silver__swaps_humble_swap_dex_swap_to_amount.0dd26e28d8": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_humble_swap_dex_block_id__intra.6de7c5970b": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_ADDRESS.08dbd9f043": [], "test.algorand_models.not_null_silver__daily_balances_ADDRESS.2502493350": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_DATE.f372e00094": [], "test.algorand_models.not_null_silver__daily_balances_DATE.85b329c0c5": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_balances_DATE__day__1.15ad81f7fc": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__daily_balances_BALANCE.dc2067bdbd": [], "test.algorand_models.not_null_silver__daily_balances_BALANCE.a2177bc39f": [], "test.algorand_models.not_null_silver__indexer_tx_TX_ID.a94096f4f5": [], "test.algorand_models.not_null_silver__indexer_tx_ACCOUNT_ID.66a8a1eb08": [], "test.algorand_models.not_null_silver__indexer_tx_BLOCK_ID.30c7db10d4": [], "test.algorand_models.not_null_silver__indexer_tx__INSERTED_TIMESTAMP.b6b6dc7476": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__indexer_tx_tx_id.d7a3a79f7c": [], "test.algorand_models.not_null_silver__block_BLOCK_ID.a83167397e": [], "test.algorand_models.unique_silver__block_BLOCK_ID.01de2ad4fc": [], "test.algorand_models.not_null_silver__block_BLOCK_TIMESTAMP.7583c96190": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_BLOCK_TIMESTAMP__day__1.f44d7c8cee": [], "test.algorand_models.not_null_silver__block_BLOCK_DATE.c1926ed12a": [], "test.algorand_models.not_null_silver__block_REWARDS_LEVEL.0a8d0a67f5": [], "test.algorand_models.not_null_silver__block_NETWORK.6166f81c40": [], "test.algorand_models.not_null_silver__block_GENESIS_HASH.6d511c76e5": [], "test.algorand_models.not_null_silver__block_PREV_BLOCK_HASH.6728550630": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__block_TXN_ROOT.2b0f250b3e": [], "test.algorand_models.not_null_silver__nft_sales_octorand_BLOCK_ID.ef8c73a020": [], "test.algorand_models.not_null_silver__nft_sales_octorand_TX_GROUP_ID.d7a0c0b8cd": [], "test.algorand_models.not_null_silver__nft_sales_octorand_PURCHASER.f812ed492a": [], "test.algorand_models.not_null_silver__nft_sales_octorand_NFT_ASSET_ID.d630b4b99e": [], "test.algorand_models.not_null_silver__nft_sales_octorand_TOTAL_SALES_AMOUNT.3095bef650": [], "test.algorand_models.not_null_silver__nft_sales_octorand_NUMBER_OF_NFTS.e21a706379": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_octorand_block_id__tx_group_id__nft_asset_id.bbd3ab6c2e": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_BLOCK_ID.e7a45d5997": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_intra.5506b0f43c": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_tx_group_id.62967a4eff": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swapper.393df11234": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_swapper__58.6a3cbd4b8d": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_asset_id.2dc309f64f": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_from_amount.19a7b3a19f": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_pool_address.ecd7ff2842": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_pactfi_dex_pool_address__58.d85e6df9cf": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_asset_id.524cb829ba": [], "test.algorand_models.not_null_silver__swaps_pactfi_dex_swap_to_amount.45d1647f55": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_pactfi_dex_block_id__intra.8ccc491a92": [], "test.algorand_models.not_null_silver__transaction_BLOCK_ID.73847273f7": [], "test.algorand_models.not_null_silver__transaction_INTRA.23b710b3ad": [], "test.algorand_models.not_null_silver__transaction_TX_ID.9e8d1f1573": [], "test.algorand_models.not_null_silver__transaction_INNER_TX.c48b59c073": [], "test.algorand_models.not_null_silver__transaction_TX_TYPE.cfe523843a": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_BLOCK_ID__INTRA.f4b59b8edf": [], "test.algorand_models.not_null_silver__price_swap_BLOCK_HOUR.6349e4ca1c": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_swap_BLOCK_HOUR__day__1.682631679a": [], "test.algorand_models.not_null_silver__price_swap_ASSET_ID.b7bb14bef1": [], "test.algorand_models.not_null_silver__price_swap_PRICE_USD.8aa1fa2d31": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_swap_block_hour__asset_id.92926e4bfc": [], "test.algorand_models.not_null_silver__application_APP_ID.08ff7e7ae1": [], "test.algorand_models.unique_silver__application_APP_ID.f820ae939f": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_PARAMS.1c9bd89cee": [], "test.algorand_models.not_null_silver__application_APP_CLOSED.6fe9e79b99": [], "test.algorand_models.not_null_silver__application_CREATOR_ADDRESS.04da7d360f": [], "test.algorand_models.not_null_silver__application_CREATED_AT.bb24db5ca8": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__application_CLOSED_AT.c58fb3849d": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_BLOCK_ID.c5b61b87d4": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TX_GROUP_ID.a326ed7248": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_PURCHASER.306d4a35eb": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NFT_ASSET_ID.76b7258306": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_TOTAL_SALES_AMOUNT.19e7255ea0": [], "test.algorand_models.not_null_silver__nft_sales_rand_gallery_NUMBER_OF_NFTS.2d9c0c44df": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_rand_gallery_block_id__tx_group_id__nft_asset_id.f14d68fdfa": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_BLOCK_ID.b4cbd7d657": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_intra.3d9c52b43b": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_tx_group_id.e7e94ff81a": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swapper.6ae46af8a3": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_swapper__58.dc85bcb0f6": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_asset_id.67b2dff21e": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_from_amount.e884b5a4e3": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_pool_address.63760c77a3": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_wagmiswap_dex_pool_address__58.fc9934fcfd": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_asset_id.6fa1945ee9": [], "test.algorand_models.not_null_silver__swaps_wagmiswap_dex_swap_to_amount.d10ba0bda6": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_wagmiswap_dex_block_id__intra.fdd99e35bb": [], "test.algorand_models.not_null_silver__transaction_reward_BLOCK_ID.859a62bbbb": [], "test.algorand_models.not_null_silver__transaction_reward_INTRA.cd79743d98": [], "test.algorand_models.not_null_silver__transaction_reward_TX_ID.8194087f63": [], "test.algorand_models.not_null_silver__transaction_reward_ACCOUNT.1863bbe76a": [], "test.algorand_models.not_null_silver__transaction_reward_AMOUNT.24f4563f6b": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_reward_BLOCK_ID__INTRA__ACCOUNT.0090e98c54": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_BLOCK_ID.98dd0bdc0a": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_intra.98d93ae8b7": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_tx_group_id.3d5dd1ff0d": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_swapper.421346ea97": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_swapper__58.a6ac153861": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_asset_id.c1a6419420": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_from_amount.3d25d19044": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_pool_address.67d3750512": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_algofi_dex_pool_address__58.93df58b5bd": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_asset_id.dbe640dcb6": [], "test.algorand_models.not_null_silver__swaps_algofi_dex_swap_to_amount.44952a511b": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_algofi_dex_block_id__intra.f354df7981": [], "test.algorand_models.not_null_silver__pool_addresses_BLOCKCHAIN.8fd4ef2a99": [], "test.algorand_models.not_null_silver__pool_addresses_CREATOR.0ff3d70081": [], "test.algorand_models.not_null_silver__pool_addresses_LABEL_TYPE.d90a726e77": [], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_set_silver__pool_addresses_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.4f780a52a1": [], "test.algorand_models.not_null_silver__pool_addresses_LABEL_SUBTYPE.6aebecdf34": [], "test.algorand_models.not_null_silver__pool_addresses_LABEL.5c3688625f": [], "test.algorand_models.not_null_silver__pool_addresses_ADDRESS_NAME.8c7c022029": [], "test.algorand_models.not_null_silver__pool_addresses_ADDRESS.d99ec0b796": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__pool_addresses_ADDRESS__58.d5b2c4aaed": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__pool_addresses_BLOCKCHAIN__CREATOR__ADDRESS.31edac2886": [], "test.algorand_models.not_null_silver__asset_ASSET_ID.e971a1fdb2": [], "test.algorand_models.unique_silver__asset_ASSET_ID.0836fe2d9c": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_TOTAL_SUPPLY.bb6db25b12": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_ASSET_URL.33c56fa891": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_silver__asset_DECIMALS.f605f51959": [], "test.algorand_models.not_null_silver__asset_ASSET_DELETED.f24d24907a": [], "test.algorand_models.not_null_silver__asset_CREATOR_ADDRESS.dc8aa21238": [], "test.algorand_models.not_null_silver__hourly_pool_balances_ADDRESS.a2de2c4657": [], "test.algorand_models.not_null_silver__hourly_pool_balances_DATE.709c6a9e62": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_pool_balances_DATE__day__1.f554545e46": [], "test.algorand_models.not_null_silver__hourly_pool_balances_ASSET_ID.dfce0aa5dc": [], "test.algorand_models.not_null_silver__hourly_pool_balances_BALANCE.a6c2070cca": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__hourly_pool_balances_ADDRESS__DATE__ASSET_ID.f70e558863": [], "test.algorand_models.not_null_silver__transaction_participation_intra.945c791c91": [], "test.algorand_models.not_null_silver__transaction_participation_BLOCK_ID.1aea6e628b": [], "test.algorand_models.not_null_silver__transaction_participation_ADDRESS.672784f40f": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_participation_ADDRESS__BLOCK_ID__INTRA.c01379657f": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_BLOCK_ID.8949c67df2": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_TX_GROUP_ID.409efff1ad": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_PURCHASER.3a00107c53": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_NFT_ASSET_ID.e65675dda5": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_TOTAL_SALES_AMOUNT.e8aa0fb38a": [], "test.algorand_models.not_null_silver__nft_sales_nftdomains_NUMBER_OF_NFTS.5613eac93a": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_nftdomains_block_id__tx_group_id__nft_asset_id.fd9462bf3f": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_BLOCK_ID.07727af353": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_TX_GROUP_ID.2eefef9533": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_PURCHASER.0a3bf64aac": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_NFT_ASSET_ID.04d59374ba": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_NUMBER_OF_NFTS.fb805c0885": [], "test.algorand_models.not_null_silver__nft_atomic_swaps_TOTAL_SALES_AMOUNT.488d456c48": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_atomic_swaps_BLOCK_ID__nft_asset_id__tx_group_id.a6448d1fe4": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_BLOCK_ID.f33e57838b": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_TX_GROUP_ID.73c6955f60": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_PURCHASER.3575feb666": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_NFT_ASSET_ID.9ed59f40e0": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_TOTAL_SALES_AMOUNT.340404e53b": [], "test.algorand_models.not_null_silver__nft_sales_algoxnft_NUMBER_OF_NFTS.1a9660483f": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_algoxnft_block_id__tx_group_id__nft_asset_id.f1521defca": [], "test.algorand_models.not_null_silver__account_ADDRESS.d1e28d6819": [], "test.algorand_models.unique_silver__account_ADDRESS.9ceb706a00": [], "test.algorand_models.not_null_silver__account_ADDRESS_RAW.d08a2402e7": [], "test.algorand_models.not_null_silver__account_ACCOUNT_CLOSED.13a3468e19": [], "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_BASE.231ac621af": [], "test.algorand_models.not_null_silver__account_NON_ZERO_REWARDS_TOTAL.41323d2d55": [], "test.algorand_models.not_null_silver__account_NON_ZERO_BALANCE.778794d321": [], "test.algorand_models.not_null_silver__nft_sales_shufl_BLOCK_ID.b89e2e75aa": [], "test.algorand_models.not_null_silver__nft_sales_shufl_TX_GROUP_ID.2ce22b8fe9": [], "test.algorand_models.not_null_silver__nft_sales_shufl_PURCHASER.477ed9b890": [], "test.algorand_models.not_null_silver__nft_sales_shufl_NFT_ASSET_ID.b4bc9df3ac": [], "test.algorand_models.not_null_silver__nft_sales_shufl_TOTAL_SALES_AMOUNT.3c4e61432e": [], "test.algorand_models.not_null_silver__nft_sales_shufl_NUMBER_OF_NFTS.1a9765f957": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_shufl_block_id__tx_group_id__nft_asset_id.54653b8ac1": [], "test.algorand_models.not_null_silver__transaction_close_BLOCK_ID.72301b1c99": [], "test.algorand_models.not_null_silver__transaction_close_INTRA.d88c0ad995": [], "test.algorand_models.not_null_silver__transaction_close_TX_ID.c035f36d16": [], "test.algorand_models.not_null_silver__transaction_close_ACCOUNT.98d8989fd1": [], "test.algorand_models.not_null_silver__transaction_close_ASSET_ID.cde2c35534": [], "test.algorand_models.not_null_silver__transaction_close_AMOUNT.aff2c6ec1e": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__transaction_close_BLOCK_ID__INTRA__ACCOUNT__ASSET_ID.8abe5804e4": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_BLOCK_ID.ddf896bbb4": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TX_GROUP_ID.34cd6f2f48": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_PURCHASER.9cfec0ecb7": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NFT_ASSET_ID.0d7ea781b9": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_TOTAL_SALES_AMOUNT.0bee5b1c62": [], "test.algorand_models.not_null_silver__nft_sales_ab2_gallery_NUMBER_OF_NFTS.d294567592": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_ab2_gallery_block_id__tx_group_id__nft_asset_id.ec0bf20e85": [], "test.algorand_models.not_null_silver__asset_config_ASSET_ID.d90f759643": [], "test.algorand_models.not_null_silver__asset_config_ASSET_NAME.594c42ab0e": [], "test.algorand_models.not_null_silver__asset_config_ASSET_AMOUNT.4c0d85712c": [], "test.algorand_models.not_null_silver__asset_config_DECIMALS.c787fdb322": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__asset_config_asset_id.e66d602a24": [], "test.algorand_models.not_null_silver__swap_SWAP_PROGRAM.093a37c7af": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_BLOCK_ID.f0efa050b4": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_intra.16f1674be2": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_tx_group_id.7f2744d7dd": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swapper.2d27267b79": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_swapper__58.cf44f55bd6": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_asset_id.d7466f1e28": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_from_amount.c88e18c611": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_pool_address.53bb04f4f4": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_fxdx_dex_pool_address__58.ff1238dd52": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_asset_id.292fe1d4c2": [], "test.algorand_models.not_null_silver__swaps_fxdx_dex_swap_to_amount.7e4735c72b": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_fxdx_dex_block_id__intra.fedf3d48f6": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_BLOCK_ID.1e44ce613e": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_intra.7b7197ed1b": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_tx_group_id.6ae5f40265": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swapper.ca8fd72431": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_swapper__58.40f8639ba8": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_asset_id.2d035b5768": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_from_amount.c0e1a7e5b7": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_pool_address.fb8b0b7c93": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_silver__swaps_tinyman_dex_pool_address__58.4ed9db3298": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_asset_id.ec20e42a15": [], "test.algorand_models.not_null_silver__swaps_tinyman_dex_swap_to_amount.d35eabbe84": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__swaps_tinyman_dex_block_id__intra.ad8f68ce40": [], "test.algorand_models.not_null_silver__price_pool_balances_BLOCK_HOUR.b229c9d1cb": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__price_pool_balances_BLOCK_HOUR__day__1.723d9639e7": [], "test.algorand_models.not_null_silver__price_pool_balances_ASSET_NAME.8638554ffd": [], "test.algorand_models.not_null_silver__price_pool_balances_PRICE_USD.989d9e0691": [], "test.algorand_models.not_null_silver__price_pool_balances_ALGO_BALANCE.330ccc3fd1": [], "test.algorand_models.not_null_silver__price_pool_balances_NON_ALGO_BALANCE.e564fff9c3": [], "test.algorand_models.not_null_silver__price_pool_balances_POOL_ADDRESS.82b2456515": [], "test.algorand_models.not_null_silver__price_pool_balances__ALGO_PRICE.05d9bcd5f1": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__price_pool_balances_block_hour__asset_id.d2c284fb3d": [], "model.algorand_models.silver__nft_metadata_fifa": ["model.algorand_models.nft__ez_nft_metadata_fifa", "model.algorand_models.silver__asset", "model.algorand_models.silver__nft_sales_fifa_collect", "model.algorand_models.silver__nft_sales_fifa_collect", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id.1c7a37241c", "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL.d3768c6e10", "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.84e7e04331", "test.algorand_models.not_null_silver__nft_metadata_fifa_APPLICATION_ID.ef32827ab4", "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1.69b7e35594", "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.06fdef440a", "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2.1367680b0e", "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.d12a423579", "test.algorand_models.not_null_silver__nft_metadata_fifa_DESCRIPTION.40f8eecd76", "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NAME.8e5d5343a8", "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NUMBER.65dd8aaf4d", "test.algorand_models.not_null_silver__nft_metadata_fifa_EDITIONS.48391d4fa0", "test.algorand_models.not_null_silver__nft_metadata_fifa_EVENT_TYPE.634752ab1d", "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL.e577285b3a", "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.9b67b3e3f4", "test.algorand_models.not_null_silver__nft_metadata_fifa_HOST.5d08e9e7dd", "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE.fcba710397", "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.7094abd9d6", "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.d85d2fe756", "test.algorand_models.not_null_silver__nft_metadata_fifa_ITEM_NO.e5f37c8f6c", "test.algorand_models.not_null_silver__nft_metadata_fifa_METADATA_URL.8525cb7326", "test.algorand_models.not_null_silver__nft_metadata_fifa_MINUTE.35761f211a", "test.algorand_models.not_null_silver__nft_metadata_fifa_NAME.11ed0ba6ab", "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.a21a1dc6e4", "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.87699066ea", "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_URL.a06be7f249", "test.algorand_models.not_null_silver__nft_metadata_fifa_PLAYER.b6e9fd0b78", "test.algorand_models.not_null_silver__nft_metadata_fifa_RARITY.1dcb645879", "test.algorand_models.not_null_silver__nft_metadata_fifa_REKEY_CHECKED.5a1c5c6d17", "test.algorand_models.not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.c6b874a02c", "test.algorand_models.not_null_silver__nft_metadata_fifa_YEAR.378e8b1fb4"], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_ID.a21a1dc6e4": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_ASSET_NAME.87699066ea": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_NFT_URL.a06be7f249": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_METADATA_URL.8525cb7326": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL.d3768c6e10": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_ANIMATION_URL_MIMETYPE.84e7e04331": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_DESCRIPTION.40f8eecd76": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL.e577285b3a": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.9b67b3e3f4": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE.fcba710397": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_INTEGRITY.7094abd9d6": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_IMAGE_MIMETYPE.d85d2fe756": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_NAME.11ed0ba6ab": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_REKEY_CHECKED.5a1c5c6d17": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_APPLICATION_ID.ef32827ab4": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NUMBER.65dd8aaf4d": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_DROP_NAME.8e5d5343a8": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_ITEM_NO.e5f37c8f6c": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_EDITIONS.48391d4fa0": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_RARITY.1dcb645879": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_WORLD_CUP_TYPE.c6b874a02c": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_YEAR.378e8b1fb4": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_HOST.5d08e9e7dd": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1.69b7e35594": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_1_SCORE.06fdef440a": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2.1367680b0e": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_COUNTRY_2_SCORE.d12a423579": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_EVENT_TYPE.634752ab1d": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_PLAYER.b6e9fd0b78": [], "test.algorand_models.not_null_silver__nft_metadata_fifa_MINUTE.35761f211a": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_fifa_nft_asset_id.1c7a37241c": [], "model.algorand_models.nft__ez_nft_asset": ["model.algorand_models.nft__ez_nft_sales", "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS.bc568d9753", "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY.7acf4dc964", "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL.b416d7fc89", "test.algorand_models.not_null_nft__ez_nft_asset_ASSET_DELETED.d8130b69d3", "test.algorand_models.not_null_nft__ez_nft_asset_CREATOR_ADDRESS.7d740bd1ff", "test.algorand_models.not_null_nft__ez_nft_asset_NFT_ASSET_ID.86514aa937", "test.algorand_models.unique_nft__ez_nft_asset_NFT_ASSET_ID.1adaba1b87"], "model.algorand_models.nft__ez_nft_metadata_fifa": ["test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.fe11e31f2a", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.781bc07591", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.4a34860615", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.c18c6c03b5", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.d762e17a01", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.ddeec6ddb4", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.852bd0042b", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.aa4a795e44", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NAME.05b98ecda0", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.0f4561ebd7", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EDITIONS.ce0884acf4", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.eb154be284", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.995351b2f9", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.45c86ef1d5", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_HOST.f1909d4665", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE.d32c5a5fe3", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.214260d3ac", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.63ce565ce9", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ITEM_NO.389fd3ac7c", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_METADATA_URL.28ef305510", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_MINUTE.0d99862806", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NAME.5ee55076b3", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.ad1b4d5c73", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_URL.33c8351954", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_PLAYER.161cd08a3b", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_RARITY.7ba99a6ecb", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.af7d8c3f61", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.63e5846b20", "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_YEAR.52d387195c", "test.algorand_models.unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.551f60771b"], "test.algorand_models.not_null_nft__ez_nft_asset_NFT_ASSET_ID.86514aa937": [], "test.algorand_models.unique_nft__ez_nft_asset_NFT_ASSET_ID.1adaba1b87": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_TOTAL_SUPPLY.7acf4dc964": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_DECIMALS.bc568d9753": [], "test.algorand_models.not_null_nft__ez_nft_asset_CREATOR_ADDRESS.7d740bd1ff": [], "test.algorand_models.not_null_nft__ez_nft_asset_ASSET_DELETED.d8130b69d3": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__ez_nft_asset_NFT_URL.b416d7fc89": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.ad1b4d5c73": [], "test.algorand_models.unique_nft__ez_nft_metadata_fifa_NFT_ASSET_ID.551f60771b": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NFT_URL.33c8351954": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_METADATA_URL.28ef305510": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL.fe11e31f2a": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ANIMATION_URL_MIMETYPE.781bc07591": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DESCRIPTION.aa4a795e44": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL.995351b2f9": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EXTERNAL_URL_MIMETYPE.45c86ef1d5": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE.d32c5a5fe3": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_INTEGRITY.214260d3ac": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_IMAGE_MIMETYPE.63ce565ce9": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_NAME.5ee55076b3": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_REKEY_CHECKED.af7d8c3f61": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_APPLICATION_ID.4a34860615": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NUMBER.0f4561ebd7": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_DROP_NAME.05b98ecda0": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_ITEM_NO.389fd3ac7c": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EDITIONS.ce0884acf4": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_RARITY.7ba99a6ecb": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_WORLD_CUP_TYPE.63e5846b20": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_YEAR.52d387195c": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_HOST.f1909d4665": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1.c18c6c03b5": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_1_SCORE.d762e17a01": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2.ddeec6ddb4": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_COUNTRY_2_SCORE.852bd0042b": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_EVENT_TYPE.eb154be284": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_PLAYER.161cd08a3b": [], "test.algorand_models.not_null_nft__ez_nft_metadata_fifa_MINUTE.0d99862806": [], "model.algorand_models.silver__nft_sales_fifa_collect": ["model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id.9fa3b0dd33", "test.algorand_models.not_null_silver__nft_sales_fifa_collect_BLOCK_ID.7d96c4aec0", "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.f7a5d3ee2a", "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.6fb6529272", "test.algorand_models.not_null_silver__nft_sales_fifa_collect_PURCHASER.83c13e8818", "test.algorand_models.not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.0093025cc8"], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_BLOCK_ID.7d96c4aec0": [], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_TX_GROUP_ID.0093025cc8": [], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_PURCHASER.83c13e8818": [], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NFT_ASSET_ID.f7a5d3ee2a": [], "test.algorand_models.not_null_silver__nft_sales_fifa_collect_NUMBER_OF_NFTS.6fb6529272": [], "test.algorand_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_fifa_collect_block_id__tx_group_id__nft_asset_id.9fa3b0dd33": [], "model.algorand_models.core__fact_account_asset": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1", "test.algorand_models.dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ee00d0290", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED.fcfe5adddb", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ead921a8d", "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT.597703be38", "test.algorand_models.not_null_core__fact_account_asset_ADDRESS.2fb62466a1", "test.algorand_models.not_null_core__fact_account_asset_AMOUNT.ef5fdc71d6", "test.algorand_models.not_null_core__fact_account_asset_ASSET_ADDED_AT.c52060be1f", "test.algorand_models.not_null_core__fact_account_asset_ASSET_CLOSED.c1a67ef164", "test.algorand_models.not_null_core__fact_account_asset_ASSET_ID.3aea0c0135", "test.algorand_models.not_null_core__fact_account_asset_DIM_ACCOUNT_ID.ef7f5bee2c", "test.algorand_models.not_null_core__fact_account_asset_DIM_ASSET_ID.9ff76e60c9", "test.algorand_models.not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED.6f72982717", "test.algorand_models.not_null_core__fact_account_asset_FROZEN.5e726af5b0"], "model.algorand_models.core__fact_account_application": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1", "test.algorand_models.dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.cf5862e2d6", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT.d188d4fbe6", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.716ceb98d9", "test.algorand_models.negative_one_core__fact_account_application_DIM_APPLICATION_ID.c71f32a635", "test.algorand_models.negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.d9d0a3f46a", "test.algorand_models.not_null_core__fact_account_application_ADDRESS.7984f5ac55", "test.algorand_models.not_null_core__fact_account_application_APP_ID.cb34da215a", "test.algorand_models.not_null_core__fact_account_application_APP_INFO.a05149294e", "test.algorand_models.not_null_core__fact_account_application_DIM_ACCOUNT_ID.4897712a9a", "test.algorand_models.not_null_core__fact_account_application_DIM_APPLICATION_ID.f02218a4a9", "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.b223c523ef", "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.1b562cd2bf"], "model.algorand_models.core__fact_block": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f", "test.algorand_models.dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.22d32fdac2", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP.e29e19ead3", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1.db0ac774cc", "test.algorand_models.negative_one_core__fact_block_DIM_BLOCK_ID.ce779fd4a4", "test.algorand_models.not_null_core__fact_block_BLOCK_ID.7a114f396c", "test.algorand_models.not_null_core__fact_block_FACT_BLOCK_ID.27245331ae", "test.algorand_models.not_null_core__fact_block_FEE_TOTAL.9bf05d0902", "test.algorand_models.not_null_core__fact_block_TX_COUNT.a0b3964e1c", "test.algorand_models.not_null_core__fact_block_TX_SENDER_COUNT.5d9001e0b4"], "model.algorand_models.core__fact_swap": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897", "test.algorand_models.dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.974f8a94cd", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP.1f26576360", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58.2ee611d6c8", "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58.cb5f3fc19d", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1.5cbe20491e", "test.algorand_models.negative_one_core__fact_swap_DIM_APPLICATION_ID.b8df602cbe", "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.b8db857362", "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.0bee8c4652", "test.algorand_models.not_null_core__fact_swap_FACT_SWAP_ID.c6313c3a69", "test.algorand_models.not_null_core__fact_swap_INTRA.7936884abf", "test.algorand_models.not_null_core__fact_swap_POOL_ADDRESS.2bf1473a6b", "test.algorand_models.not_null_core__fact_swap_SWAPPER.3cacb91aee", "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_AMOUNT.16330981ff", "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_ASSET_ID.d49bb1b100", "test.algorand_models.not_null_core__fact_swap_SWAP_PROGRAM.0bfa114632", "test.algorand_models.not_null_core__fact_swap_SWAP_TO_AMOUNT.1ac273aa3e", "test.algorand_models.not_null_core__fact_swap_SWAP_TO_ASSET_ID.658b1a948d", "test.algorand_models.not_null_core__fact_swap_TX_GROUP_ID.e26c69edf1"], "model.algorand_models.core__dim_block": ["model.algorand_models.core__dim_account", "model.algorand_models.core__dim_account", "model.algorand_models.core__dim_application", "model.algorand_models.core__dim_application", "model.algorand_models.core__dim_asset", "model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_account_application", "model.algorand_models.core__fact_account_application", "model.algorand_models.core__fact_account_asset", "model.algorand_models.core__fact_account_asset", "model.algorand_models.core__fact_account_current_balance", "model.algorand_models.core__fact_block", "model.algorand_models.core__fact_swap", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction_close", "model.algorand_models.core__fact_transaction_participation", "model.algorand_models.core__fact_transaction_reward", "model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb", "test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb", "test.algorand_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT.207627e194", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "test.algorand_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "test.algorand_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "test.algorand_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "test.algorand_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "test.algorand_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "test.algorand_models.not_null_core__dim_block_GENESIS_HASH.ea4bdf6004", "test.algorand_models.not_null_core__dim_block_HEADER.b259d18110", "test.algorand_models.not_null_core__dim_block_NETWORK.1d650e9ff8", "test.algorand_models.not_null_core__dim_block_PREV_BLOCK_HASH.18da8805b1", "test.algorand_models.not_null_core__dim_block_REWARDS_LEVEL.b3731fc143"], "model.algorand_models.core__dim_account": ["model.algorand_models.core__dim_application", "model.algorand_models.core__dim_asset", "model.algorand_models.core__fact_account_application", "model.algorand_models.core__fact_account_asset", "model.algorand_models.core__fact_account_current_balance", "model.algorand_models.core__fact_daily_balances", "model.algorand_models.core__fact_swap", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction_close", "model.algorand_models.core__fact_transaction_participation", "model.algorand_models.core__fact_transaction_reward", "model.algorand_models.nft__ez_nft_sales", "model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573", "test.algorand_models.dbt_constraints_foreign_key_core__fact_daily_balances_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.940666eb4d", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664", "test.algorand_models.dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.4fb5a696cc", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID.e4d582f3bb", "test.algorand_models.negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.3d2dd75ea1", "test.algorand_models.not_null_core__dim_account_ACCOUNT_CLOSED.11c85e7078", "test.algorand_models.not_null_core__dim_account_ADDRESS.fe84bdbbfe", "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.3834bda56e", "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.95111c6779", "test.algorand_models.not_null_core__dim_account_DIM_WALLET_TYPE_ID.bac483a8d4", "test.algorand_models.not_null_core__dim_account_NON_ZERO_BALANCE.0e3d02c2d7", "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_BASE.c98ed50245", "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.baccd253cc"], "model.algorand_models.core__fact_transaction_close": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6", "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.a0bf2e76cb", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.ea4867a007", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1.f5816be11a", "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.ad91196091", "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ASSET_ID.33c3ea10cc", "test.algorand_models.negative_one_core__fact_transaction_close_DIM_BLOCK_ID.e6f30ff6cf", "test.algorand_models.not_null_core__fact_transaction_close_ADDRESS.f082cd3f49", "test.algorand_models.not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.603d62bc2a", "test.algorand_models.not_null_core__fact_transaction_close_INNER_TX.011a756b37", "test.algorand_models.not_null_core__fact_transaction_close_INTRA.417d3d7f9c", "test.algorand_models.not_null_core__fact_transaction_close_TX_ID.4d13188268"], "model.algorand_models.core__dim_wallet_type": ["model.algorand_models.core__dim_account", "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213", "test.algorand_models.dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID.87af0124fb", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID.7e8d572c2e"], "model.algorand_models.core__fact_transaction_participation": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c", "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.ed8c3d095e", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP.f4d8ce0744", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1.65011d7464", "test.algorand_models.negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.d4efa93762", "test.algorand_models.not_null_core__fact_transaction_participation_ADDRESS.c36ccaa6a5", "test.algorand_models.not_null_core__fact_transaction_participation_BLOCK_ID.e7248a39cb", "test.algorand_models.not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.1d12b5dccd", "test.algorand_models.not_null_core__fact_transaction_participation_INTRA.2862c2e571"], "model.algorand_models.core__dim_asset": ["model.algorand_models.core__ez_price_swap", "model.algorand_models.core__ez_transaction_application_call", "model.algorand_models.core__ez_transaction_asset_configuration", "model.algorand_models.core__ez_transaction_asset_freeze", "model.algorand_models.core__ez_transaction_asset_transfer", "model.algorand_models.core__ez_transaction_key_registration", "model.algorand_models.core__ez_transaction_payment", "model.algorand_models.core__ez_transfer", "model.algorand_models.core__ez_transfer", "model.algorand_models.core__fact_account_asset", "model.algorand_models.core__fact_swap", "model.algorand_models.core__fact_swap", "model.algorand_models.core__fact_transaction", "model.algorand_models.core__fact_transaction_close", "model.algorand_models.nft__ez_nft_asset", "model.algorand_models.nft__fact_nft_sales", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a", "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35", "test.algorand_models.dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.3b9b10292a", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL.878e90161e", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS.b55eaa38a3", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID.a6df61746c", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY.1d083e31fe", "test.algorand_models.negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.f539a615ab", "test.algorand_models.negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.a12b4bde0e", "test.algorand_models.not_null_core__dim_asset_ASSET_DELETED.64e32068ca", "test.algorand_models.not_null_core__dim_asset_ASSET_ID.1b85e00ff9", "test.algorand_models.not_null_core__dim_asset_CREATOR_ADDRESS.4427e160a9", "test.algorand_models.not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.9516f008fe", "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.d664058a76", "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.5b8c5924f0"], "model.algorand_models.core__fact_transaction": ["model.algorand_models.core__ez_transaction_application_call", "model.algorand_models.core__ez_transaction_asset_configuration", "model.algorand_models.core__ez_transaction_asset_freeze", "model.algorand_models.core__ez_transaction_asset_transfer", "model.algorand_models.core__ez_transaction_key_registration", "model.algorand_models.core__ez_transaction_payment", "model.algorand_models.core__ez_transfer", "model.algorand_models.core__ez_transfer", "model.algorand_models.silver__get_tx", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa", "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID.b51ad78f87", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID.ea4f7647a5", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1.2acf53ad08", "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER.ecab52c07e", "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER.c83e3e902e", "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.fd96045039", "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.2662d0b220", "test.algorand_models.negative_one_core__fact_transaction_DIM_ASSET_ID.07c0df61ff", "test.algorand_models.negative_one_core__fact_transaction_DIM_BLOCK_ID.2f8f97ffb1", "test.algorand_models.negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.c1db58e3cc", "test.algorand_models.not_null_core__fact_transaction_BLOCK_ID.0b34bf4323", "test.algorand_models.not_null_core__fact_transaction_BLOCK_TIMESTAMP.3cadcd6f8f", "test.algorand_models.not_null_core__fact_transaction_INNER_TX.55f4626d23", "test.algorand_models.not_null_core__fact_transaction_INTRA.f4226e7bbd", "test.algorand_models.not_null_core__fact_transaction_TX_ID.00dac6ae6c", "test.algorand_models.not_null_core__fact_transaction_TX_SENDER.1325477ced"], "model.algorand_models.core__dim_application": ["model.algorand_models.core__fact_account_application", "model.algorand_models.core__fact_swap", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd", "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277", "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116", "test.algorand_models.dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID.14b99b2559", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT.359a7deabb", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID.e99cec695c", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS.371f4326c3", "test.algorand_models.negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.7b5db3ddfe", "test.algorand_models.negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.c26d6cde09", "test.algorand_models.not_null_core__dim_application_APP_CLOSED.12260b32bd", "test.algorand_models.not_null_core__dim_application_APP_ID.9fd6bedaba", "test.algorand_models.not_null_core__dim_application_CREATED_AT.075e7184cc", "test.algorand_models.not_null_core__dim_application_CREATOR_ADDRESS.5fee087722", "test.algorand_models.not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.016d487909", "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.ef42eaadd3", "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.3aeb069ac2"], "model.algorand_models.core__dim_transaction_type": ["model.algorand_models.core__fact_transaction", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa", "test.algorand_models.dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.a3a8ac0e76", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.38d3e554ce"], "model.algorand_models.core__fact_transaction_reward": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa", "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74", "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.986de25489", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.3c93967a7c", "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.df64eb3789", "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.4f76186f2c", "test.algorand_models.not_null_core__fact_transaction_reward_ADDRESS.5ea787acf8", "test.algorand_models.not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.12512b0d24", "test.algorand_models.not_null_core__fact_transaction_reward_INTRA.677f4b2caa", "test.algorand_models.not_null_core__fact_transaction_reward_TX_ID.2e0b99871d"], "model.algorand_models.core__fact_account_current_balance": ["test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573", "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb", "test.algorand_models.dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.acfd598d86", "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.eacd2e86ea", "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float.781a65230e", "test.algorand_models.negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.92360d53b4", "test.algorand_models.not_null_core__fact_account_current_balance_ADDRESS.b651ef5fe3", "test.algorand_models.not_null_core__fact_account_current_balance_BALANCE.1d6fdeae7b", "test.algorand_models.not_null_core__fact_account_current_balance_CREATED_AT.ca2f8550e1", "test.algorand_models.not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.47a074fbee", "test.algorand_models.not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT.6c2db950e3", "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_BASE.64351dcc0f", "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_TOTAL.e8833447bb"], "model.algorand_models.nft__fact_nft_sales": ["model.algorand_models.nft__ez_nft_sales", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35", "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb", "test.algorand_models.dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID.8fc2e94dca", "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP.493cf3464a", "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1.5d72d7cbeb", "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.c4b3e5f8ab", "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.4083c668bd", "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.f02b7cb0a7", "test.algorand_models.not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.d3847fb981", "test.algorand_models.not_null_nft__fact_nft_sales_NFT_ASSET_ID.58d08fc598", "test.algorand_models.not_null_nft__fact_nft_sales_NFT_MARKETPLACE.a92dbc63d8", "test.algorand_models.not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.7e788a19ab", "test.algorand_models.not_null_nft__fact_nft_sales_PURCHASER.41c5166c2e", "test.algorand_models.not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.6e09fd033e", "test.algorand_models.not_null_nft__fact_nft_sales_TX_GROUP_ID.af34d7fde1"], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ead921a8d": [], "test.algorand_models.not_null_core__fact_account_asset_DIM_ACCOUNT_ID.ef7f5bee2c": [], "test.algorand_models.not_null_core__fact_account_asset_ADDRESS.2fb62466a1": [], "test.algorand_models.not_null_core__fact_account_asset_DIM_ASSET_ID.9ff76e60c9": [], "test.algorand_models.not_null_core__fact_account_asset_ASSET_ID.3aea0c0135": [], "test.algorand_models.not_null_core__fact_account_asset_AMOUNT.ef5fdc71d6": [], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_asset_AMOUNT__NUMBER__FLOAT.597703be38": [], "test.algorand_models.not_null_core__fact_account_asset_ASSET_ADDED_AT.c52060be1f": [], "test.algorand_models.not_null_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED.6f72982717": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_asset_ASSET_LAST_REMOVED.fcfe5adddb": [], "test.algorand_models.not_null_core__fact_account_asset_ASSET_CLOSED.c1a67ef164": [], "test.algorand_models.not_null_core__fact_account_asset_FROZEN.5e726af5b0": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_asset_FACT_ACCOUNT_ASSET_ID.4ee00d0290": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.aadc8f29f3": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_ADDED_AT__DIM_BLOCK_ID__ref_core__dim_block_.61f2f3c79c": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_BLOCK_ID__ASSET_LAST_REMOVED__DIM_BLOCK_ID__ref_core__dim_block_.8fc5f5f9d1": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_asset_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.8757a4fd32": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.716ceb98d9": [], "test.algorand_models.not_null_core__fact_account_application_DIM_ACCOUNT_ID.4897712a9a": [], "test.algorand_models.not_null_core__fact_account_application_ADDRESS.7984f5ac55": [], "test.algorand_models.not_null_core__fact_account_application_DIM_APPLICATION_ID.f02218a4a9": [], "test.algorand_models.negative_one_core__fact_account_application_DIM_APPLICATION_ID.c71f32a635": [], "test.algorand_models.not_null_core__fact_account_application_APP_ID.cb34da215a": [], "test.algorand_models.not_null_core__fact_account_application_APP_INFO.a05149294e": [], "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.1b562cd2bf": [], "test.algorand_models.negative_one_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT.d9d0a3f46a": [], "test.algorand_models.not_null_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT.b223c523ef": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_application_CLOSED_AT.d188d4fbe6": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_application_FACT_ACCOUNT_APPLICATION_ID.cf5862e2d6": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.724112db7e": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.354db95277": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.b32d63c4a1": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.c402ed2de4": [], "test.algorand_models.not_null_core__fact_block_FACT_BLOCK_ID.27245331ae": [], "test.algorand_models.not_null_core__fact_block_BLOCK_ID.7a114f396c": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_block_BLOCK_TIMESTAMP.e29e19ead3": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_BLOCK_TIMESTAMP__day__1.db0ac774cc": [], "test.algorand_models.negative_one_core__fact_block_DIM_BLOCK_ID.ce779fd4a4": [], "test.algorand_models.not_null_core__fact_block_TX_COUNT.a0b3964e1c": [], "test.algorand_models.not_null_core__fact_block_TX_SENDER_COUNT.5d9001e0b4": [], "test.algorand_models.not_null_core__fact_block_FEE_TOTAL.9bf05d0902": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_block_FACT_BLOCK_ID.22d32fdac2": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_block_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9411a93e6f": [], "test.algorand_models.not_null_core__fact_swap_FACT_SWAP_ID.c6313c3a69": [], "test.algorand_models.not_null_core__fact_swap_SWAP_PROGRAM.0bfa114632": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_swap_BLOCK_TIMESTAMP.1f26576360": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_swap_BLOCK_TIMESTAMP__day__1.5cbe20491e": [], "test.algorand_models.not_null_core__fact_swap_INTRA.7936884abf": [], "test.algorand_models.not_null_core__fact_swap_TX_GROUP_ID.e26c69edf1": [], "test.algorand_models.negative_one_core__fact_swap_DIM_APPLICATION_ID.b8df602cbe": [], "test.algorand_models.not_null_core__fact_swap_SWAPPER.3cacb91aee": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_SWAPPER__58.cb5f3fc19d": [], "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_FROM.b8db857362": [], "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_ASSET_ID.d49bb1b100": [], "test.algorand_models.not_null_core__fact_swap_SWAP_FROM_AMOUNT.16330981ff": [], "test.algorand_models.not_null_core__fact_swap_POOL_ADDRESS.2bf1473a6b": [], "test.algorand_models.dbt_expectations_expect_column_value_lengths_to_equal_core__fact_swap_POOL_ADDRESS__58.2ee611d6c8": [], "test.algorand_models.negative_one_core__fact_swap_DIM_ASSET_ID__SWAP_TO.0bee8c4652": [], "test.algorand_models.not_null_core__fact_swap_SWAP_TO_ASSET_ID.658b1a948d": [], "test.algorand_models.not_null_core__fact_swap_SWAP_TO_AMOUNT.1ac273aa3e": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_swap_FACT_SWAP_ID.974f8a94cd": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ACCOUNT_ID__SWAPPER__DIM_ACCOUNT_ID__ref_core__dim_account_.57c7fad4ee": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_APPLICATION_ID__DIM_APPLICATION_ID__ref_core__dim_application_.f988b09116": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_FROM__DIM_ASSET_ID__ref_core__dim_asset_.62c7171a20": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_swap_DIM_ASSET_ID__SWAP_TO__DIM_ASSET_ID__ref_core__dim_asset_.e08a8be897": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": [], "test.algorand_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": [], "test.algorand_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": [], "test.algorand_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": [], "test.algorand_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": [], "test.algorand_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": [], "test.algorand_models.not_null_core__dim_block_REWARDS_LEVEL.b3731fc143": [], "test.algorand_models.not_null_core__dim_block_NETWORK.1d650e9ff8": [], "test.algorand_models.not_null_core__dim_block_GENESIS_HASH.ea4bdf6004": [], "test.algorand_models.not_null_core__dim_block_PREV_BLOCK_HASH.18da8805b1": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_block_TXN_ROOT.207627e194": [], "test.algorand_models.not_null_core__dim_block_HEADER.b259d18110": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_account_DIM_ACCOUNT_ID.e4d582f3bb": [], "test.algorand_models.not_null_core__dim_account_ADDRESS.fe84bdbbfe": [], "test.algorand_models.not_null_core__dim_account_ACCOUNT_CLOSED.11c85e7078": [], "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_BASE.c98ed50245": [], "test.algorand_models.not_null_core__dim_account_NON_ZERO_REWARDS_TOTAL.baccd253cc": [], "test.algorand_models.not_null_core__dim_account_NON_ZERO_BALANCE.0e3d02c2d7": [], "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CREATED_AT.95111c6779": [], "test.algorand_models.negative_one_core__dim_account_DIM_BLOCK_ID__CREATED_AT.3d2dd75ea1": [], "test.algorand_models.not_null_core__dim_account_DIM_BLOCK_ID__CLOSED_AT.3834bda56e": [], "test.algorand_models.not_null_core__dim_account_DIM_WALLET_TYPE_ID.bac483a8d4": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_account_DIM_ACCOUNT_ID.4fb5a696cc": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.07c4f36622": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7dbab114f6": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_account_DIM_WALLET_TYPE_ID__DIM_WALLET_TYPE_ID__ref_core__dim_wallet_type_.a005050213": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.ea4867a007": [], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_BLOCK_ID.e6f30ff6cf": [], "test.algorand_models.not_null_core__fact_transaction_close_BLOCK_TIMESTAMP.603d62bc2a": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_close_BLOCK_TIMESTAMP__day__1.f5816be11a": [], "test.algorand_models.not_null_core__fact_transaction_close_INTRA.417d3d7f9c": [], "test.algorand_models.not_null_core__fact_transaction_close_TX_ID.4d13188268": [], "test.algorand_models.not_null_core__fact_transaction_close_INNER_TX.011a756b37": [], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ACCOUNT_ID.ad91196091": [], "test.algorand_models.not_null_core__fact_transaction_close_ADDRESS.f082cd3f49": [], "test.algorand_models.negative_one_core__fact_transaction_close_DIM_ASSET_ID.33c3ea10cc": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_close_FACT_TRANSACTION_CLOSE_ID.a0bf2e76cb": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8c40a3b5b6": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.bb3b5794cf": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_close_DIM_ASSET_ID__DIM_ASSET_ID__ref_core__dim_asset_.dea3f0b992": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_wallet_type_DIM_WALLET_TYPE_ID.7e8d572c2e": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_wallet_type_DIM_WALLET_TYPE_ID.87af0124fb": [], "test.algorand_models.not_null_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.1d12b5dccd": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_participation_BLOCK_TIMESTAMP.f4d8ce0744": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_participation_BLOCK_TIMESTAMP__day__1.65011d7464": [], "test.algorand_models.not_null_core__fact_transaction_participation_BLOCK_ID.e7248a39cb": [], "test.algorand_models.negative_one_core__fact_transaction_participation_DIM_BLOCK_ID.d4efa93762": [], "test.algorand_models.not_null_core__fact_transaction_participation_INTRA.2862c2e571": [], "test.algorand_models.not_null_core__fact_transaction_participation_ADDRESS.c36ccaa6a5": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_participation_FACT_TRANSACTION_PARTICIPATION_ID.ed8c3d095e": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.31dcbcfc1c": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_participation_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.f7c94f6820": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DIM_ASSET_ID.a6df61746c": [], "test.algorand_models.not_null_core__dim_asset_ASSET_ID.1b85e00ff9": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_TOTAL_SUPPLY.1d083e31fe": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_ASSET_URL.878e90161e": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_asset_DECIMALS.b55eaa38a3": [], "test.algorand_models.not_null_core__dim_asset_ASSET_DELETED.64e32068ca": [], "test.algorand_models.not_null_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.9516f008fe": [], "test.algorand_models.negative_one_core__dim_asset_DIM_ACCOUNT_ID__CREATOR.f539a615ab": [], "test.algorand_models.not_null_core__dim_asset_CREATOR_ADDRESS.4427e160a9": [], "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.5b8c5924f0": [], "test.algorand_models.negative_one_core__dim_asset_DIM_BLOCK_ID__CREATED_AT.a12b4bde0e": [], "test.algorand_models.not_null_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT.d664058a76": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_asset_DIM_ASSET_ID.3b9b10292a": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a2f4b7e45b": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.7d9dd7ed01": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_asset_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.9f9624674a": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_FACT_TRANSACTION_ID.ea4f7647a5": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_BLOCK_ID.2f8f97ffb1": [], "test.algorand_models.not_null_core__fact_transaction_BLOCK_ID.0b34bf4323": [], "test.algorand_models.not_null_core__fact_transaction_BLOCK_TIMESTAMP.3cadcd6f8f": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transaction_BLOCK_TIMESTAMP__day__1.2acf53ad08": [], "test.algorand_models.not_null_core__fact_transaction_INTRA.f4226e7bbd": [], "test.algorand_models.not_null_core__fact_transaction_TX_ID.00dac6ae6c": [], "test.algorand_models.not_null_core__fact_transaction_INNER_TX.55f4626d23": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER.2662d0b220": [], "test.algorand_models.not_null_core__fact_transaction_TX_SENDER.1325477ced": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_ASSET_ID.07c0df61ff": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_TRANSACTION_TYPE_ID.c1db58e3cc": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER.fd96045039": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER.c83e3e902e": [], "test.algorand_models.negative_one_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER.ecab52c07e": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_FACT_TRANSACTION_ID.b51ad78f87": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2161a995de": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_TRANSACTION_TYPE_ID__DIM_TRANSACTION_TYPE_ID__ref_core__dim_transaction_type_.43b4c185fa": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__TX_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.954c6b857c": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.b2900f530c": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_SENDER__DIM_ACCOUNT_ID__ref_core__dim_account_.ef80224d21": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_DIM_ACCOUNT_ID__ASSET_RECEIVER__DIM_ACCOUNT_ID__ref_core__dim_account_.5e2f133ed1": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_DIM_APPLICATION_ID.e99cec695c": [], "test.algorand_models.not_null_core__dim_application_APP_ID.9fd6bedaba": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_PARAMS.371f4326c3": [], "test.algorand_models.not_null_core__dim_application_APP_CLOSED.12260b32bd": [], "test.algorand_models.not_null_core__dim_application_DIM_ACCOUNT_ID__CREATOR.016d487909": [], "test.algorand_models.negative_one_core__dim_application_DIM_ACCOUNT_ID__CREATOR.7b5db3ddfe": [], "test.algorand_models.not_null_core__dim_application_CREATOR_ADDRESS.5fee087722": [], "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CREATED_AT.3aeb069ac2": [], "test.algorand_models.negative_one_core__dim_application_DIM_BLOCK_ID__CREATED_AT.c26d6cde09": [], "test.algorand_models.not_null_core__dim_application_CREATED_AT.075e7184cc": [], "test.algorand_models.not_null_core__dim_application_DIM_BLOCK_ID__CLOSED_AT.ef42eaadd3": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_application_CLOSED_AT.359a7deabb": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_application_DIM_APPLICATION_ID.14b99b2559": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_ACCOUNT_ID__CREATOR__DIM_ACCOUNT_ID__ref_core__dim_account_.a8ff4ac381": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.dea4e6bfd7": [], "test.algorand_models.dbt_constraints_foreign_key_core__dim_application_DIM_BLOCK_ID__CLOSED_AT__DIM_BLOCK_ID__ref_core__dim_block_.e0348416cd": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.38d3e554ce": [], "test.algorand_models.dbt_constraints_primary_key_core__dim_transaction_type_DIM_TRANSACTION_TYPE_ID.a3a8ac0e76": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.3c93967a7c": [], "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_BLOCK_ID.4f76186f2c": [], "test.algorand_models.not_null_core__fact_transaction_reward_BLOCK_TIMESTAMP.12512b0d24": [], "test.algorand_models.not_null_core__fact_transaction_reward_INTRA.677f4b2caa": [], "test.algorand_models.not_null_core__fact_transaction_reward_TX_ID.2e0b99871d": [], "test.algorand_models.negative_one_core__fact_transaction_reward_DIM_ACCOUNT_ID.df64eb3789": [], "test.algorand_models.not_null_core__fact_transaction_reward_ADDRESS.5ea787acf8": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_transaction_reward_FACT_TRANSACTION_REWARD_ID.986de25489": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7700bb2a74": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_transaction_reward_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d75f452aa": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.eacd2e86ea": [], "test.algorand_models.not_null_core__fact_account_current_balance_DIM_ACCOUNT_ID.47a074fbee": [], "test.algorand_models.negative_one_core__fact_account_current_balance_DIM_ACCOUNT_ID.92360d53b4": [], "test.algorand_models.not_null_core__fact_account_current_balance_ADDRESS.b651ef5fe3": [], "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_BASE.64351dcc0f": [], "test.algorand_models.not_null_core__fact_account_current_balance_REWARDS_TOTAL.e8833447bb": [], "test.algorand_models.not_null_core__fact_account_current_balance_BALANCE.1d6fdeae7b": [], "test.algorand_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_account_current_balance_BALANCE__decimal__float.781a65230e": [], "test.algorand_models.not_null_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT.6c2db950e3": [], "test.algorand_models.not_null_core__fact_account_current_balance_CREATED_AT.ca2f8550e1": [], "test.algorand_models.dbt_constraints_primary_key_core__fact_account_current_balance_FACT_ACCOUNT_CURRENT_BALANCE_ID.acfd598d86": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_ACCOUNT_ID__DIM_ACCOUNT_ID__ref_core__dim_account_.7d99942573": [], "test.algorand_models.dbt_constraints_foreign_key_core__fact_account_current_balance_DIM_BLOCK_ID__CREATED_AT__DIM_BLOCK_ID__ref_core__dim_block_.ed1910e6eb": [], "test.algorand_models.not_null_nft__fact_nft_sales_FACT_NFT_SALES_ID.d3847fb981": [], "test.algorand_models.not_null_nft__fact_nft_sales_NFT_MARKETPLACE.a92dbc63d8": [], "test.algorand_models.dbt_expectations_expect_column_to_exist_nft__fact_nft_sales_BLOCK_TIMESTAMP.493cf3464a": [], "test.algorand_models.dbt_expectations_expect_row_values_to_have_recent_data_nft__fact_nft_sales_BLOCK_TIMESTAMP__day__1.5d72d7cbeb": [], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_BLOCK_ID.f02b7cb0a7": [], "test.algorand_models.not_null_nft__fact_nft_sales_TX_GROUP_ID.af34d7fde1": [], "test.algorand_models.not_null_nft__fact_nft_sales_PURCHASER.41c5166c2e": [], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER.c4b3e5f8ab": [], "test.algorand_models.not_null_nft__fact_nft_sales_NFT_ASSET_ID.58d08fc598": [], "test.algorand_models.negative_one_nft__fact_nft_sales_DIM_ASSET_ID__NFT.4083c668bd": [], "test.algorand_models.not_null_nft__fact_nft_sales_NUMBER_OF_NFTS.7e788a19ab": [], "test.algorand_models.not_null_nft__fact_nft_sales_TOTAL_SALES_AMOUNT.6e09fd033e": [], "test.algorand_models.dbt_constraints_primary_key_nft__fact_nft_sales_FACT_NFT_SALES_ID.8fc2e94dca": [], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.34407652fb": [], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ACCOUNT_ID__PURCHASER__DIM_ACCOUNT_ID__ref_core__dim_account_.84c71a6664": [], "test.algorand_models.dbt_constraints_foreign_key_nft__fact_nft_sales_DIM_ASSET_ID__NFT__DIM_ASSET_ID__ref_core__dim_asset_.b6fc802d35": [], "source.algorand_models.shared.prices": [], "source.algorand_models.shared.prices_v2": ["model.algorand_models.silver__price_pool_balances"], "source.algorand_models.shared.cmc_assets": [], "source.algorand_models.shared.market_asset_metadata": [], "source.algorand_models.shared.coingecko_prices": [], "source.algorand_models.shared.hours": ["model.algorand_models.silver__daily_balances", "model.algorand_models.silver__hourly_pool_balances", "model.algorand_models.silver__price_swap"], "source.algorand_models.shared.udm_address_labels": [], "source.algorand_models.shared.udm_address_labels_new": [], "source.algorand_models.shared.udm_address_tags": [], "source.algorand_models.shared.udm_balances": [], "source.algorand_models.shared.udm_decimal_adjustments": [], "source.algorand_models.shared.udm_velocity": [], "source.algorand_models.shared.uniswapv2factory_event_paircreated": [], "source.algorand_models.shared.flow_balances": [], "source.algorand_models.shared.near_balances": [], "source.algorand_models.shared.algorand_balances": [], "source.algorand_models.shared.terra_balances": [], "source.algorand_models.bronze.prod_nft_metadata_uploads_1828572827": ["model.algorand_models.silver__asset"], "source.algorand_models.crosschain.address_labels": ["model.algorand_models.core__dim_label"], "source.algorand_models.algorand.ACCOUNT": ["model.algorand_models.bronze__account"], "source.algorand_models.algorand.ACCOUNT_APP": ["model.algorand_models.bronze__account_application"], "source.algorand_models.algorand.ACCOUNT_ASSET": ["model.algorand_models.bronze__account_asset"], "source.algorand_models.algorand.APP": ["model.algorand_models.bronze__application"], "source.algorand_models.algorand.ASSET": ["model.algorand_models.bronze__asset"], "source.algorand_models.algorand.BLOCK_HEADER": ["model.algorand_models.bronze__block"], "source.algorand_models.algorand.METASTATE": [], "source.algorand_models.algorand.TXN": ["model.algorand_models.bronze__transaction"], "source.algorand_models.algorand.TXN_PARTICIPATION": ["model.algorand_models.silver__transaction_participation"], "source.algorand_models.prod.solana_blocks": [], "source.algorand_models.prod.solana_txs": [], "source.algorand_models.prod.ethereum_blocks": [], "source.algorand_models.prod.ethereum_txs": [], "source.algorand_models.algorand_db_external.algorand_indexer_tx": ["model.algorand_models.silver__indexer_tx", "model.algorand_models.silver__indexer_tx"]}}